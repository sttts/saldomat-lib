<?xml version="1.0"?>
<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN" 
               "http://www.oasis-open.org/docbook/xml/4.1.2/docbookx.dtd">
<refentry id="gnutls-x509">
<refmeta>
<refentrytitle role="top_of_page" id="gnutls-x509.top_of_page">x509</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>GNUTLS Library</refmiscinfo>
</refmeta>

<refnamediv>
<refname>x509</refname>
<refpurpose></refpurpose>
</refnamediv>

<refsynopsisdiv id="gnutls-x509.synopsis" role="synopsis">
<title role="synopsis.title">Synopsis</title>

<synopsis>
#define             <link linkend="GNUTLS-OID-X520-COUNTRY-NAME--CAPS">GNUTLS_OID_X520_COUNTRY_NAME</link>
#define             <link linkend="GNUTLS-OID-X520-ORGANIZATION-NAME--CAPS">GNUTLS_OID_X520_ORGANIZATION_NAME</link>
#define             <link linkend="GNUTLS-OID-X520-ORGANIZATIONAL-UNIT-NAME--CAPS">GNUTLS_OID_X520_ORGANIZATIONAL_UNIT_NAME</link>
#define             <link linkend="GNUTLS-OID-X520-COMMON-NAME--CAPS">GNUTLS_OID_X520_COMMON_NAME</link>
#define             <link linkend="GNUTLS-OID-X520-LOCALITY-NAME--CAPS">GNUTLS_OID_X520_LOCALITY_NAME</link>
#define             <link linkend="GNUTLS-OID-X520-STATE-OR-PROVINCE-NAME--CAPS">GNUTLS_OID_X520_STATE_OR_PROVINCE_NAME</link>
#define             <link linkend="GNUTLS-OID-X520-INITIALS--CAPS">GNUTLS_OID_X520_INITIALS</link>
#define             <link linkend="GNUTLS-OID-X520-GENERATION-QUALIFIER--CAPS">GNUTLS_OID_X520_GENERATION_QUALIFIER</link>
#define             <link linkend="GNUTLS-OID-X520-SURNAME--CAPS">GNUTLS_OID_X520_SURNAME</link>
#define             <link linkend="GNUTLS-OID-X520-GIVEN-NAME--CAPS">GNUTLS_OID_X520_GIVEN_NAME</link>
#define             <link linkend="GNUTLS-OID-X520-TITLE--CAPS">GNUTLS_OID_X520_TITLE</link>
#define             <link linkend="GNUTLS-OID-X520-DN-QUALIFIER--CAPS">GNUTLS_OID_X520_DN_QUALIFIER</link>
#define             <link linkend="GNUTLS-OID-X520-PSEUDONYM--CAPS">GNUTLS_OID_X520_PSEUDONYM</link>
#define             <link linkend="GNUTLS-OID-LDAP-DC--CAPS">GNUTLS_OID_LDAP_DC</link>
#define             <link linkend="GNUTLS-OID-LDAP-UID--CAPS">GNUTLS_OID_LDAP_UID</link>
#define             <link linkend="GNUTLS-OID-PKCS9-EMAIL--CAPS">GNUTLS_OID_PKCS9_EMAIL</link>
#define             <link linkend="GNUTLS-OID-PKIX-DATE-OF-BIRTH--CAPS">GNUTLS_OID_PKIX_DATE_OF_BIRTH</link>
#define             <link linkend="GNUTLS-OID-PKIX-PLACE-OF-BIRTH--CAPS">GNUTLS_OID_PKIX_PLACE_OF_BIRTH</link>
#define             <link linkend="GNUTLS-OID-PKIX-GENDER--CAPS">GNUTLS_OID_PKIX_GENDER</link>
#define             <link linkend="GNUTLS-OID-PKIX-COUNTRY-OF-CITIZENSHIP--CAPS">GNUTLS_OID_PKIX_COUNTRY_OF_CITIZENSHIP</link>
#define             <link linkend="GNUTLS-OID-PKIX-COUNTRY-OF-RESIDENCE--CAPS">GNUTLS_OID_PKIX_COUNTRY_OF_RESIDENCE</link>
#define             <link linkend="GNUTLS-KP-TLS-WWW-SERVER--CAPS">GNUTLS_KP_TLS_WWW_SERVER</link>
#define             <link linkend="GNUTLS-KP-TLS-WWW-CLIENT--CAPS">GNUTLS_KP_TLS_WWW_CLIENT</link>
#define             <link linkend="GNUTLS-KP-CODE-SIGNING--CAPS">GNUTLS_KP_CODE_SIGNING</link>
#define             <link linkend="GNUTLS-KP-EMAIL-PROTECTION--CAPS">GNUTLS_KP_EMAIL_PROTECTION</link>
#define             <link linkend="GNUTLS-KP-TIME-STAMPING--CAPS">GNUTLS_KP_TIME_STAMPING</link>
#define             <link linkend="GNUTLS-KP-OCSP-SIGNING--CAPS">GNUTLS_KP_OCSP_SIGNING</link>
#define             <link linkend="GNUTLS-KP-ANY--CAPS">GNUTLS_KP_ANY</link>
#define             <link linkend="GNUTLS-FSAN-SET--CAPS">GNUTLS_FSAN_SET</link>
#define             <link linkend="GNUTLS-FSAN-APPEND--CAPS">GNUTLS_FSAN_APPEND</link>
enum                <link linkend="gnutls-certificate-import-flags">gnutls_certificate_import_flags</link>;
<link linkend="int">int</link>                 <link linkend="gnutls-x509-crt-init">gnutls_x509_crt_init</link>                (<link linkend="gnutls-x509-crt-t">gnutls_x509_crt_t</link> *cert);
<link linkend="void">void</link>                <link linkend="gnutls-x509-crt-deinit">gnutls_x509_crt_deinit</link>              (<link linkend="gnutls-x509-crt-t">gnutls_x509_crt_t</link> cert);
<link linkend="int">int</link>                 <link linkend="gnutls-x509-crt-import">gnutls_x509_crt_import</link>              (<link linkend="gnutls-x509-crt-t">gnutls_x509_crt_t</link> cert,
                                                         const <link linkend="gnutls-datum-t">gnutls_datum_t</link> *data,
                                                         <link linkend="gnutls-x509-crt-fmt-t">gnutls_x509_crt_fmt_t</link> format);
<link linkend="int">int</link>                 <link linkend="gnutls-x509-crt-list-import">gnutls_x509_crt_list_import</link>         (<link linkend="gnutls-x509-crt-t">gnutls_x509_crt_t</link> *certs,
                                                         unsigned <link linkend="int">int</link> *cert_max,
                                                         const <link linkend="gnutls-datum-t">gnutls_datum_t</link> *data,
                                                         <link linkend="gnutls-x509-crt-fmt-t">gnutls_x509_crt_fmt_t</link> format,
                                                         unsigned <link linkend="int">int</link> flags);
<link linkend="int">int</link>                 <link linkend="gnutls-x509-crt-export">gnutls_x509_crt_export</link>              (<link linkend="gnutls-x509-crt-t">gnutls_x509_crt_t</link> cert,
                                                         <link linkend="gnutls-x509-crt-fmt-t">gnutls_x509_crt_fmt_t</link> format,
                                                         <link linkend="void">void</link> *output_data,
                                                         <link linkend="size-t">size_t</link> *output_data_size);
<link linkend="int">int</link>                 <link linkend="gnutls-x509-crt-get-issuer-dn">gnutls_x509_crt_get_issuer_dn</link>       (<link linkend="gnutls-x509-crt-t">gnutls_x509_crt_t</link> cert,
                                                         <link linkend="char">char</link> *buf,
                                                         <link linkend="size-t">size_t</link> *sizeof_buf);
<link linkend="int">int</link>                 <link linkend="gnutls-x509-crt-get-issuer-dn-oid">gnutls_x509_crt_get_issuer_dn_oid</link>   (<link linkend="gnutls-x509-crt-t">gnutls_x509_crt_t</link> cert,
                                                         <link linkend="int">int</link> indx,
                                                         <link linkend="void">void</link> *oid,
                                                         <link linkend="size-t">size_t</link> *sizeof_oid);
<link linkend="int">int</link>                 <link linkend="gnutls-x509-crt-get-issuer-dn-by-oid">gnutls_x509_crt_get_issuer_dn_by_oid</link>
                                                        (<link linkend="gnutls-x509-crt-t">gnutls_x509_crt_t</link> cert,
                                                         const <link linkend="char">char</link> *oid,
                                                         <link linkend="int">int</link> indx,
                                                         unsigned <link linkend="int">int</link> raw_flag,
                                                         <link linkend="void">void</link> *buf,
                                                         <link linkend="size-t">size_t</link> *sizeof_buf);
<link linkend="int">int</link>                 <link linkend="gnutls-x509-crt-get-dn">gnutls_x509_crt_get_dn</link>              (<link linkend="gnutls-x509-crt-t">gnutls_x509_crt_t</link> cert,
                                                         <link linkend="char">char</link> *buf,
                                                         <link linkend="size-t">size_t</link> *sizeof_buf);
<link linkend="int">int</link>                 <link linkend="gnutls-x509-crt-get-dn-oid">gnutls_x509_crt_get_dn_oid</link>          (<link linkend="gnutls-x509-crt-t">gnutls_x509_crt_t</link> cert,
                                                         <link linkend="int">int</link> indx,
                                                         <link linkend="void">void</link> *oid,
                                                         <link linkend="size-t">size_t</link> *sizeof_oid);
<link linkend="int">int</link>                 <link linkend="gnutls-x509-crt-get-dn-by-oid">gnutls_x509_crt_get_dn_by_oid</link>       (<link linkend="gnutls-x509-crt-t">gnutls_x509_crt_t</link> cert,
                                                         const <link linkend="char">char</link> *oid,
                                                         <link linkend="int">int</link> indx,
                                                         unsigned <link linkend="int">int</link> raw_flag,
                                                         <link linkend="void">void</link> *buf,
                                                         <link linkend="size-t">size_t</link> *sizeof_buf);
<link linkend="int">int</link>                 <link linkend="gnutls-x509-crt-check-hostname">gnutls_x509_crt_check_hostname</link>      (<link linkend="gnutls-x509-crt-t">gnutls_x509_crt_t</link> cert,
                                                         const <link linkend="char">char</link> *hostname);
<link linkend="int">int</link>                 <link linkend="gnutls-x509-crt-get-signature-algorithm">gnutls_x509_crt_get_signature_algorithm</link>
                                                        (<link linkend="gnutls-x509-crt-t">gnutls_x509_crt_t</link> cert);
<link linkend="int">int</link>                 <link linkend="gnutls-x509-crt-get-signature">gnutls_x509_crt_get_signature</link>       (<link linkend="gnutls-x509-crt-t">gnutls_x509_crt_t</link> cert,
                                                         <link linkend="char">char</link> *sig,
                                                         <link linkend="size-t">size_t</link> *sizeof_sig);
<link linkend="int">int</link>                 <link linkend="gnutls-x509-crt-get-version">gnutls_x509_crt_get_version</link>         (<link linkend="gnutls-x509-crt-t">gnutls_x509_crt_t</link> cert);
<link linkend="int">int</link>                 <link linkend="gnutls-x509-crt-get-key-id">gnutls_x509_crt_get_key_id</link>          (<link linkend="gnutls-x509-crt-t">gnutls_x509_crt_t</link> crt,
                                                         unsigned <link linkend="int">int</link> flags,
                                                         unsigned <link linkend="char">char</link> *output_data,
                                                         <link linkend="size-t">size_t</link> *output_data_size);
<link linkend="int">int</link>                 <link linkend="gnutls-x509-crt-set-authority-key-id">gnutls_x509_crt_set_authority_key_id</link>
                                                        (<link linkend="gnutls-x509-crt-t">gnutls_x509_crt_t</link> cert,
                                                         const <link linkend="void">void</link> *id,
                                                         <link linkend="size-t">size_t</link> id_size);
<link linkend="int">int</link>                 <link linkend="gnutls-x509-crt-get-authority-key-id">gnutls_x509_crt_get_authority_key_id</link>
                                                        (<link linkend="gnutls-x509-crt-t">gnutls_x509_crt_t</link> cert,
                                                         <link linkend="void">void</link> *ret,
                                                         <link linkend="size-t">size_t</link> *ret_size,
                                                         unsigned <link linkend="int">int</link> *critical);
<link linkend="int">int</link>                 <link linkend="gnutls-x509-crt-get-subject-key-id">gnutls_x509_crt_get_subject_key_id</link>  (<link linkend="gnutls-x509-crt-t">gnutls_x509_crt_t</link> cert,
                                                         <link linkend="void">void</link> *ret,
                                                         <link linkend="size-t">size_t</link> *ret_size,
                                                         unsigned <link linkend="int">int</link> *critical);
#define             <link linkend="GNUTLS-CRL-REASON-UNUSED--CAPS">GNUTLS_CRL_REASON_UNUSED</link>
#define             <link linkend="GNUTLS-CRL-REASON-KEY-COMPROMISE--CAPS">GNUTLS_CRL_REASON_KEY_COMPROMISE</link>
#define             <link linkend="GNUTLS-CRL-REASON-CA-COMPROMISE--CAPS">GNUTLS_CRL_REASON_CA_COMPROMISE</link>
#define             <link linkend="GNUTLS-CRL-REASON-AFFILIATION-CHANGED--CAPS">GNUTLS_CRL_REASON_AFFILIATION_CHANGED</link>
#define             <link linkend="GNUTLS-CRL-REASON-SUPERSEEDED--CAPS">GNUTLS_CRL_REASON_SUPERSEEDED</link>
#define             <link linkend="GNUTLS-CRL-REASON-CESSATION-OF-OPERATION--CAPS">GNUTLS_CRL_REASON_CESSATION_OF_OPERATION</link>
#define             <link linkend="GNUTLS-CRL-REASON-CERTIFICATE-HOLD--CAPS">GNUTLS_CRL_REASON_CERTIFICATE_HOLD</link>
#define             <link linkend="GNUTLS-CRL-REASON-PRIVILEGE-WITHDRAWN--CAPS">GNUTLS_CRL_REASON_PRIVILEGE_WITHDRAWN</link>
#define             <link linkend="GNUTLS-CRL-REASON-AA-COMPROMISE--CAPS">GNUTLS_CRL_REASON_AA_COMPROMISE</link>
<link linkend="int">int</link>                 <link linkend="gnutls-x509-crt-get-crl-dist-points">gnutls_x509_crt_get_crl_dist_points</link> (<link linkend="gnutls-x509-crt-t">gnutls_x509_crt_t</link> cert,
                                                         unsigned <link linkend="int">int</link> seq,
                                                         <link linkend="void">void</link> *ret,
                                                         <link linkend="size-t">size_t</link> *ret_size,
                                                         unsigned <link linkend="int">int</link> *reason_flags,
                                                         unsigned <link linkend="int">int</link> *critical);
<link linkend="int">int</link>                 <link linkend="gnutls-x509-crt-set-crl-dist-points2">gnutls_x509_crt_set_crl_dist_points2</link>
                                                        (<link linkend="gnutls-x509-crt-t">gnutls_x509_crt_t</link> crt,
                                                         <link linkend="gnutls-x509-subject-alt-name-t">gnutls_x509_subject_alt_name_t</link> type,
                                                         const <link linkend="void">void</link> *data,
                                                         unsigned <link linkend="int">int</link> data_size,
                                                         unsigned <link linkend="int">int</link> reason_flags);
<link linkend="int">int</link>                 <link linkend="gnutls-x509-crt-set-crl-dist-points">gnutls_x509_crt_set_crl_dist_points</link> (<link linkend="gnutls-x509-crt-t">gnutls_x509_crt_t</link> crt,
                                                         <link linkend="gnutls-x509-subject-alt-name-t">gnutls_x509_subject_alt_name_t</link> type,
                                                         const <link linkend="void">void</link> *data_string,
                                                         unsigned <link linkend="int">int</link> reason_flags);
<link linkend="int">int</link>                 <link linkend="gnutls-x509-crt-cpy-crl-dist-points">gnutls_x509_crt_cpy_crl_dist_points</link> (<link linkend="gnutls-x509-crt-t">gnutls_x509_crt_t</link> dst,
                                                         <link linkend="gnutls-x509-crt-t">gnutls_x509_crt_t</link> src);
<link linkend="time-t">time_t</link>              <link linkend="gnutls-x509-crt-get-activation-time">gnutls_x509_crt_get_activation_time</link> (<link linkend="gnutls-x509-crt-t">gnutls_x509_crt_t</link> cert);
<link linkend="time-t">time_t</link>              <link linkend="gnutls-x509-crt-get-expiration-time">gnutls_x509_crt_get_expiration_time</link> (<link linkend="gnutls-x509-crt-t">gnutls_x509_crt_t</link> cert);
<link linkend="int">int</link>                 <link linkend="gnutls-x509-crt-get-serial">gnutls_x509_crt_get_serial</link>          (<link linkend="gnutls-x509-crt-t">gnutls_x509_crt_t</link> cert,
                                                         <link linkend="void">void</link> *result,
                                                         <link linkend="size-t">size_t</link> *result_size);
<link linkend="int">int</link>                 <link linkend="gnutls-x509-crt-get-pk-algorithm">gnutls_x509_crt_get_pk_algorithm</link>    (<link linkend="gnutls-x509-crt-t">gnutls_x509_crt_t</link> cert,
                                                         unsigned <link linkend="int">int</link> *bits);
<link linkend="int">int</link>                 <link linkend="gnutls-x509-crt-get-pk-rsa-raw">gnutls_x509_crt_get_pk_rsa_raw</link>      (<link linkend="gnutls-x509-crt-t">gnutls_x509_crt_t</link> crt,
                                                         <link linkend="gnutls-datum-t">gnutls_datum_t</link> *m,
                                                         <link linkend="gnutls-datum-t">gnutls_datum_t</link> *e);
<link linkend="int">int</link>                 <link linkend="gnutls-x509-crt-get-pk-dsa-raw">gnutls_x509_crt_get_pk_dsa_raw</link>      (<link linkend="gnutls-x509-crt-t">gnutls_x509_crt_t</link> crt,
                                                         <link linkend="gnutls-datum-t">gnutls_datum_t</link> *p,
                                                         <link linkend="gnutls-datum-t">gnutls_datum_t</link> *q,
                                                         <link linkend="gnutls-datum-t">gnutls_datum_t</link> *g,
                                                         <link linkend="gnutls-datum-t">gnutls_datum_t</link> *y);
<link linkend="int">int</link>                 <link linkend="gnutls-x509-crt-get-subject-alt-name">gnutls_x509_crt_get_subject_alt_name</link>
                                                        (<link linkend="gnutls-x509-crt-t">gnutls_x509_crt_t</link> cert,
                                                         unsigned <link linkend="int">int</link> seq,
                                                         <link linkend="void">void</link> *ret,
                                                         <link linkend="size-t">size_t</link> *ret_size,
                                                         unsigned <link linkend="int">int</link> *critical);
<link linkend="int">int</link>                 <link linkend="gnutls-x509-crt-get-subject-alt-name2">gnutls_x509_crt_get_subject_alt_name2</link>
                                                        (<link linkend="gnutls-x509-crt-t">gnutls_x509_crt_t</link> cert,
                                                         unsigned <link linkend="int">int</link> seq,
                                                         <link linkend="void">void</link> *ret,
                                                         <link linkend="size-t">size_t</link> *ret_size,
                                                         unsigned <link linkend="int">int</link> *ret_type,
                                                         unsigned <link linkend="int">int</link> *critical);
<link linkend="int">int</link>                 <link linkend="gnutls-x509-crt-get-subject-alt-othername-oid">gnutls_x509_crt_get_subject_alt_othername_oid</link>
                                                        (<link linkend="gnutls-x509-crt-t">gnutls_x509_crt_t</link> cert,
                                                         unsigned <link linkend="int">int</link> seq,
                                                         <link linkend="void">void</link> *ret,
                                                         <link linkend="size-t">size_t</link> *ret_size);
<link linkend="int">int</link>                 <link linkend="gnutls-x509-crt-get-ca-status">gnutls_x509_crt_get_ca_status</link>       (<link linkend="gnutls-x509-crt-t">gnutls_x509_crt_t</link> cert,
                                                         unsigned <link linkend="int">int</link> *critical);
<link linkend="int">int</link>                 <link linkend="gnutls-x509-crt-get-basic-constraints">gnutls_x509_crt_get_basic_constraints</link>
                                                        (<link linkend="gnutls-x509-crt-t">gnutls_x509_crt_t</link> cert,
                                                         unsigned <link linkend="int">int</link> *critical,
                                                         <link linkend="int">int</link> *ca,
                                                         <link linkend="int">int</link> *pathlen);
<link linkend="int">int</link>                 <link linkend="gnutls-x509-crt-get-key-usage">gnutls_x509_crt_get_key_usage</link>       (<link linkend="gnutls-x509-crt-t">gnutls_x509_crt_t</link> cert,
                                                         unsigned <link linkend="int">int</link> *key_usage,
                                                         unsigned <link linkend="int">int</link> *critical);
<link linkend="int">int</link>                 <link linkend="gnutls-x509-crt-set-key-usage">gnutls_x509_crt_set_key_usage</link>       (<link linkend="gnutls-x509-crt-t">gnutls_x509_crt_t</link> crt,
                                                         unsigned <link linkend="int">int</link> usage);
<link linkend="int">int</link>                 <link linkend="gnutls-x509-crt-get-proxy">gnutls_x509_crt_get_proxy</link>           (<link linkend="gnutls-x509-crt-t">gnutls_x509_crt_t</link> cert,
                                                         unsigned <link linkend="int">int</link> *critical,
                                                         <link linkend="int">int</link> *pathlen,
                                                         <link linkend="char">char</link> **policyLanguage,
                                                         <link linkend="char">char</link> **policy,
                                                         <link linkend="size-t">size_t</link> *sizeof_policy);
<link linkend="int">int</link>                 <link linkend="gnutls-x509-dn-oid-known">gnutls_x509_dn_oid_known</link>            (const <link linkend="char">char</link> *oid);
<link linkend="int">int</link>                 <link linkend="gnutls-x509-crt-get-extension-oid">gnutls_x509_crt_get_extension_oid</link>   (<link linkend="gnutls-x509-crt-t">gnutls_x509_crt_t</link> cert,
                                                         <link linkend="int">int</link> indx,
                                                         <link linkend="void">void</link> *oid,
                                                         <link linkend="size-t">size_t</link> *sizeof_oid);
<link linkend="int">int</link>                 <link linkend="gnutls-x509-crt-get-extension-by-oid">gnutls_x509_crt_get_extension_by_oid</link>
                                                        (<link linkend="gnutls-x509-crt-t">gnutls_x509_crt_t</link> cert,
                                                         const <link linkend="char">char</link> *oid,
                                                         <link linkend="int">int</link> indx,
                                                         <link linkend="void">void</link> *buf,
                                                         <link linkend="size-t">size_t</link> *sizeof_buf,
                                                         unsigned <link linkend="int">int</link> *critical);
<link linkend="int">int</link>                 <link linkend="gnutls-x509-crt-get-extension-info">gnutls_x509_crt_get_extension_info</link>  (<link linkend="gnutls-x509-crt-t">gnutls_x509_crt_t</link> cert,
                                                         <link linkend="int">int</link> indx,
                                                         <link linkend="void">void</link> *oid,
                                                         <link linkend="size-t">size_t</link> *sizeof_oid,
                                                         <link linkend="int">int</link> *critical);
<link linkend="int">int</link>                 <link linkend="gnutls-x509-crt-get-extension-data">gnutls_x509_crt_get_extension_data</link>  (<link linkend="gnutls-x509-crt-t">gnutls_x509_crt_t</link> cert,
                                                         <link linkend="int">int</link> indx,
                                                         <link linkend="void">void</link> *data,
                                                         <link linkend="size-t">size_t</link> *sizeof_data);
<link linkend="int">int</link>                 <link linkend="gnutls-x509-crt-set-extension-by-oid">gnutls_x509_crt_set_extension_by_oid</link>
                                                        (<link linkend="gnutls-x509-crt-t">gnutls_x509_crt_t</link> crt,
                                                         const <link linkend="char">char</link> *oid,
                                                         const <link linkend="void">void</link> *buf,
                                                         <link linkend="size-t">size_t</link> sizeof_buf,
                                                         unsigned <link linkend="int">int</link> critical);
<link linkend="int">int</link>                 <link linkend="gnutls-x509-crt-set-dn-by-oid">gnutls_x509_crt_set_dn_by_oid</link>       (<link linkend="gnutls-x509-crt-t">gnutls_x509_crt_t</link> crt,
                                                         const <link linkend="char">char</link> *oid,
                                                         unsigned <link linkend="int">int</link> raw_flag,
                                                         const <link linkend="void">void</link> *name,
                                                         unsigned <link linkend="int">int</link> sizeof_name);
<link linkend="int">int</link>                 <link linkend="gnutls-x509-crt-set-issuer-dn-by-oid">gnutls_x509_crt_set_issuer_dn_by_oid</link>
                                                        (<link linkend="gnutls-x509-crt-t">gnutls_x509_crt_t</link> crt,
                                                         const <link linkend="char">char</link> *oid,
                                                         unsigned <link linkend="int">int</link> raw_flag,
                                                         const <link linkend="void">void</link> *name,
                                                         unsigned <link linkend="int">int</link> sizeof_name);
<link linkend="int">int</link>                 <link linkend="gnutls-x509-crt-set-version">gnutls_x509_crt_set_version</link>         (<link linkend="gnutls-x509-crt-t">gnutls_x509_crt_t</link> crt,
                                                         unsigned <link linkend="int">int</link> version);
<link linkend="int">int</link>                 <link linkend="gnutls-x509-crt-set-key">gnutls_x509_crt_set_key</link>             (<link linkend="gnutls-x509-crt-t">gnutls_x509_crt_t</link> crt,
                                                         <link linkend="gnutls-x509-privkey-t">gnutls_x509_privkey_t</link> key);
<link linkend="int">int</link>                 <link linkend="gnutls-x509-crt-set-ca-status">gnutls_x509_crt_set_ca_status</link>       (<link linkend="gnutls-x509-crt-t">gnutls_x509_crt_t</link> crt,
                                                         unsigned <link linkend="int">int</link> ca);
<link linkend="int">int</link>                 <link linkend="gnutls-x509-crt-set-basic-constraints">gnutls_x509_crt_set_basic_constraints</link>
                                                        (<link linkend="gnutls-x509-crt-t">gnutls_x509_crt_t</link> crt,
                                                         unsigned <link linkend="int">int</link> ca,
                                                         <link linkend="int">int</link> pathLenConstraint);
<link linkend="int">int</link>                 <link linkend="gnutls-x509-crt-set-subject-alternative-name">gnutls_x509_crt_set_subject_alternative_name</link>
                                                        (<link linkend="gnutls-x509-crt-t">gnutls_x509_crt_t</link> crt,
                                                         <link linkend="gnutls-x509-subject-alt-name-t">gnutls_x509_subject_alt_name_t</link> type,
                                                         const <link linkend="char">char</link> *data_string);
<link linkend="int">int</link>                 <link linkend="gnutls-x509-crt-set-subject-alt-name">gnutls_x509_crt_set_subject_alt_name</link>
                                                        (<link linkend="gnutls-x509-crt-t">gnutls_x509_crt_t</link> crt,
                                                         <link linkend="gnutls-x509-subject-alt-name-t">gnutls_x509_subject_alt_name_t</link> type,
                                                         const <link linkend="void">void</link> *data,
                                                         unsigned <link linkend="int">int</link> data_size,
                                                         unsigned <link linkend="int">int</link> flags);
<link linkend="int">int</link>                 <link linkend="gnutls-x509-crt-sign">gnutls_x509_crt_sign</link>                (<link linkend="gnutls-x509-crt-t">gnutls_x509_crt_t</link> crt,
                                                         <link linkend="gnutls-x509-crt-t">gnutls_x509_crt_t</link> issuer,
                                                         <link linkend="gnutls-x509-privkey-t">gnutls_x509_privkey_t</link> issuer_key);
<link linkend="int">int</link>                 <link linkend="gnutls-x509-crt-sign2">gnutls_x509_crt_sign2</link>               (<link linkend="gnutls-x509-crt-t">gnutls_x509_crt_t</link> crt,
                                                         <link linkend="gnutls-x509-crt-t">gnutls_x509_crt_t</link> issuer,
                                                         <link linkend="gnutls-x509-privkey-t">gnutls_x509_privkey_t</link> issuer_key,
                                                         <link linkend="gnutls-digest-algorithm-t">gnutls_digest_algorithm_t</link> dig,
                                                         unsigned <link linkend="int">int</link> flags);
<link linkend="int">int</link>                 <link linkend="gnutls-x509-crt-set-activation-time">gnutls_x509_crt_set_activation_time</link> (<link linkend="gnutls-x509-crt-t">gnutls_x509_crt_t</link> cert,
                                                         <link linkend="time-t">time_t</link> act_time);
<link linkend="int">int</link>                 <link linkend="gnutls-x509-crt-set-expiration-time">gnutls_x509_crt_set_expiration_time</link> (<link linkend="gnutls-x509-crt-t">gnutls_x509_crt_t</link> cert,
                                                         <link linkend="time-t">time_t</link> exp_time);
<link linkend="int">int</link>                 <link linkend="gnutls-x509-crt-set-serial">gnutls_x509_crt_set_serial</link>          (<link linkend="gnutls-x509-crt-t">gnutls_x509_crt_t</link> cert,
                                                         const <link linkend="void">void</link> *serial,
                                                         <link linkend="size-t">size_t</link> serial_size);
<link linkend="int">int</link>                 <link linkend="gnutls-x509-crt-set-subject-key-id">gnutls_x509_crt_set_subject_key_id</link>  (<link linkend="gnutls-x509-crt-t">gnutls_x509_crt_t</link> cert,
                                                         const <link linkend="void">void</link> *id,
                                                         <link linkend="size-t">size_t</link> id_size);
<link linkend="int">int</link>                 <link linkend="gnutls-x509-crt-set-proxy-dn">gnutls_x509_crt_set_proxy_dn</link>        (<link linkend="gnutls-x509-crt-t">gnutls_x509_crt_t</link> crt,
                                                         <link linkend="gnutls-x509-crt-t">gnutls_x509_crt_t</link> eecrt,
                                                         unsigned <link linkend="int">int</link> raw_flag,
                                                         const <link linkend="void">void</link> *name,
                                                         unsigned <link linkend="int">int</link> sizeof_name);
<link linkend="int">int</link>                 <link linkend="gnutls-x509-crt-set-proxy">gnutls_x509_crt_set_proxy</link>           (<link linkend="gnutls-x509-crt-t">gnutls_x509_crt_t</link> crt,
                                                         <link linkend="int">int</link> pathLenConstraint,
                                                         const <link linkend="char">char</link> *policyLanguage,
                                                         const <link linkend="char">char</link> *policy,
                                                         <link linkend="size-t">size_t</link> sizeof_policy);
<link linkend="int">int</link>                 <link linkend="gnutls-x509-crt-print">gnutls_x509_crt_print</link>               (<link linkend="gnutls-x509-crt-t">gnutls_x509_crt_t</link> cert,
                                                         <link linkend="gnutls-certificate-print-formats-t">gnutls_certificate_print_formats_t</link> format,
                                                         <link linkend="gnutls-datum-t">gnutls_datum_t</link> *out);
<link linkend="int">int</link>                 <link linkend="gnutls-x509-crl-print">gnutls_x509_crl_print</link>               (<link linkend="gnutls-x509-crl-t">gnutls_x509_crl_t</link> crl,
                                                         <link linkend="gnutls-certificate-print-formats-t">gnutls_certificate_print_formats_t</link> format,
                                                         <link linkend="gnutls-datum-t">gnutls_datum_t</link> *out);
<link linkend="int">int</link>                 <link linkend="gnutls-x509-crt-get-raw-issuer-dn">gnutls_x509_crt_get_raw_issuer_dn</link>   (<link linkend="gnutls-x509-crt-t">gnutls_x509_crt_t</link> cert,
                                                         <link linkend="gnutls-datum-t">gnutls_datum_t</link> *start);
<link linkend="int">int</link>                 <link linkend="gnutls-x509-crt-get-raw-dn">gnutls_x509_crt_get_raw_dn</link>          (<link linkend="gnutls-x509-crt-t">gnutls_x509_crt_t</link> cert,
                                                         <link linkend="gnutls-datum-t">gnutls_datum_t</link> *start);
<link linkend="int">int</link>                 <link linkend="gnutls-x509-rdn-get">gnutls_x509_rdn_get</link>                 (const <link linkend="gnutls-datum-t">gnutls_datum_t</link> *idn,
                                                         <link linkend="char">char</link> *buf,
                                                         <link linkend="size-t">size_t</link> *sizeof_buf);
<link linkend="int">int</link>                 <link linkend="gnutls-x509-rdn-get-oid">gnutls_x509_rdn_get_oid</link>             (const <link linkend="gnutls-datum-t">gnutls_datum_t</link> *idn,
                                                         <link linkend="int">int</link> indx,
                                                         <link linkend="void">void</link> *buf,
                                                         <link linkend="size-t">size_t</link> *sizeof_buf);
<link linkend="int">int</link>                 <link linkend="gnutls-x509-rdn-get-by-oid">gnutls_x509_rdn_get_by_oid</link>          (const <link linkend="gnutls-datum-t">gnutls_datum_t</link> *idn,
                                                         const <link linkend="char">char</link> *oid,
                                                         <link linkend="int">int</link> indx,
                                                         unsigned <link linkend="int">int</link> raw_flag,
                                                         <link linkend="void">void</link> *buf,
                                                         <link linkend="size-t">size_t</link> *sizeof_buf);
typedef             <link linkend="gnutls-x509-dn-t">gnutls_x509_dn_t</link>;
<link linkend="int">int</link>                 <link linkend="gnutls-x509-crt-get-subject">gnutls_x509_crt_get_subject</link>         (<link linkend="gnutls-x509-crt-t">gnutls_x509_crt_t</link> cert,
                                                         <link linkend="gnutls-x509-dn-t">gnutls_x509_dn_t</link> *dn);
<link linkend="int">int</link>                 <link linkend="gnutls-x509-crt-get-issuer">gnutls_x509_crt_get_issuer</link>          (<link linkend="gnutls-x509-crt-t">gnutls_x509_crt_t</link> cert,
                                                         <link linkend="gnutls-x509-dn-t">gnutls_x509_dn_t</link> *dn);
<link linkend="int">int</link>                 <link linkend="gnutls-x509-dn-get-rdn-ava">gnutls_x509_dn_get_rdn_ava</link>          (<link linkend="gnutls-x509-dn-t">gnutls_x509_dn_t</link> dn,
                                                         <link linkend="int">int</link> irdn,
                                                         <link linkend="int">int</link> iava,
                                                         <link linkend="gnutls-x509-ava-st">gnutls_x509_ava_st</link> *ava);
<link linkend="int">int</link>                 <link linkend="gnutls-x509-dn-init">gnutls_x509_dn_init</link>                 (<link linkend="gnutls-x509-dn-t">gnutls_x509_dn_t</link> *dn);
<link linkend="int">int</link>                 <link linkend="gnutls-x509-dn-import">gnutls_x509_dn_import</link>               (<link linkend="gnutls-x509-dn-t">gnutls_x509_dn_t</link> dn,
                                                         const <link linkend="gnutls-datum-t">gnutls_datum_t</link> *data);
<link linkend="int">int</link>                 <link linkend="gnutls-x509-dn-export">gnutls_x509_dn_export</link>               (<link linkend="gnutls-x509-dn-t">gnutls_x509_dn_t</link> dn,
                                                         <link linkend="gnutls-x509-crt-fmt-t">gnutls_x509_crt_fmt_t</link> format,
                                                         <link linkend="void">void</link> *output_data,
                                                         <link linkend="size-t">size_t</link> *output_data_size);
<link linkend="void">void</link>                <link linkend="gnutls-x509-dn-deinit">gnutls_x509_dn_deinit</link>               (<link linkend="gnutls-x509-dn-t">gnutls_x509_dn_t</link> dn);
<link linkend="int">int</link>                 <link linkend="gnutls-x509-crl-init">gnutls_x509_crl_init</link>                (<link linkend="gnutls-x509-crl-t">gnutls_x509_crl_t</link> *crl);
<link linkend="void">void</link>                <link linkend="gnutls-x509-crl-deinit">gnutls_x509_crl_deinit</link>              (<link linkend="gnutls-x509-crl-t">gnutls_x509_crl_t</link> crl);
<link linkend="int">int</link>                 <link linkend="gnutls-x509-crl-import">gnutls_x509_crl_import</link>              (<link linkend="gnutls-x509-crl-t">gnutls_x509_crl_t</link> crl,
                                                         const <link linkend="gnutls-datum-t">gnutls_datum_t</link> *data,
                                                         <link linkend="gnutls-x509-crt-fmt-t">gnutls_x509_crt_fmt_t</link> format);
<link linkend="int">int</link>                 <link linkend="gnutls-x509-crl-export">gnutls_x509_crl_export</link>              (<link linkend="gnutls-x509-crl-t">gnutls_x509_crl_t</link> crl,
                                                         <link linkend="gnutls-x509-crt-fmt-t">gnutls_x509_crt_fmt_t</link> format,
                                                         <link linkend="void">void</link> *output_data,
                                                         <link linkend="size-t">size_t</link> *output_data_size);
<link linkend="int">int</link>                 <link linkend="gnutls-x509-crl-get-issuer-dn">gnutls_x509_crl_get_issuer_dn</link>       (const <link linkend="gnutls-x509-crl-t">gnutls_x509_crl_t</link> crl,
                                                         <link linkend="char">char</link> *buf,
                                                         <link linkend="size-t">size_t</link> *sizeof_buf);
<link linkend="int">int</link>                 <link linkend="gnutls-x509-crl-get-issuer-dn-by-oid">gnutls_x509_crl_get_issuer_dn_by_oid</link>
                                                        (<link linkend="gnutls-x509-crl-t">gnutls_x509_crl_t</link> crl,
                                                         const <link linkend="char">char</link> *oid,
                                                         <link linkend="int">int</link> indx,
                                                         unsigned <link linkend="int">int</link> raw_flag,
                                                         <link linkend="void">void</link> *buf,
                                                         <link linkend="size-t">size_t</link> *sizeof_buf);
<link linkend="int">int</link>                 <link linkend="gnutls-x509-crl-get-dn-oid">gnutls_x509_crl_get_dn_oid</link>          (<link linkend="gnutls-x509-crl-t">gnutls_x509_crl_t</link> crl,
                                                         <link linkend="int">int</link> indx,
                                                         <link linkend="void">void</link> *oid,
                                                         <link linkend="size-t">size_t</link> *sizeof_oid);
<link linkend="int">int</link>                 <link linkend="gnutls-x509-crl-get-signature-algorithm">gnutls_x509_crl_get_signature_algorithm</link>
                                                        (<link linkend="gnutls-x509-crl-t">gnutls_x509_crl_t</link> crl);
<link linkend="int">int</link>                 <link linkend="gnutls-x509-crl-get-signature">gnutls_x509_crl_get_signature</link>       (<link linkend="gnutls-x509-crl-t">gnutls_x509_crl_t</link> crl,
                                                         <link linkend="char">char</link> *sig,
                                                         <link linkend="size-t">size_t</link> *sizeof_sig);
<link linkend="int">int</link>                 <link linkend="gnutls-x509-crl-get-version">gnutls_x509_crl_get_version</link>         (<link linkend="gnutls-x509-crl-t">gnutls_x509_crl_t</link> crl);
<link linkend="time-t">time_t</link>              <link linkend="gnutls-x509-crl-get-this-update">gnutls_x509_crl_get_this_update</link>     (<link linkend="gnutls-x509-crl-t">gnutls_x509_crl_t</link> crl);
<link linkend="time-t">time_t</link>              <link linkend="gnutls-x509-crl-get-next-update">gnutls_x509_crl_get_next_update</link>     (<link linkend="gnutls-x509-crl-t">gnutls_x509_crl_t</link> crl);
<link linkend="int">int</link>                 <link linkend="gnutls-x509-crl-get-crt-count">gnutls_x509_crl_get_crt_count</link>       (<link linkend="gnutls-x509-crl-t">gnutls_x509_crl_t</link> crl);
<link linkend="int">int</link>                 <link linkend="gnutls-x509-crl-get-crt-serial">gnutls_x509_crl_get_crt_serial</link>      (<link linkend="gnutls-x509-crl-t">gnutls_x509_crl_t</link> crl,
                                                         <link linkend="int">int</link> indx,
                                                         unsigned <link linkend="char">char</link> *serial,
                                                         <link linkend="size-t">size_t</link> *serial_size,
                                                         <link linkend="time-t">time_t</link> *t);
#define             <link linkend="gnutls-x509-crl-get-certificate-count">gnutls_x509_crl_get_certificate_count</link>
#define             <link linkend="gnutls-x509-crl-get-certificate">gnutls_x509_crl_get_certificate</link>
<link linkend="int">int</link>                 <link linkend="gnutls-x509-crl-check-issuer">gnutls_x509_crl_check_issuer</link>        (<link linkend="gnutls-x509-crl-t">gnutls_x509_crl_t</link> crl,
                                                         <link linkend="gnutls-x509-crt-t">gnutls_x509_crt_t</link> issuer);
<link linkend="int">int</link>                 <link linkend="gnutls-x509-crl-set-version">gnutls_x509_crl_set_version</link>         (<link linkend="gnutls-x509-crl-t">gnutls_x509_crl_t</link> crl,
                                                         unsigned <link linkend="int">int</link> version);
<link linkend="int">int</link>                 <link linkend="gnutls-x509-crl-sign">gnutls_x509_crl_sign</link>                (<link linkend="gnutls-x509-crl-t">gnutls_x509_crl_t</link> crl,
                                                         <link linkend="gnutls-x509-crt-t">gnutls_x509_crt_t</link> issuer,
                                                         <link linkend="gnutls-x509-privkey-t">gnutls_x509_privkey_t</link> issuer_key);
<link linkend="int">int</link>                 <link linkend="gnutls-x509-crl-sign2">gnutls_x509_crl_sign2</link>               (<link linkend="gnutls-x509-crl-t">gnutls_x509_crl_t</link> crl,
                                                         <link linkend="gnutls-x509-crt-t">gnutls_x509_crt_t</link> issuer,
                                                         <link linkend="gnutls-x509-privkey-t">gnutls_x509_privkey_t</link> issuer_key,
                                                         <link linkend="gnutls-digest-algorithm-t">gnutls_digest_algorithm_t</link> dig,
                                                         unsigned <link linkend="int">int</link> flags);
<link linkend="int">int</link>                 <link linkend="gnutls-x509-crl-set-this-update">gnutls_x509_crl_set_this_update</link>     (<link linkend="gnutls-x509-crl-t">gnutls_x509_crl_t</link> crl,
                                                         <link linkend="time-t">time_t</link> act_time);
<link linkend="int">int</link>                 <link linkend="gnutls-x509-crl-set-next-update">gnutls_x509_crl_set_next_update</link>     (<link linkend="gnutls-x509-crl-t">gnutls_x509_crl_t</link> crl,
                                                         <link linkend="time-t">time_t</link> exp_time);
<link linkend="int">int</link>                 <link linkend="gnutls-x509-crl-set-crt-serial">gnutls_x509_crl_set_crt_serial</link>      (<link linkend="gnutls-x509-crl-t">gnutls_x509_crl_t</link> crl,
                                                         const <link linkend="void">void</link> *serial,
                                                         <link linkend="size-t">size_t</link> serial_size,
                                                         <link linkend="time-t">time_t</link> revocation_time);
<link linkend="int">int</link>                 <link linkend="gnutls-x509-crl-set-crt">gnutls_x509_crl_set_crt</link>             (<link linkend="gnutls-x509-crl-t">gnutls_x509_crl_t</link> crl,
                                                         <link linkend="gnutls-x509-crt-t">gnutls_x509_crt_t</link> crt,
                                                         <link linkend="time-t">time_t</link> revocation_time);
<link linkend="int">int</link>                 <link linkend="gnutls-x509-crl-get-authority-key-id">gnutls_x509_crl_get_authority_key_id</link>
                                                        (<link linkend="gnutls-x509-crl-t">gnutls_x509_crl_t</link> crl,
                                                         <link linkend="void">void</link> *ret,
                                                         <link linkend="size-t">size_t</link> *ret_size,
                                                         unsigned <link linkend="int">int</link> *critical);
<link linkend="int">int</link>                 <link linkend="gnutls-x509-crl-get-number">gnutls_x509_crl_get_number</link>          (<link linkend="gnutls-x509-crl-t">gnutls_x509_crl_t</link> crl,
                                                         <link linkend="void">void</link> *ret,
                                                         <link linkend="size-t">size_t</link> *ret_size,
                                                         unsigned <link linkend="int">int</link> *critical);
<link linkend="int">int</link>                 <link linkend="gnutls-x509-crl-get-extension-oid">gnutls_x509_crl_get_extension_oid</link>   (<link linkend="gnutls-x509-crl-t">gnutls_x509_crl_t</link> crl,
                                                         <link linkend="int">int</link> indx,
                                                         <link linkend="void">void</link> *oid,
                                                         <link linkend="size-t">size_t</link> *sizeof_oid);
<link linkend="int">int</link>                 <link linkend="gnutls-x509-crl-get-extension-info">gnutls_x509_crl_get_extension_info</link>  (<link linkend="gnutls-x509-crl-t">gnutls_x509_crl_t</link> crl,
                                                         <link linkend="int">int</link> indx,
                                                         <link linkend="void">void</link> *oid,
                                                         <link linkend="size-t">size_t</link> *sizeof_oid,
                                                         <link linkend="int">int</link> *critical);
<link linkend="int">int</link>                 <link linkend="gnutls-x509-crl-get-extension-data">gnutls_x509_crl_get_extension_data</link>  (<link linkend="gnutls-x509-crl-t">gnutls_x509_crl_t</link> crl,
                                                         <link linkend="int">int</link> indx,
                                                         <link linkend="void">void</link> *data,
                                                         <link linkend="size-t">size_t</link> *sizeof_data);
<link linkend="int">int</link>                 <link linkend="gnutls-x509-crl-set-authority-key-id">gnutls_x509_crl_set_authority_key_id</link>
                                                        (<link linkend="gnutls-x509-crl-t">gnutls_x509_crl_t</link> crl,
                                                         const <link linkend="void">void</link> *id,
                                                         <link linkend="size-t">size_t</link> id_size);
<link linkend="int">int</link>                 <link linkend="gnutls-x509-crl-set-number">gnutls_x509_crl_set_number</link>          (<link linkend="gnutls-x509-crl-t">gnutls_x509_crl_t</link> crl,
                                                         const <link linkend="void">void</link> *nr,
                                                         <link linkend="size-t">size_t</link> nr_size);
struct              <link linkend="gnutls-pkcs7-int">gnutls_pkcs7_int</link>;
typedef             <link linkend="gnutls-pkcs7-t">gnutls_pkcs7_t</link>;
<link linkend="int">int</link>                 <link linkend="gnutls-pkcs7-init">gnutls_pkcs7_init</link>                   (<link linkend="gnutls-pkcs7-t">gnutls_pkcs7_t</link> *pkcs7);
<link linkend="void">void</link>                <link linkend="gnutls-pkcs7-deinit">gnutls_pkcs7_deinit</link>                 (<link linkend="gnutls-pkcs7-t">gnutls_pkcs7_t</link> pkcs7);
<link linkend="int">int</link>                 <link linkend="gnutls-pkcs7-import">gnutls_pkcs7_import</link>                 (<link linkend="gnutls-pkcs7-t">gnutls_pkcs7_t</link> pkcs7,
                                                         const <link linkend="gnutls-datum-t">gnutls_datum_t</link> *data,
                                                         <link linkend="gnutls-x509-crt-fmt-t">gnutls_x509_crt_fmt_t</link> format);
<link linkend="int">int</link>                 <link linkend="gnutls-pkcs7-export">gnutls_pkcs7_export</link>                 (<link linkend="gnutls-pkcs7-t">gnutls_pkcs7_t</link> pkcs7,
                                                         <link linkend="gnutls-x509-crt-fmt-t">gnutls_x509_crt_fmt_t</link> format,
                                                         <link linkend="void">void</link> *output_data,
                                                         <link linkend="size-t">size_t</link> *output_data_size);
<link linkend="int">int</link>                 <link linkend="gnutls-pkcs7-get-crt-count">gnutls_pkcs7_get_crt_count</link>          (<link linkend="gnutls-pkcs7-t">gnutls_pkcs7_t</link> pkcs7);
<link linkend="int">int</link>                 <link linkend="gnutls-pkcs7-get-crt-raw">gnutls_pkcs7_get_crt_raw</link>            (<link linkend="gnutls-pkcs7-t">gnutls_pkcs7_t</link> pkcs7,
                                                         <link linkend="int">int</link> indx,
                                                         <link linkend="void">void</link> *certificate,
                                                         <link linkend="size-t">size_t</link> *certificate_size);
<link linkend="int">int</link>                 <link linkend="gnutls-pkcs7-set-crt-raw">gnutls_pkcs7_set_crt_raw</link>            (<link linkend="gnutls-pkcs7-t">gnutls_pkcs7_t</link> pkcs7,
                                                         const <link linkend="gnutls-datum-t">gnutls_datum_t</link> *crt);
<link linkend="int">int</link>                 <link linkend="gnutls-pkcs7-set-crt">gnutls_pkcs7_set_crt</link>                (<link linkend="gnutls-pkcs7-t">gnutls_pkcs7_t</link> pkcs7,
                                                         <link linkend="gnutls-x509-crt-t">gnutls_x509_crt_t</link> crt);
<link linkend="int">int</link>                 <link linkend="gnutls-pkcs7-delete-crt">gnutls_pkcs7_delete_crt</link>             (<link linkend="gnutls-pkcs7-t">gnutls_pkcs7_t</link> pkcs7,
                                                         <link linkend="int">int</link> indx);
<link linkend="int">int</link>                 <link linkend="gnutls-pkcs7-get-crl-raw">gnutls_pkcs7_get_crl_raw</link>            (<link linkend="gnutls-pkcs7-t">gnutls_pkcs7_t</link> pkcs7,
                                                         <link linkend="int">int</link> indx,
                                                         <link linkend="void">void</link> *crl,
                                                         <link linkend="size-t">size_t</link> *crl_size);
<link linkend="int">int</link>                 <link linkend="gnutls-pkcs7-get-crl-count">gnutls_pkcs7_get_crl_count</link>          (<link linkend="gnutls-pkcs7-t">gnutls_pkcs7_t</link> pkcs7);
<link linkend="int">int</link>                 <link linkend="gnutls-pkcs7-set-crl-raw">gnutls_pkcs7_set_crl_raw</link>            (<link linkend="gnutls-pkcs7-t">gnutls_pkcs7_t</link> pkcs7,
                                                         const <link linkend="gnutls-datum-t">gnutls_datum_t</link> *crl);
<link linkend="int">int</link>                 <link linkend="gnutls-pkcs7-set-crl">gnutls_pkcs7_set_crl</link>                (<link linkend="gnutls-pkcs7-t">gnutls_pkcs7_t</link> pkcs7,
                                                         <link linkend="gnutls-x509-crl-t">gnutls_x509_crl_t</link> crl);
<link linkend="int">int</link>                 <link linkend="gnutls-pkcs7-delete-crl">gnutls_pkcs7_delete_crl</link>             (<link linkend="gnutls-pkcs7-t">gnutls_pkcs7_t</link> pkcs7,
                                                         <link linkend="int">int</link> indx);
enum                <link linkend="gnutls-certificate-verify-flags">gnutls_certificate_verify_flags</link>;
<link linkend="int">int</link>                 <link linkend="gnutls-x509-crt-check-issuer">gnutls_x509_crt_check_issuer</link>        (<link linkend="gnutls-x509-crt-t">gnutls_x509_crt_t</link> cert,
                                                         <link linkend="gnutls-x509-crt-t">gnutls_x509_crt_t</link> issuer);
<link linkend="int">int</link>                 <link linkend="gnutls-x509-crt-list-verify">gnutls_x509_crt_list_verify</link>         (const <link linkend="gnutls-x509-crt-t">gnutls_x509_crt_t</link> *cert_list,
                                                         <link linkend="int">int</link> cert_list_length,
                                                         const <link linkend="gnutls-x509-crt-t">gnutls_x509_crt_t</link> *CA_list,
                                                         <link linkend="int">int</link> CA_list_length,
                                                         const <link linkend="gnutls-x509-crl-t">gnutls_x509_crl_t</link> *CRL_list,
                                                         <link linkend="int">int</link> CRL_list_length,
                                                         unsigned <link linkend="int">int</link> flags,
                                                         unsigned <link linkend="int">int</link> *verify);
<link linkend="int">int</link>                 <link linkend="gnutls-x509-crt-verify">gnutls_x509_crt_verify</link>              (<link linkend="gnutls-x509-crt-t">gnutls_x509_crt_t</link> cert,
                                                         const <link linkend="gnutls-x509-crt-t">gnutls_x509_crt_t</link> *CA_list,
                                                         <link linkend="int">int</link> CA_list_length,
                                                         unsigned <link linkend="int">int</link> flags,
                                                         unsigned <link linkend="int">int</link> *verify);
<link linkend="int">int</link>                 <link linkend="gnutls-x509-crl-verify">gnutls_x509_crl_verify</link>              (<link linkend="gnutls-x509-crl-t">gnutls_x509_crl_t</link> crl,
                                                         const <link linkend="gnutls-x509-crt-t">gnutls_x509_crt_t</link> *CA_list,
                                                         <link linkend="int">int</link> CA_list_length,
                                                         unsigned <link linkend="int">int</link> flags,
                                                         unsigned <link linkend="int">int</link> *verify);
<link linkend="int">int</link>                 <link linkend="gnutls-x509-crt-check-revocation">gnutls_x509_crt_check_revocation</link>    (<link linkend="gnutls-x509-crt-t">gnutls_x509_crt_t</link> cert,
                                                         const <link linkend="gnutls-x509-crl-t">gnutls_x509_crl_t</link> *crl_list,
                                                         <link linkend="int">int</link> crl_list_length);
<link linkend="int">int</link>                 <link linkend="gnutls-x509-crt-get-fingerprint">gnutls_x509_crt_get_fingerprint</link>     (<link linkend="gnutls-x509-crt-t">gnutls_x509_crt_t</link> cert,
                                                         <link linkend="gnutls-digest-algorithm-t">gnutls_digest_algorithm_t</link> algo,
                                                         <link linkend="void">void</link> *buf,
                                                         <link linkend="size-t">size_t</link> *sizeof_buf);
<link linkend="int">int</link>                 <link linkend="gnutls-x509-crt-get-key-purpose-oid">gnutls_x509_crt_get_key_purpose_oid</link> (<link linkend="gnutls-x509-crt-t">gnutls_x509_crt_t</link> cert,
                                                         <link linkend="int">int</link> indx,
                                                         <link linkend="void">void</link> *oid,
                                                         <link linkend="size-t">size_t</link> *sizeof_oid,
                                                         unsigned <link linkend="int">int</link> *critical);
<link linkend="int">int</link>                 <link linkend="gnutls-x509-crt-set-key-purpose-oid">gnutls_x509_crt_set_key_purpose_oid</link> (<link linkend="gnutls-x509-crt-t">gnutls_x509_crt_t</link> cert,
                                                         const <link linkend="void">void</link> *oid,
                                                         unsigned <link linkend="int">int</link> critical);
enum                <link linkend="gnutls-pkcs-encrypt-flags-t">gnutls_pkcs_encrypt_flags_t</link>;
#define             <link linkend="GNUTLS-PKCS8-PLAIN--CAPS">GNUTLS_PKCS8_PLAIN</link>
#define             <link linkend="GNUTLS-PKCS8-USE-PKCS12-3DES--CAPS">GNUTLS_PKCS8_USE_PKCS12_3DES</link>
#define             <link linkend="GNUTLS-PKCS8-USE-PKCS12-ARCFOUR--CAPS">GNUTLS_PKCS8_USE_PKCS12_ARCFOUR</link>
#define             <link linkend="GNUTLS-PKCS8-USE-PKCS12-RC2-40--CAPS">GNUTLS_PKCS8_USE_PKCS12_RC2_40</link>
<link linkend="int">int</link>                 <link linkend="gnutls-x509-privkey-init">gnutls_x509_privkey_init</link>            (<link linkend="gnutls-x509-privkey-t">gnutls_x509_privkey_t</link> *key);
<link linkend="void">void</link>                <link linkend="gnutls-x509-privkey-deinit">gnutls_x509_privkey_deinit</link>          (<link linkend="gnutls-x509-privkey-t">gnutls_x509_privkey_t</link> key);
<link linkend="int">int</link>                 <link linkend="gnutls-x509-privkey-cpy">gnutls_x509_privkey_cpy</link>             (<link linkend="gnutls-x509-privkey-t">gnutls_x509_privkey_t</link> dst,
                                                         <link linkend="gnutls-x509-privkey-t">gnutls_x509_privkey_t</link> src);
<link linkend="int">int</link>                 <link linkend="gnutls-x509-privkey-import">gnutls_x509_privkey_import</link>          (<link linkend="gnutls-x509-privkey-t">gnutls_x509_privkey_t</link> key,
                                                         const <link linkend="gnutls-datum-t">gnutls_datum_t</link> *data,
                                                         <link linkend="gnutls-x509-crt-fmt-t">gnutls_x509_crt_fmt_t</link> format);
<link linkend="int">int</link>                 <link linkend="gnutls-x509-privkey-import-pkcs8">gnutls_x509_privkey_import_pkcs8</link>    (<link linkend="gnutls-x509-privkey-t">gnutls_x509_privkey_t</link> key,
                                                         const <link linkend="gnutls-datum-t">gnutls_datum_t</link> *data,
                                                         <link linkend="gnutls-x509-crt-fmt-t">gnutls_x509_crt_fmt_t</link> format,
                                                         const <link linkend="char">char</link> *password,
                                                         unsigned <link linkend="int">int</link> flags);
<link linkend="int">int</link>                 <link linkend="gnutls-x509-privkey-import-rsa-raw">gnutls_x509_privkey_import_rsa_raw</link>  (<link linkend="gnutls-x509-privkey-t">gnutls_x509_privkey_t</link> key,
                                                         const <link linkend="gnutls-datum-t">gnutls_datum_t</link> *m,
                                                         const <link linkend="gnutls-datum-t">gnutls_datum_t</link> *e,
                                                         const <link linkend="gnutls-datum-t">gnutls_datum_t</link> *d,
                                                         const <link linkend="gnutls-datum-t">gnutls_datum_t</link> *p,
                                                         const <link linkend="gnutls-datum-t">gnutls_datum_t</link> *q,
                                                         const <link linkend="gnutls-datum-t">gnutls_datum_t</link> *u);
<link linkend="int">int</link>                 <link linkend="gnutls-x509-privkey-fix">gnutls_x509_privkey_fix</link>             (<link linkend="gnutls-x509-privkey-t">gnutls_x509_privkey_t</link> key);
<link linkend="int">int</link>                 <link linkend="gnutls-x509-privkey-export-dsa-raw">gnutls_x509_privkey_export_dsa_raw</link>  (<link linkend="gnutls-x509-privkey-t">gnutls_x509_privkey_t</link> key,
                                                         <link linkend="gnutls-datum-t">gnutls_datum_t</link> *p,
                                                         <link linkend="gnutls-datum-t">gnutls_datum_t</link> *q,
                                                         <link linkend="gnutls-datum-t">gnutls_datum_t</link> *g,
                                                         <link linkend="gnutls-datum-t">gnutls_datum_t</link> *y,
                                                         <link linkend="gnutls-datum-t">gnutls_datum_t</link> *x);
<link linkend="int">int</link>                 <link linkend="gnutls-x509-privkey-import-dsa-raw">gnutls_x509_privkey_import_dsa_raw</link>  (<link linkend="gnutls-x509-privkey-t">gnutls_x509_privkey_t</link> key,
                                                         const <link linkend="gnutls-datum-t">gnutls_datum_t</link> *p,
                                                         const <link linkend="gnutls-datum-t">gnutls_datum_t</link> *q,
                                                         const <link linkend="gnutls-datum-t">gnutls_datum_t</link> *g,
                                                         const <link linkend="gnutls-datum-t">gnutls_datum_t</link> *y,
                                                         const <link linkend="gnutls-datum-t">gnutls_datum_t</link> *x);
<link linkend="int">int</link>                 <link linkend="gnutls-x509-privkey-get-pk-algorithm">gnutls_x509_privkey_get_pk_algorithm</link>
                                                        (<link linkend="gnutls-x509-privkey-t">gnutls_x509_privkey_t</link> key);
<link linkend="int">int</link>                 <link linkend="gnutls-x509-privkey-get-key-id">gnutls_x509_privkey_get_key_id</link>      (<link linkend="gnutls-x509-privkey-t">gnutls_x509_privkey_t</link> key,
                                                         unsigned <link linkend="int">int</link> flags,
                                                         unsigned <link linkend="char">char</link> *output_data,
                                                         <link linkend="size-t">size_t</link> *output_data_size);
<link linkend="int">int</link>                 <link linkend="gnutls-x509-privkey-generate">gnutls_x509_privkey_generate</link>        (<link linkend="gnutls-x509-privkey-t">gnutls_x509_privkey_t</link> key,
                                                         <link linkend="gnutls-pk-algorithm-t">gnutls_pk_algorithm_t</link> algo,
                                                         unsigned <link linkend="int">int</link> bits,
                                                         unsigned <link linkend="int">int</link> flags);
<link linkend="int">int</link>                 <link linkend="gnutls-x509-privkey-export">gnutls_x509_privkey_export</link>          (<link linkend="gnutls-x509-privkey-t">gnutls_x509_privkey_t</link> key,
                                                         <link linkend="gnutls-x509-crt-fmt-t">gnutls_x509_crt_fmt_t</link> format,
                                                         <link linkend="void">void</link> *output_data,
                                                         <link linkend="size-t">size_t</link> *output_data_size);
<link linkend="int">int</link>                 <link linkend="gnutls-x509-privkey-export-pkcs8">gnutls_x509_privkey_export_pkcs8</link>    (<link linkend="gnutls-x509-privkey-t">gnutls_x509_privkey_t</link> key,
                                                         <link linkend="gnutls-x509-crt-fmt-t">gnutls_x509_crt_fmt_t</link> format,
                                                         const <link linkend="char">char</link> *password,
                                                         unsigned <link linkend="int">int</link> flags,
                                                         <link linkend="void">void</link> *output_data,
                                                         <link linkend="size-t">size_t</link> *output_data_size);
<link linkend="int">int</link>                 <link linkend="gnutls-x509-privkey-export-rsa-raw">gnutls_x509_privkey_export_rsa_raw</link>  (<link linkend="gnutls-x509-privkey-t">gnutls_x509_privkey_t</link> key,
                                                         <link linkend="gnutls-datum-t">gnutls_datum_t</link> *m,
                                                         <link linkend="gnutls-datum-t">gnutls_datum_t</link> *e,
                                                         <link linkend="gnutls-datum-t">gnutls_datum_t</link> *d,
                                                         <link linkend="gnutls-datum-t">gnutls_datum_t</link> *p,
                                                         <link linkend="gnutls-datum-t">gnutls_datum_t</link> *q,
                                                         <link linkend="gnutls-datum-t">gnutls_datum_t</link> *u);
<link linkend="int">int</link>                 <link linkend="gnutls-x509-privkey-sign-data">gnutls_x509_privkey_sign_data</link>       (<link linkend="gnutls-x509-privkey-t">gnutls_x509_privkey_t</link> key,
                                                         <link linkend="gnutls-digest-algorithm-t">gnutls_digest_algorithm_t</link> digest,
                                                         unsigned <link linkend="int">int</link> flags,
                                                         const <link linkend="gnutls-datum-t">gnutls_datum_t</link> *data,
                                                         <link linkend="void">void</link> *signature,
                                                         <link linkend="size-t">size_t</link> *signature_size);
<link linkend="int">int</link>                 <link linkend="gnutls-x509-privkey-verify-data">gnutls_x509_privkey_verify_data</link>     (<link linkend="gnutls-x509-privkey-t">gnutls_x509_privkey_t</link> key,
                                                         unsigned <link linkend="int">int</link> flags,
                                                         const <link linkend="gnutls-datum-t">gnutls_datum_t</link> *data,
                                                         const <link linkend="gnutls-datum-t">gnutls_datum_t</link> *signature);
<link linkend="int">int</link>                 <link linkend="gnutls-x509-crt-verify-data">gnutls_x509_crt_verify_data</link>         (<link linkend="gnutls-x509-crt-t">gnutls_x509_crt_t</link> crt,
                                                         unsigned <link linkend="int">int</link> flags,
                                                         const <link linkend="gnutls-datum-t">gnutls_datum_t</link> *data,
                                                         const <link linkend="gnutls-datum-t">gnutls_datum_t</link> *signature);
<link linkend="int">int</link>                 <link linkend="gnutls-x509-crt-verify-hash">gnutls_x509_crt_verify_hash</link>         (<link linkend="gnutls-x509-crt-t">gnutls_x509_crt_t</link> crt,
                                                         unsigned <link linkend="int">int</link> flags,
                                                         const <link linkend="gnutls-datum-t">gnutls_datum_t</link> *hash,
                                                         const <link linkend="gnutls-datum-t">gnutls_datum_t</link> *signature);
<link linkend="int">int</link>                 <link linkend="gnutls-x509-crt-get-verify-algorithm">gnutls_x509_crt_get_verify_algorithm</link>
                                                        (<link linkend="gnutls-x509-crt-t">gnutls_x509_crt_t</link> crt,
                                                         const <link linkend="gnutls-datum-t">gnutls_datum_t</link> *signature,
                                                         <link linkend="gnutls-digest-algorithm-t">gnutls_digest_algorithm_t</link> *hash);
<link linkend="int">int</link>                 <link linkend="gnutls-x509-privkey-sign-hash">gnutls_x509_privkey_sign_hash</link>       (<link linkend="gnutls-x509-privkey-t">gnutls_x509_privkey_t</link> key,
                                                         const <link linkend="gnutls-datum-t">gnutls_datum_t</link> *hash,
                                                         <link linkend="gnutls-datum-t">gnutls_datum_t</link> *signature);
struct              <link linkend="gnutls-x509-crq-int">gnutls_x509_crq_int</link>;
typedef             <link linkend="gnutls-x509-crq-t">gnutls_x509_crq_t</link>;
<link linkend="int">int</link>                 <link linkend="gnutls-x509-crq-print">gnutls_x509_crq_print</link>               (<link linkend="gnutls-x509-crq-t">gnutls_x509_crq_t</link> crq,
                                                         <link linkend="gnutls-certificate-print-formats-t">gnutls_certificate_print_formats_t</link> format,
                                                         <link linkend="gnutls-datum-t">gnutls_datum_t</link> *out);
<link linkend="int">int</link>                 <link linkend="gnutls-x509-crq-init">gnutls_x509_crq_init</link>                (<link linkend="gnutls-x509-crq-t">gnutls_x509_crq_t</link> *crq);
<link linkend="void">void</link>                <link linkend="gnutls-x509-crq-deinit">gnutls_x509_crq_deinit</link>              (<link linkend="gnutls-x509-crq-t">gnutls_x509_crq_t</link> crq);
<link linkend="int">int</link>                 <link linkend="gnutls-x509-crq-import">gnutls_x509_crq_import</link>              (<link linkend="gnutls-x509-crq-t">gnutls_x509_crq_t</link> crq,
                                                         const <link linkend="gnutls-datum-t">gnutls_datum_t</link> *data,
                                                         <link linkend="gnutls-x509-crt-fmt-t">gnutls_x509_crt_fmt_t</link> format);
<link linkend="int">int</link>                 <link linkend="gnutls-x509-crq-get-dn">gnutls_x509_crq_get_dn</link>              (<link linkend="gnutls-x509-crq-t">gnutls_x509_crq_t</link> crq,
                                                         <link linkend="char">char</link> *buf,
                                                         <link linkend="size-t">size_t</link> *sizeof_buf);
<link linkend="int">int</link>                 <link linkend="gnutls-x509-crq-get-dn-oid">gnutls_x509_crq_get_dn_oid</link>          (<link linkend="gnutls-x509-crq-t">gnutls_x509_crq_t</link> crq,
                                                         <link linkend="int">int</link> indx,
                                                         <link linkend="void">void</link> *oid,
                                                         <link linkend="size-t">size_t</link> *sizeof_oid);
<link linkend="int">int</link>                 <link linkend="gnutls-x509-crq-get-dn-by-oid">gnutls_x509_crq_get_dn_by_oid</link>       (<link linkend="gnutls-x509-crq-t">gnutls_x509_crq_t</link> crq,
                                                         const <link linkend="char">char</link> *oid,
                                                         <link linkend="int">int</link> indx,
                                                         unsigned <link linkend="int">int</link> raw_flag,
                                                         <link linkend="void">void</link> *buf,
                                                         <link linkend="size-t">size_t</link> *sizeof_buf);
<link linkend="int">int</link>                 <link linkend="gnutls-x509-crq-set-dn-by-oid">gnutls_x509_crq_set_dn_by_oid</link>       (<link linkend="gnutls-x509-crq-t">gnutls_x509_crq_t</link> crq,
                                                         const <link linkend="char">char</link> *oid,
                                                         unsigned <link linkend="int">int</link> raw_flag,
                                                         const <link linkend="void">void</link> *data,
                                                         unsigned <link linkend="int">int</link> sizeof_data);
<link linkend="int">int</link>                 <link linkend="gnutls-x509-crq-set-version">gnutls_x509_crq_set_version</link>         (<link linkend="gnutls-x509-crq-t">gnutls_x509_crq_t</link> crq,
                                                         unsigned <link linkend="int">int</link> version);
<link linkend="int">int</link>                 <link linkend="gnutls-x509-crq-get-version">gnutls_x509_crq_get_version</link>         (<link linkend="gnutls-x509-crq-t">gnutls_x509_crq_t</link> crq);
<link linkend="int">int</link>                 <link linkend="gnutls-x509-crq-set-key">gnutls_x509_crq_set_key</link>             (<link linkend="gnutls-x509-crq-t">gnutls_x509_crq_t</link> crq,
                                                         <link linkend="gnutls-x509-privkey-t">gnutls_x509_privkey_t</link> key);
<link linkend="int">int</link>                 <link linkend="gnutls-x509-crq-sign2">gnutls_x509_crq_sign2</link>               (<link linkend="gnutls-x509-crq-t">gnutls_x509_crq_t</link> crq,
                                                         <link linkend="gnutls-x509-privkey-t">gnutls_x509_privkey_t</link> key,
                                                         <link linkend="gnutls-digest-algorithm-t">gnutls_digest_algorithm_t</link> dig,
                                                         unsigned <link linkend="int">int</link> flags);
<link linkend="int">int</link>                 <link linkend="gnutls-x509-crq-sign">gnutls_x509_crq_sign</link>                (<link linkend="gnutls-x509-crq-t">gnutls_x509_crq_t</link> crq,
                                                         <link linkend="gnutls-x509-privkey-t">gnutls_x509_privkey_t</link> key);
<link linkend="int">int</link>                 <link linkend="gnutls-x509-crq-set-challenge-password">gnutls_x509_crq_set_challenge_password</link>
                                                        (<link linkend="gnutls-x509-crq-t">gnutls_x509_crq_t</link> crq,
                                                         const <link linkend="char">char</link> *pass);
<link linkend="int">int</link>                 <link linkend="gnutls-x509-crq-get-challenge-password">gnutls_x509_crq_get_challenge_password</link>
                                                        (<link linkend="gnutls-x509-crq-t">gnutls_x509_crq_t</link> crq,
                                                         <link linkend="char">char</link> *pass,
                                                         <link linkend="size-t">size_t</link> *sizeof_pass);
<link linkend="int">int</link>                 <link linkend="gnutls-x509-crq-set-attribute-by-oid">gnutls_x509_crq_set_attribute_by_oid</link>
                                                        (<link linkend="gnutls-x509-crq-t">gnutls_x509_crq_t</link> crq,
                                                         const <link linkend="char">char</link> *oid,
                                                         <link linkend="void">void</link> *buf,
                                                         <link linkend="size-t">size_t</link> sizeof_buf);
<link linkend="int">int</link>                 <link linkend="gnutls-x509-crq-get-attribute-by-oid">gnutls_x509_crq_get_attribute_by_oid</link>
                                                        (<link linkend="gnutls-x509-crq-t">gnutls_x509_crq_t</link> crq,
                                                         const <link linkend="char">char</link> *oid,
                                                         <link linkend="int">int</link> indx,
                                                         <link linkend="void">void</link> *buf,
                                                         <link linkend="size-t">size_t</link> *sizeof_buf);
<link linkend="int">int</link>                 <link linkend="gnutls-x509-crq-export">gnutls_x509_crq_export</link>              (<link linkend="gnutls-x509-crq-t">gnutls_x509_crq_t</link> crq,
                                                         <link linkend="gnutls-x509-crt-fmt-t">gnutls_x509_crt_fmt_t</link> format,
                                                         <link linkend="void">void</link> *output_data,
                                                         <link linkend="size-t">size_t</link> *output_data_size);
<link linkend="int">int</link>                 <link linkend="gnutls-x509-crt-set-crq">gnutls_x509_crt_set_crq</link>             (<link linkend="gnutls-x509-crt-t">gnutls_x509_crt_t</link> crt,
                                                         <link linkend="gnutls-x509-crq-t">gnutls_x509_crq_t</link> crq);
<link linkend="int">int</link>                 <link linkend="gnutls-x509-crt-set-crq-extensions">gnutls_x509_crt_set_crq_extensions</link>  (<link linkend="gnutls-x509-crt-t">gnutls_x509_crt_t</link> crt,
                                                         <link linkend="gnutls-x509-crq-t">gnutls_x509_crq_t</link> crq);
<link linkend="int">int</link>                 <link linkend="gnutls-x509-crq-set-key-rsa-raw">gnutls_x509_crq_set_key_rsa_raw</link>     (<link linkend="gnutls-x509-crq-t">gnutls_x509_crq_t</link> crq,
                                                         const <link linkend="gnutls-datum-t">gnutls_datum_t</link> *m,
                                                         const <link linkend="gnutls-datum-t">gnutls_datum_t</link> *e);
<link linkend="int">int</link>                 <link linkend="gnutls-x509-crq-set-subject-alt-name">gnutls_x509_crq_set_subject_alt_name</link>
                                                        (<link linkend="gnutls-x509-crq-t">gnutls_x509_crq_t</link> crq,
                                                         <link linkend="gnutls-x509-subject-alt-name-t">gnutls_x509_subject_alt_name_t</link> nt,
                                                         const <link linkend="void">void</link> *data,
                                                         unsigned <link linkend="int">int</link> data_size,
                                                         unsigned <link linkend="int">int</link> flags);
<link linkend="int">int</link>                 <link linkend="gnutls-x509-crq-set-key-usage">gnutls_x509_crq_set_key_usage</link>       (<link linkend="gnutls-x509-crq-t">gnutls_x509_crq_t</link> crq,
                                                         unsigned <link linkend="int">int</link> usage);
<link linkend="int">int</link>                 <link linkend="gnutls-x509-crq-set-basic-constraints">gnutls_x509_crq_set_basic_constraints</link>
                                                        (<link linkend="gnutls-x509-crq-t">gnutls_x509_crq_t</link> crq,
                                                         unsigned <link linkend="int">int</link> ca,
                                                         <link linkend="int">int</link> pathLenConstraint);
<link linkend="int">int</link>                 <link linkend="gnutls-x509-crq-set-key-purpose-oid">gnutls_x509_crq_set_key_purpose_oid</link> (<link linkend="gnutls-x509-crq-t">gnutls_x509_crq_t</link> cert,
                                                         const <link linkend="void">void</link> *oid,
                                                         unsigned <link linkend="int">int</link> critical);
<link linkend="int">int</link>                 <link linkend="gnutls-x509-crq-get-key-purpose-oid">gnutls_x509_crq_get_key_purpose_oid</link> (<link linkend="gnutls-x509-crq-t">gnutls_x509_crq_t</link> cert,
                                                         <link linkend="int">int</link> indx,
                                                         <link linkend="void">void</link> *oid,
                                                         <link linkend="size-t">size_t</link> *sizeof_oid,
                                                         unsigned <link linkend="int">int</link> *critical);
<link linkend="int">int</link>                 <link linkend="gnutls-x509-crq-get-extension-data">gnutls_x509_crq_get_extension_data</link>  (<link linkend="gnutls-x509-crq-t">gnutls_x509_crq_t</link> cert,
                                                         <link linkend="int">int</link> indx,
                                                         <link linkend="void">void</link> *data,
                                                         <link linkend="size-t">size_t</link> *sizeof_data);
<link linkend="int">int</link>                 <link linkend="gnutls-x509-crq-get-extension-info">gnutls_x509_crq_get_extension_info</link>  (<link linkend="gnutls-x509-crq-t">gnutls_x509_crq_t</link> cert,
                                                         <link linkend="int">int</link> indx,
                                                         <link linkend="void">void</link> *oid,
                                                         <link linkend="size-t">size_t</link> *sizeof_oid,
                                                         <link linkend="int">int</link> *critical);
<link linkend="int">int</link>                 <link linkend="gnutls-x509-crq-get-attribute-data">gnutls_x509_crq_get_attribute_data</link>  (<link linkend="gnutls-x509-crq-t">gnutls_x509_crq_t</link> cert,
                                                         <link linkend="int">int</link> indx,
                                                         <link linkend="void">void</link> *data,
                                                         <link linkend="size-t">size_t</link> *sizeof_data);
<link linkend="int">int</link>                 <link linkend="gnutls-x509-crq-get-attribute-info">gnutls_x509_crq_get_attribute_info</link>  (<link linkend="gnutls-x509-crq-t">gnutls_x509_crq_t</link> cert,
                                                         <link linkend="int">int</link> indx,
                                                         <link linkend="void">void</link> *oid,
                                                         <link linkend="size-t">size_t</link> *sizeof_oid);
<link linkend="int">int</link>                 <link linkend="gnutls-x509-crq-get-pk-algorithm">gnutls_x509_crq_get_pk_algorithm</link>    (<link linkend="gnutls-x509-crq-t">gnutls_x509_crq_t</link> crq,
                                                         unsigned <link linkend="int">int</link> *bits);
<link linkend="int">int</link>                 <link linkend="gnutls-x509-crq-get-key-id">gnutls_x509_crq_get_key_id</link>          (<link linkend="gnutls-x509-crq-t">gnutls_x509_crq_t</link> crq,
                                                         unsigned <link linkend="int">int</link> flags,
                                                         unsigned <link linkend="char">char</link> *output_data,
                                                         <link linkend="size-t">size_t</link> *output_data_size);
<link linkend="int">int</link>                 <link linkend="gnutls-x509-crq-get-key-rsa-raw">gnutls_x509_crq_get_key_rsa_raw</link>     (<link linkend="gnutls-x509-crq-t">gnutls_x509_crq_t</link> crq,
                                                         <link linkend="gnutls-datum-t">gnutls_datum_t</link> *m,
                                                         <link linkend="gnutls-datum-t">gnutls_datum_t</link> *e);
<link linkend="int">int</link>                 <link linkend="gnutls-x509-crq-get-key-usage">gnutls_x509_crq_get_key_usage</link>       (<link linkend="gnutls-x509-crq-t">gnutls_x509_crq_t</link> cert,
                                                         unsigned <link linkend="int">int</link> *key_usage,
                                                         unsigned <link linkend="int">int</link> *critical);
<link linkend="int">int</link>                 <link linkend="gnutls-x509-crq-get-basic-constraints">gnutls_x509_crq_get_basic_constraints</link>
                                                        (<link linkend="gnutls-x509-crq-t">gnutls_x509_crq_t</link> cert,
                                                         unsigned <link linkend="int">int</link> *critical,
                                                         <link linkend="int">int</link> *ca,
                                                         <link linkend="int">int</link> *pathlen);
<link linkend="int">int</link>                 <link linkend="gnutls-x509-crq-get-subject-alt-name">gnutls_x509_crq_get_subject_alt_name</link>
                                                        (<link linkend="gnutls-x509-crq-t">gnutls_x509_crq_t</link> cert,
                                                         unsigned <link linkend="int">int</link> seq,
                                                         <link linkend="void">void</link> *ret,
                                                         <link linkend="size-t">size_t</link> *ret_size,
                                                         unsigned <link linkend="int">int</link> *ret_type,
                                                         unsigned <link linkend="int">int</link> *critical);
<link linkend="int">int</link>                 <link linkend="gnutls-x509-crq-get-subject-alt-othername-oid">gnutls_x509_crq_get_subject_alt_othername_oid</link>
                                                        (<link linkend="gnutls-x509-crq-t">gnutls_x509_crq_t</link> cert,
                                                         unsigned <link linkend="int">int</link> seq,
                                                         <link linkend="void">void</link> *ret,
                                                         <link linkend="size-t">size_t</link> *ret_size);
<link linkend="int">int</link>                 <link linkend="gnutls-x509-crq-get-extension-by-oid">gnutls_x509_crq_get_extension_by_oid</link>
                                                        (<link linkend="gnutls-x509-crq-t">gnutls_x509_crq_t</link> cert,
                                                         const <link linkend="char">char</link> *oid,
                                                         <link linkend="int">int</link> indx,
                                                         <link linkend="void">void</link> *buf,
                                                         <link linkend="size-t">size_t</link> *sizeof_buf,
                                                         unsigned <link linkend="int">int</link> *critical);
</synopsis>
</refsynopsisdiv>









<refsect1 id="gnutls-x509.description" role="desc">
<title role="desc.title">Description</title>
<para>
</para>
</refsect1>

<refsect1 id="gnutls-x509.details" role="details">
<title role="details.title">Details</title>
<refsect2 id="GNUTLS-OID-X520-COUNTRY-NAME--CAPS" role="macro">
<title>GNUTLS_OID_X520_COUNTRY_NAME</title>
<indexterm zone="GNUTLS-OID-X520-COUNTRY-NAME--CAPS"><primary sortas="GNUTLS_OID_X520_COUNTRY_NAME">GNUTLS_OID_X520_COUNTRY_NAME</primary></indexterm><programlisting>#define GNUTLS_OID_X520_COUNTRY_NAME		"2.5.4.6"
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-OID-X520-ORGANIZATION-NAME--CAPS" role="macro">
<title>GNUTLS_OID_X520_ORGANIZATION_NAME</title>
<indexterm zone="GNUTLS-OID-X520-ORGANIZATION-NAME--CAPS"><primary sortas="GNUTLS_OID_X520_ORGANIZATION_NAME">GNUTLS_OID_X520_ORGANIZATION_NAME</primary></indexterm><programlisting>#define GNUTLS_OID_X520_ORGANIZATION_NAME	"2.5.4.10"
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-OID-X520-ORGANIZATIONAL-UNIT-NAME--CAPS" role="macro">
<title>GNUTLS_OID_X520_ORGANIZATIONAL_UNIT_NAME</title>
<indexterm zone="GNUTLS-OID-X520-ORGANIZATIONAL-UNIT-NAME--CAPS"><primary sortas="GNUTLS_OID_X520_ORGANIZATIONAL_UNIT_NAME">GNUTLS_OID_X520_ORGANIZATIONAL_UNIT_NAME</primary></indexterm><programlisting>#define GNUTLS_OID_X520_ORGANIZATIONAL_UNIT_NAME "2.5.4.11"
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-OID-X520-COMMON-NAME--CAPS" role="macro">
<title>GNUTLS_OID_X520_COMMON_NAME</title>
<indexterm zone="GNUTLS-OID-X520-COMMON-NAME--CAPS"><primary sortas="GNUTLS_OID_X520_COMMON_NAME">GNUTLS_OID_X520_COMMON_NAME</primary></indexterm><programlisting>#define GNUTLS_OID_X520_COMMON_NAME		"2.5.4.3"
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-OID-X520-LOCALITY-NAME--CAPS" role="macro">
<title>GNUTLS_OID_X520_LOCALITY_NAME</title>
<indexterm zone="GNUTLS-OID-X520-LOCALITY-NAME--CAPS"><primary sortas="GNUTLS_OID_X520_LOCALITY_NAME">GNUTLS_OID_X520_LOCALITY_NAME</primary></indexterm><programlisting>#define GNUTLS_OID_X520_LOCALITY_NAME		"2.5.4.7"
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-OID-X520-STATE-OR-PROVINCE-NAME--CAPS" role="macro">
<title>GNUTLS_OID_X520_STATE_OR_PROVINCE_NAME</title>
<indexterm zone="GNUTLS-OID-X520-STATE-OR-PROVINCE-NAME--CAPS"><primary sortas="GNUTLS_OID_X520_STATE_OR_PROVINCE_NAME">GNUTLS_OID_X520_STATE_OR_PROVINCE_NAME</primary></indexterm><programlisting>#define GNUTLS_OID_X520_STATE_OR_PROVINCE_NAME	"2.5.4.8"
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-OID-X520-INITIALS--CAPS" role="macro">
<title>GNUTLS_OID_X520_INITIALS</title>
<indexterm zone="GNUTLS-OID-X520-INITIALS--CAPS"><primary sortas="GNUTLS_OID_X520_INITIALS">GNUTLS_OID_X520_INITIALS</primary></indexterm><programlisting>#define GNUTLS_OID_X520_INITIALS		"2.5.4.43"
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-OID-X520-GENERATION-QUALIFIER--CAPS" role="macro">
<title>GNUTLS_OID_X520_GENERATION_QUALIFIER</title>
<indexterm zone="GNUTLS-OID-X520-GENERATION-QUALIFIER--CAPS"><primary sortas="GNUTLS_OID_X520_GENERATION_QUALIFIER">GNUTLS_OID_X520_GENERATION_QUALIFIER</primary></indexterm><programlisting>#define GNUTLS_OID_X520_GENERATION_QUALIFIER	"2.5.4.44"
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-OID-X520-SURNAME--CAPS" role="macro">
<title>GNUTLS_OID_X520_SURNAME</title>
<indexterm zone="GNUTLS-OID-X520-SURNAME--CAPS"><primary sortas="GNUTLS_OID_X520_SURNAME">GNUTLS_OID_X520_SURNAME</primary></indexterm><programlisting>#define GNUTLS_OID_X520_SURNAME			"2.5.4.4"
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-OID-X520-GIVEN-NAME--CAPS" role="macro">
<title>GNUTLS_OID_X520_GIVEN_NAME</title>
<indexterm zone="GNUTLS-OID-X520-GIVEN-NAME--CAPS"><primary sortas="GNUTLS_OID_X520_GIVEN_NAME">GNUTLS_OID_X520_GIVEN_NAME</primary></indexterm><programlisting>#define GNUTLS_OID_X520_GIVEN_NAME		"2.5.4.42"
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-OID-X520-TITLE--CAPS" role="macro">
<title>GNUTLS_OID_X520_TITLE</title>
<indexterm zone="GNUTLS-OID-X520-TITLE--CAPS"><primary sortas="GNUTLS_OID_X520_TITLE">GNUTLS_OID_X520_TITLE</primary></indexterm><programlisting>#define GNUTLS_OID_X520_TITLE			"2.5.4.12"
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-OID-X520-DN-QUALIFIER--CAPS" role="macro">
<title>GNUTLS_OID_X520_DN_QUALIFIER</title>
<indexterm zone="GNUTLS-OID-X520-DN-QUALIFIER--CAPS"><primary sortas="GNUTLS_OID_X520_DN_QUALIFIER">GNUTLS_OID_X520_DN_QUALIFIER</primary></indexterm><programlisting>#define GNUTLS_OID_X520_DN_QUALIFIER		"2.5.4.46"
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-OID-X520-PSEUDONYM--CAPS" role="macro">
<title>GNUTLS_OID_X520_PSEUDONYM</title>
<indexterm zone="GNUTLS-OID-X520-PSEUDONYM--CAPS"><primary sortas="GNUTLS_OID_X520_PSEUDONYM">GNUTLS_OID_X520_PSEUDONYM</primary></indexterm><programlisting>#define GNUTLS_OID_X520_PSEUDONYM		"2.5.4.65"
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-OID-LDAP-DC--CAPS" role="macro">
<title>GNUTLS_OID_LDAP_DC</title>
<indexterm zone="GNUTLS-OID-LDAP-DC--CAPS"><primary sortas="GNUTLS_OID_LDAP_DC">GNUTLS_OID_LDAP_DC</primary></indexterm><programlisting>#define GNUTLS_OID_LDAP_DC			"0.9.2342.19200300.100.1.25"
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-OID-LDAP-UID--CAPS" role="macro">
<title>GNUTLS_OID_LDAP_UID</title>
<indexterm zone="GNUTLS-OID-LDAP-UID--CAPS"><primary sortas="GNUTLS_OID_LDAP_UID">GNUTLS_OID_LDAP_UID</primary></indexterm><programlisting>#define GNUTLS_OID_LDAP_UID			"0.9.2342.19200300.100.1.1"
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-OID-PKCS9-EMAIL--CAPS" role="macro">
<title>GNUTLS_OID_PKCS9_EMAIL</title>
<indexterm zone="GNUTLS-OID-PKCS9-EMAIL--CAPS"><primary sortas="GNUTLS_OID_PKCS9_EMAIL">GNUTLS_OID_PKCS9_EMAIL</primary></indexterm><programlisting>#define GNUTLS_OID_PKCS9_EMAIL			"1.2.840.113549.1.9.1"
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-OID-PKIX-DATE-OF-BIRTH--CAPS" role="macro">
<title>GNUTLS_OID_PKIX_DATE_OF_BIRTH</title>
<indexterm zone="GNUTLS-OID-PKIX-DATE-OF-BIRTH--CAPS"><primary sortas="GNUTLS_OID_PKIX_DATE_OF_BIRTH">GNUTLS_OID_PKIX_DATE_OF_BIRTH</primary></indexterm><programlisting>#define GNUTLS_OID_PKIX_DATE_OF_BIRTH		"1.3.6.1.5.5.7.9.1"
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-OID-PKIX-PLACE-OF-BIRTH--CAPS" role="macro">
<title>GNUTLS_OID_PKIX_PLACE_OF_BIRTH</title>
<indexterm zone="GNUTLS-OID-PKIX-PLACE-OF-BIRTH--CAPS"><primary sortas="GNUTLS_OID_PKIX_PLACE_OF_BIRTH">GNUTLS_OID_PKIX_PLACE_OF_BIRTH</primary></indexterm><programlisting>#define GNUTLS_OID_PKIX_PLACE_OF_BIRTH		"1.3.6.1.5.5.7.9.2"
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-OID-PKIX-GENDER--CAPS" role="macro">
<title>GNUTLS_OID_PKIX_GENDER</title>
<indexterm zone="GNUTLS-OID-PKIX-GENDER--CAPS"><primary sortas="GNUTLS_OID_PKIX_GENDER">GNUTLS_OID_PKIX_GENDER</primary></indexterm><programlisting>#define GNUTLS_OID_PKIX_GENDER			"1.3.6.1.5.5.7.9.3"
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-OID-PKIX-COUNTRY-OF-CITIZENSHIP--CAPS" role="macro">
<title>GNUTLS_OID_PKIX_COUNTRY_OF_CITIZENSHIP</title>
<indexterm zone="GNUTLS-OID-PKIX-COUNTRY-OF-CITIZENSHIP--CAPS"><primary sortas="GNUTLS_OID_PKIX_COUNTRY_OF_CITIZENSHIP">GNUTLS_OID_PKIX_COUNTRY_OF_CITIZENSHIP</primary></indexterm><programlisting>#define GNUTLS_OID_PKIX_COUNTRY_OF_CITIZENSHIP	"1.3.6.1.5.5.7.9.4"
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-OID-PKIX-COUNTRY-OF-RESIDENCE--CAPS" role="macro">
<title>GNUTLS_OID_PKIX_COUNTRY_OF_RESIDENCE</title>
<indexterm zone="GNUTLS-OID-PKIX-COUNTRY-OF-RESIDENCE--CAPS"><primary sortas="GNUTLS_OID_PKIX_COUNTRY_OF_RESIDENCE">GNUTLS_OID_PKIX_COUNTRY_OF_RESIDENCE</primary></indexterm><programlisting>#define GNUTLS_OID_PKIX_COUNTRY_OF_RESIDENCE	"1.3.6.1.5.5.7.9.5"
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-KP-TLS-WWW-SERVER--CAPS" role="macro">
<title>GNUTLS_KP_TLS_WWW_SERVER</title>
<indexterm zone="GNUTLS-KP-TLS-WWW-SERVER--CAPS"><primary sortas="GNUTLS_KP_TLS_WWW_SERVER">GNUTLS_KP_TLS_WWW_SERVER</primary></indexterm><programlisting>#define GNUTLS_KP_TLS_WWW_SERVER		"1.3.6.1.5.5.7.3.1"
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-KP-TLS-WWW-CLIENT--CAPS" role="macro">
<title>GNUTLS_KP_TLS_WWW_CLIENT</title>
<indexterm zone="GNUTLS-KP-TLS-WWW-CLIENT--CAPS"><primary sortas="GNUTLS_KP_TLS_WWW_CLIENT">GNUTLS_KP_TLS_WWW_CLIENT</primary></indexterm><programlisting>#define GNUTLS_KP_TLS_WWW_CLIENT                "1.3.6.1.5.5.7.3.2"
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-KP-CODE-SIGNING--CAPS" role="macro">
<title>GNUTLS_KP_CODE_SIGNING</title>
<indexterm zone="GNUTLS-KP-CODE-SIGNING--CAPS"><primary sortas="GNUTLS_KP_CODE_SIGNING">GNUTLS_KP_CODE_SIGNING</primary></indexterm><programlisting>#define GNUTLS_KP_CODE_SIGNING			"1.3.6.1.5.5.7.3.3"
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-KP-EMAIL-PROTECTION--CAPS" role="macro">
<title>GNUTLS_KP_EMAIL_PROTECTION</title>
<indexterm zone="GNUTLS-KP-EMAIL-PROTECTION--CAPS"><primary sortas="GNUTLS_KP_EMAIL_PROTECTION">GNUTLS_KP_EMAIL_PROTECTION</primary></indexterm><programlisting>#define GNUTLS_KP_EMAIL_PROTECTION		"1.3.6.1.5.5.7.3.4"
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-KP-TIME-STAMPING--CAPS" role="macro">
<title>GNUTLS_KP_TIME_STAMPING</title>
<indexterm zone="GNUTLS-KP-TIME-STAMPING--CAPS"><primary sortas="GNUTLS_KP_TIME_STAMPING">GNUTLS_KP_TIME_STAMPING</primary></indexterm><programlisting>#define GNUTLS_KP_TIME_STAMPING			"1.3.6.1.5.5.7.3.8"
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-KP-OCSP-SIGNING--CAPS" role="macro">
<title>GNUTLS_KP_OCSP_SIGNING</title>
<indexterm zone="GNUTLS-KP-OCSP-SIGNING--CAPS"><primary sortas="GNUTLS_KP_OCSP_SIGNING">GNUTLS_KP_OCSP_SIGNING</primary></indexterm><programlisting>#define GNUTLS_KP_OCSP_SIGNING			"1.3.6.1.5.5.7.3.9"
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-KP-ANY--CAPS" role="macro">
<title>GNUTLS_KP_ANY</title>
<indexterm zone="GNUTLS-KP-ANY--CAPS"><primary sortas="GNUTLS_KP_ANY">GNUTLS_KP_ANY</primary></indexterm><programlisting>#define GNUTLS_KP_ANY				"2.5.29.37.0"
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-FSAN-SET--CAPS" role="macro">
<title>GNUTLS_FSAN_SET</title>
<indexterm zone="GNUTLS-FSAN-SET--CAPS"><primary sortas="GNUTLS_FSAN_SET">GNUTLS_FSAN_SET</primary></indexterm><programlisting>#define GNUTLS_FSAN_SET 0
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-FSAN-APPEND--CAPS" role="macro">
<title>GNUTLS_FSAN_APPEND</title>
<indexterm zone="GNUTLS-FSAN-APPEND--CAPS"><primary sortas="GNUTLS_FSAN_APPEND">GNUTLS_FSAN_APPEND</primary></indexterm><programlisting>#define GNUTLS_FSAN_APPEND 1
</programlisting>
<para>
</para></refsect2>
<refsect2 id="gnutls-certificate-import-flags" role="enum">
<title>enum gnutls_certificate_import_flags</title>
<indexterm zone="gnutls-certificate-import-flags"><primary sortas="gnutls_certificate_import_flags">gnutls_certificate_import_flags</primary></indexterm><programlisting>  typedef enum gnutls_certificate_import_flags
  {
    /* Fail if the certificates in the buffer are more than the space
     * allocated for certificates. The error code will be
     * GNUTLS_E_SHORT_MEMORY_BUFFER.
     */
    GNUTLS_X509_CRT_LIST_IMPORT_FAIL_IF_EXCEED = 1
  } gnutls_certificate_import_flags;
</programlisting>
<para>
</para></refsect2>
<refsect2 id="gnutls-x509-crt-init" role="function">
<title>gnutls_x509_crt_init ()</title>
<indexterm zone="gnutls-x509-crt-init"><primary sortas="gnutls_x509_crt_init">gnutls_x509_crt_init</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_x509_crt_init                (<link linkend="gnutls-x509-crt-t">gnutls_x509_crt_t</link> *cert);</programlisting>
<para>
This function will initialize an X.509 certificate structure.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>cert</parameter>&#160;:</term>
<listitem><simpara> The structure to be initialized
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> On success, <link linkend="GNUTLS-E-SUCCESS--CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> is returned, otherwise a
  negative error value.

</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-x509-crt-deinit" role="function">
<title>gnutls_x509_crt_deinit ()</title>
<indexterm zone="gnutls-x509-crt-deinit"><primary sortas="gnutls_x509_crt_deinit">gnutls_x509_crt_deinit</primary></indexterm><programlisting><link linkend="void">void</link>                gnutls_x509_crt_deinit              (<link linkend="gnutls-x509-crt-t">gnutls_x509_crt_t</link> cert);</programlisting>
<para>
This function will deinitialize a CRL structure.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>cert</parameter>&#160;:</term>
<listitem><simpara> The structure to be initialized
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-x509-crt-import" role="function">
<title>gnutls_x509_crt_import ()</title>
<indexterm zone="gnutls-x509-crt-import"><primary sortas="gnutls_x509_crt_import">gnutls_x509_crt_import</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_x509_crt_import              (<link linkend="gnutls-x509-crt-t">gnutls_x509_crt_t</link> cert,
                                                         const <link linkend="gnutls-datum-t">gnutls_datum_t</link> *data,
                                                         <link linkend="gnutls-x509-crt-fmt-t">gnutls_x509_crt_fmt_t</link> format);</programlisting>
<para>
This function will convert the given DER or PEM encoded Certificate
to the native gnutls_x509_crt_t format. The output will be stored in <parameter>cert</parameter>.
</para>
<para>
If the Certificate is PEM encoded it should have a header of "X509 CERTIFICATE", or
"CERTIFICATE".</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>cert</parameter>&#160;:</term>
<listitem><simpara> The structure to store the parsed certificate.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>data</parameter>&#160;:</term>
<listitem><simpara> The DER or PEM encoded certificate.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>format</parameter>&#160;:</term>
<listitem><simpara> One of DER or PEM
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> On success, <link linkend="GNUTLS-E-SUCCESS--CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> is returned, otherwise a
  negative error value.

</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-x509-crt-list-import" role="function">
<title>gnutls_x509_crt_list_import ()</title>
<indexterm zone="gnutls-x509-crt-list-import"><primary sortas="gnutls_x509_crt_list_import">gnutls_x509_crt_list_import</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_x509_crt_list_import         (<link linkend="gnutls-x509-crt-t">gnutls_x509_crt_t</link> *certs,
                                                         unsigned <link linkend="int">int</link> *cert_max,
                                                         const <link linkend="gnutls-datum-t">gnutls_datum_t</link> *data,
                                                         <link linkend="gnutls-x509-crt-fmt-t">gnutls_x509_crt_fmt_t</link> format,
                                                         unsigned <link linkend="int">int</link> flags);</programlisting>
<para>
This function will convert the given PEM encoded certificate list
to the native gnutls_x509_crt_t format. The output will be stored
in <parameter>certs</parameter>.  They will be automatically initialized.
</para>
<para>
If the Certificate is PEM encoded it should have a header of "X509
CERTIFICATE", or "CERTIFICATE".</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>certs</parameter>&#160;:</term>
<listitem><simpara> The structures to store the parsed certificate. Must not be initialized.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>cert_max</parameter>&#160;:</term>
<listitem><simpara> Initially must hold the maximum number of certs. It will be updated with the number of certs available.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>data</parameter>&#160;:</term>
<listitem><simpara> The PEM encoded certificate.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>format</parameter>&#160;:</term>
<listitem><simpara> One of DER or PEM.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>flags</parameter>&#160;:</term>
<listitem><simpara> must be zero or an OR'd sequence of gnutls_certificate_import_flags.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> the number of certificates read or a negative error value.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-x509-crt-export" role="function">
<title>gnutls_x509_crt_export ()</title>
<indexterm zone="gnutls-x509-crt-export"><primary sortas="gnutls_x509_crt_export">gnutls_x509_crt_export</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_x509_crt_export              (<link linkend="gnutls-x509-crt-t">gnutls_x509_crt_t</link> cert,
                                                         <link linkend="gnutls-x509-crt-fmt-t">gnutls_x509_crt_fmt_t</link> format,
                                                         <link linkend="void">void</link> *output_data,
                                                         <link linkend="size-t">size_t</link> *output_data_size);</programlisting>
<para>
This function will export the certificate to DER or PEM format.
</para>
<para>
If the buffer provided is not long enough to hold the output, then
*output_data_size is updated and GNUTLS_E_SHORT_MEMORY_BUFFER will
be returned.
</para>
<para>
If the structure is PEM encoded, it will have a header
of "BEGIN CERTIFICATE".</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>cert</parameter>&#160;:</term>
<listitem><simpara> Holds the certificate
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>format</parameter>&#160;:</term>
<listitem><simpara> the format of output params. One of PEM or DER.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>output_data</parameter>&#160;:</term>
<listitem><simpara> will contain a certificate PEM or DER encoded
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>output_data_size</parameter>&#160;:</term>
<listitem><simpara> holds the size of output_data (and will be
  replaced by the actual size of parameters)
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> In case of failure a negative value will be
  returned, and 0 on success.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-x509-crt-get-issuer-dn" role="function">
<title>gnutls_x509_crt_get_issuer_dn ()</title>
<indexterm zone="gnutls-x509-crt-get-issuer-dn"><primary sortas="gnutls_x509_crt_get_issuer_dn">gnutls_x509_crt_get_issuer_dn</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_x509_crt_get_issuer_dn       (<link linkend="gnutls-x509-crt-t">gnutls_x509_crt_t</link> cert,
                                                         <link linkend="char">char</link> *buf,
                                                         <link linkend="size-t">size_t</link> *sizeof_buf);</programlisting>
<para>
This function will copy the name of the Certificate issuer in the
provided buffer. The name will be in the form
"C=xxxx,O=yyyy,CN=zzzz" as described in RFC2253. The output string
will be ASCII or UTF-8 encoded, depending on the certificate data.
</para>
<para>
If <parameter>buf</parameter> is null then only the size will be filled.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>cert</parameter>&#160;:</term>
<listitem><simpara> should contain a <link linkend="gnutls-x509-crt-t"><type>gnutls_x509_crt_t</type></link> structure
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>buf</parameter>&#160;:</term>
<listitem><simpara> a pointer to a structure to hold the name (may be null)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>sizeof_buf</parameter>&#160;:</term>
<listitem><simpara> initially holds the size of <parameter>buf</parameter>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> GNUTLS_E_SHORT_MEMORY_BUFFER if the provided buffer is not
long enough, and in that case the *sizeof_buf will be updated with
the required size.  On success 0 is returned.

</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-x509-crt-get-issuer-dn-oid" role="function">
<title>gnutls_x509_crt_get_issuer_dn_oid ()</title>
<indexterm zone="gnutls-x509-crt-get-issuer-dn-oid"><primary sortas="gnutls_x509_crt_get_issuer_dn_oid">gnutls_x509_crt_get_issuer_dn_oid</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_x509_crt_get_issuer_dn_oid   (<link linkend="gnutls-x509-crt-t">gnutls_x509_crt_t</link> cert,
                                                         <link linkend="int">int</link> indx,
                                                         <link linkend="void">void</link> *oid,
                                                         <link linkend="size-t">size_t</link> *sizeof_oid);</programlisting>
<para>
This function will extract the OIDs of the name of the Certificate
issuer specified by the given index.
</para>
<para>
If <parameter>oid</parameter> is null then only the size will be filled.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>cert</parameter>&#160;:</term>
<listitem><simpara> should contain a <link linkend="gnutls-x509-crt-t"><type>gnutls_x509_crt_t</type></link> structure
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>indx</parameter>&#160;:</term>
<listitem><simpara> This specifies which OID to return. Use zero to get the first one.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>oid</parameter>&#160;:</term>
<listitem><simpara> a pointer to a buffer to hold the OID (may be null)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>sizeof_oid</parameter>&#160;:</term>
<listitem><simpara> initially holds the size of <parameter>oid</parameter>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> GNUTLS_E_SHORT_MEMORY_BUFFER if the provided buffer is not
long enough, and in that case the *sizeof_oid will be updated with
the required size.  On success 0 is returned.

</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-x509-crt-get-issuer-dn-by-oid" role="function">
<title>gnutls_x509_crt_get_issuer_dn_by_oid ()</title>
<indexterm zone="gnutls-x509-crt-get-issuer-dn-by-oid"><primary sortas="gnutls_x509_crt_get_issuer_dn_by_oid">gnutls_x509_crt_get_issuer_dn_by_oid</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_x509_crt_get_issuer_dn_by_oid
                                                        (<link linkend="gnutls-x509-crt-t">gnutls_x509_crt_t</link> cert,
                                                         const <link linkend="char">char</link> *oid,
                                                         <link linkend="int">int</link> indx,
                                                         unsigned <link linkend="int">int</link> raw_flag,
                                                         <link linkend="void">void</link> *buf,
                                                         <link linkend="size-t">size_t</link> *sizeof_buf);</programlisting>
<para>
This function will extract the part of the name of the Certificate
issuer specified by the given OID. The output, if the raw flag is not
used, will be encoded as described in RFC2253. Thus a string that is
ASCII or UTF-8 encoded, depending on the certificate data.
</para>
<para>
Some helper macros with popular OIDs can be found in gnutls/x509.h
If raw flag is zero, this function will only return known OIDs as
text. Other OIDs will be DER encoded, as described in RFC2253 --
in hex format with a '#' prefix.  You can check about known OIDs
using <link linkend="gnutls-x509-dn-oid-known"><function>gnutls_x509_dn_oid_known()</function></link>.
</para>
<para>
If <parameter>buf</parameter> is null then only the size will be filled.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>cert</parameter>&#160;:</term>
<listitem><simpara> should contain a <link linkend="gnutls-x509-crt-t"><type>gnutls_x509_crt_t</type></link> structure
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>oid</parameter>&#160;:</term>
<listitem><simpara> holds an Object Identified in null terminated string
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>indx</parameter>&#160;:</term>
<listitem><simpara> In case multiple same OIDs exist in the RDN, this specifies which to send. Use zero to get the first one.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>raw_flag</parameter>&#160;:</term>
<listitem><simpara> If non zero returns the raw DER data of the DN part.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>buf</parameter>&#160;:</term>
<listitem><simpara> a pointer to a structure to hold the name (may be null)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>sizeof_buf</parameter>&#160;:</term>
<listitem><simpara> initially holds the size of <parameter>buf</parameter>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> GNUTLS_E_SHORT_MEMORY_BUFFER if the provided buffer is not
long enough, and in that case the *sizeof_buf will be updated with
the required size.  On success 0 is returned.

</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-x509-crt-get-dn" role="function">
<title>gnutls_x509_crt_get_dn ()</title>
<indexterm zone="gnutls-x509-crt-get-dn"><primary sortas="gnutls_x509_crt_get_dn">gnutls_x509_crt_get_dn</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_x509_crt_get_dn              (<link linkend="gnutls-x509-crt-t">gnutls_x509_crt_t</link> cert,
                                                         <link linkend="char">char</link> *buf,
                                                         <link linkend="size-t">size_t</link> *sizeof_buf);</programlisting>
<para>
This function will copy the name of the Certificate in the
provided buffer. The name will be in the form
"C=xxxx,O=yyyy,CN=zzzz" as described in RFC2253. The output string
will be ASCII or UTF-8 encoded, depending on the certificate data.
</para>
<para>
If <parameter>buf</parameter> is null then only the size will be filled.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>cert</parameter>&#160;:</term>
<listitem><simpara> should contain a <link linkend="gnutls-x509-crt-t"><type>gnutls_x509_crt_t</type></link> structure
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>buf</parameter>&#160;:</term>
<listitem><simpara> a pointer to a structure to hold the name (may be null)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>sizeof_buf</parameter>&#160;:</term>
<listitem><simpara> initially holds the size of <parameter>buf</parameter>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> GNUTLS_E_SHORT_MEMORY_BUFFER if the provided buffer is not
long enough, and in that case the *sizeof_buf will be updated with
the required size.  On success 0 is returned.

</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-x509-crt-get-dn-oid" role="function">
<title>gnutls_x509_crt_get_dn_oid ()</title>
<indexterm zone="gnutls-x509-crt-get-dn-oid"><primary sortas="gnutls_x509_crt_get_dn_oid">gnutls_x509_crt_get_dn_oid</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_x509_crt_get_dn_oid          (<link linkend="gnutls-x509-crt-t">gnutls_x509_crt_t</link> cert,
                                                         <link linkend="int">int</link> indx,
                                                         <link linkend="void">void</link> *oid,
                                                         <link linkend="size-t">size_t</link> *sizeof_oid);</programlisting>
<para>
This function will extract the OIDs of the name of the Certificate
subject specified by the given index.
</para>
<para>
If oid is null then only the size will be filled.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>cert</parameter>&#160;:</term>
<listitem><simpara> should contain a <link linkend="gnutls-x509-crt-t"><type>gnutls_x509_crt_t</type></link> structure
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>indx</parameter>&#160;:</term>
<listitem><simpara> This specifies which OID to return. Use zero to get the first one.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>oid</parameter>&#160;:</term>
<listitem><simpara> a pointer to a buffer to hold the OID (may be null)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>sizeof_oid</parameter>&#160;:</term>
<listitem><simpara> initially holds the size of <parameter>oid</parameter>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> GNUTLS_E_SHORT_MEMORY_BUFFER if the provided buffer is not
long enough, and in that case the *sizeof_oid will be updated with
the required size.  On success 0 is returned.

</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-x509-crt-get-dn-by-oid" role="function">
<title>gnutls_x509_crt_get_dn_by_oid ()</title>
<indexterm zone="gnutls-x509-crt-get-dn-by-oid"><primary sortas="gnutls_x509_crt_get_dn_by_oid">gnutls_x509_crt_get_dn_by_oid</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_x509_crt_get_dn_by_oid       (<link linkend="gnutls-x509-crt-t">gnutls_x509_crt_t</link> cert,
                                                         const <link linkend="char">char</link> *oid,
                                                         <link linkend="int">int</link> indx,
                                                         unsigned <link linkend="int">int</link> raw_flag,
                                                         <link linkend="void">void</link> *buf,
                                                         <link linkend="size-t">size_t</link> *sizeof_buf);</programlisting>
<para>
This function will extract the part of the name of the Certificate
subject specified by the given OID. The output, if the raw flag is not
used, will be encoded as described in RFC2253. Thus a string that is
ASCII or UTF-8 encoded, depending on the certificate data.
</para>
<para>
Some helper macros with popular OIDs can be found in gnutls/x509.h
If raw flag is zero, this function will only return known OIDs as
text. Other OIDs will be DER encoded, as described in RFC2253 --
in hex format with a '#' prefix.  You can check about known OIDs
using <link linkend="gnutls-x509-dn-oid-known"><function>gnutls_x509_dn_oid_known()</function></link>.
</para>
<para>
If <parameter>buf</parameter> is null then only the size will be filled.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>cert</parameter>&#160;:</term>
<listitem><simpara> should contain a <link linkend="gnutls-x509-crt-t"><type>gnutls_x509_crt_t</type></link> structure
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>oid</parameter>&#160;:</term>
<listitem><simpara> holds an Object Identified in null terminated string
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>indx</parameter>&#160;:</term>
<listitem><simpara> In case multiple same OIDs exist in the RDN, this specifies which to send. Use zero to get the first one.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>raw_flag</parameter>&#160;:</term>
<listitem><simpara> If non zero returns the raw DER data of the DN part.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>buf</parameter>&#160;:</term>
<listitem><simpara> a pointer where the DN part will be copied (may be null).
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>sizeof_buf</parameter>&#160;:</term>
<listitem><simpara> initially holds the size of <parameter>buf</parameter>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> GNUTLS_E_SHORT_MEMORY_BUFFER if the provided buffer is not
long enough, and in that case the *sizeof_buf will be updated with
the required size.  On success 0 is returned.

</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-x509-crt-check-hostname" role="function">
<title>gnutls_x509_crt_check_hostname ()</title>
<indexterm zone="gnutls-x509-crt-check-hostname"><primary sortas="gnutls_x509_crt_check_hostname">gnutls_x509_crt_check_hostname</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_x509_crt_check_hostname      (<link linkend="gnutls-x509-crt-t">gnutls_x509_crt_t</link> cert,
                                                         const <link linkend="char">char</link> *hostname);</programlisting>
<para>
This function will check if the given certificate's subject matches
the given hostname.  This is a basic implementation of the matching
described in RFC2818 (HTTPS), which takes into account wildcards,
and the DNSName/IPAddress subject alternative name PKIX extension.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>cert</parameter>&#160;:</term>
<listitem><simpara> should contain an gnutls_x509_crt_t structure
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>hostname</parameter>&#160;:</term>
<listitem><simpara> A null terminated string that contains a DNS name
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> non zero for a successful match, and zero on failure.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-x509-crt-get-signature-algorithm" role="function">
<title>gnutls_x509_crt_get_signature_algorithm ()</title>
<indexterm zone="gnutls-x509-crt-get-signature-algorithm"><primary sortas="gnutls_x509_crt_get_signature_algorithm">gnutls_x509_crt_get_signature_algorithm</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_x509_crt_get_signature_algorithm
                                                        (<link linkend="gnutls-x509-crt-t">gnutls_x509_crt_t</link> cert);</programlisting>
<para>
This function will return a value of the <link linkend="gnutls-sign-algorithm-t"><type>gnutls_sign_algorithm_t</type></link>
enumeration that is the signature algorithm.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>cert</parameter>&#160;:</term>
<listitem><simpara> should contain a <link linkend="gnutls-x509-crt-t"><type>gnutls_x509_crt_t</type></link> structure
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a <link linkend="gnutls-sign-algorithm-t"><type>gnutls_sign_algorithm_t</type></link> value, or a negative value on
  error.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-x509-crt-get-signature" role="function">
<title>gnutls_x509_crt_get_signature ()</title>
<indexterm zone="gnutls-x509-crt-get-signature"><primary sortas="gnutls_x509_crt_get_signature">gnutls_x509_crt_get_signature</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_x509_crt_get_signature       (<link linkend="gnutls-x509-crt-t">gnutls_x509_crt_t</link> cert,
                                                         <link linkend="char">char</link> *sig,
                                                         <link linkend="size-t">size_t</link> *sizeof_sig);</programlisting>
<para>
This function will extract the signature field of a certificate.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>cert</parameter>&#160;:</term>
<listitem><simpara> should contain a <link linkend="gnutls-x509-crt-t"><type>gnutls_x509_crt_t</type></link> structure
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>sig</parameter>&#160;:</term>
<listitem><simpara> a pointer where the signature part will be copied (may be null).
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>sizeof_sig</parameter>&#160;:</term>
<listitem><simpara> initially holds the size of <parameter>sig</parameter>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> On success, <link linkend="GNUTLS-E-SUCCESS--CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> is returned, otherwise a
  negative error value. and a negative value on error.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-x509-crt-get-version" role="function">
<title>gnutls_x509_crt_get_version ()</title>
<indexterm zone="gnutls-x509-crt-get-version"><primary sortas="gnutls_x509_crt_get_version">gnutls_x509_crt_get_version</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_x509_crt_get_version         (<link linkend="gnutls-x509-crt-t">gnutls_x509_crt_t</link> cert);</programlisting>
<para>
This function will return the version of the specified Certificate.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>cert</parameter>&#160;:</term>
<listitem><simpara> should contain a <link linkend="gnutls-x509-crt-t"><type>gnutls_x509_crt_t</type></link> structure
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> version of certificate, or a negative value on error.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-x509-crt-get-key-id" role="function">
<title>gnutls_x509_crt_get_key_id ()</title>
<indexterm zone="gnutls-x509-crt-get-key-id"><primary sortas="gnutls_x509_crt_get_key_id">gnutls_x509_crt_get_key_id</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_x509_crt_get_key_id          (<link linkend="gnutls-x509-crt-t">gnutls_x509_crt_t</link> crt,
                                                         unsigned <link linkend="int">int</link> flags,
                                                         unsigned <link linkend="char">char</link> *output_data,
                                                         <link linkend="size-t">size_t</link> *output_data_size);</programlisting>
<para>
This function will return a unique ID the depends on the public
key parameters. This ID can be used in checking whether a
certificate corresponds to the given private key.
</para>
<para>
If the buffer provided is not long enough to hold the output, then
*output_data_size is updated and GNUTLS_E_SHORT_MEMORY_BUFFER will
be returned.  The output will normally be a SHA-1 hash output,
which is 20 bytes.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>crt</parameter>&#160;:</term>
<listitem><simpara> Holds the certificate
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>flags</parameter>&#160;:</term>
<listitem><simpara> should be 0 for now
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>output_data</parameter>&#160;:</term>
<listitem><simpara> will contain the key ID
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>output_data_size</parameter>&#160;:</term>
<listitem><simpara> holds the size of output_data (and will be
  replaced by the actual size of parameters)
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> In case of failure a negative value will be
  returned, and 0 on success.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-x509-crt-set-authority-key-id" role="function">
<title>gnutls_x509_crt_set_authority_key_id ()</title>
<indexterm zone="gnutls-x509-crt-set-authority-key-id"><primary sortas="gnutls_x509_crt_set_authority_key_id">gnutls_x509_crt_set_authority_key_id</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_x509_crt_set_authority_key_id
                                                        (<link linkend="gnutls-x509-crt-t">gnutls_x509_crt_t</link> cert,
                                                         const <link linkend="void">void</link> *id,
                                                         <link linkend="size-t">size_t</link> id_size);</programlisting>
<para>
This function will set the X.509 certificate's authority key ID extension.
Only the keyIdentifier field can be set with this function.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>cert</parameter>&#160;:</term>
<listitem><simpara> a certificate of type <link linkend="gnutls-x509-crt-t"><type>gnutls_x509_crt_t</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>id</parameter>&#160;:</term>
<listitem><simpara> The key ID
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>id_size</parameter>&#160;:</term>
<listitem><simpara> Holds the size of the serial field.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> On success, <link linkend="GNUTLS-E-SUCCESS--CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> is returned, otherwise a
  negative error value.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-x509-crt-get-authority-key-id" role="function">
<title>gnutls_x509_crt_get_authority_key_id ()</title>
<indexterm zone="gnutls-x509-crt-get-authority-key-id"><primary sortas="gnutls_x509_crt_get_authority_key_id">gnutls_x509_crt_get_authority_key_id</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_x509_crt_get_authority_key_id
                                                        (<link linkend="gnutls-x509-crt-t">gnutls_x509_crt_t</link> cert,
                                                         <link linkend="void">void</link> *ret,
                                                         <link linkend="size-t">size_t</link> *ret_size,
                                                         unsigned <link linkend="int">int</link> *critical);</programlisting>
<para>
This function will return the X.509v3 certificate authority's key
identifier.  This is obtained by the X.509 Authority Key
identifier extension field (2.5.29.35). Note that this function
only returns the keyIdentifier field of the extension.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>cert</parameter>&#160;:</term>
<listitem><simpara> should contain a <link linkend="gnutls-x509-crt-t"><type>gnutls_x509_crt_t</type></link> structure
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ret</parameter>&#160;:</term>
<listitem><simpara> The place where the identifier will be copied
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ret_size</parameter>&#160;:</term>
<listitem><simpara> Holds the size of the result field.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>critical</parameter>&#160;:</term>
<listitem><simpara> will be non zero if the extension is marked as critical (may be null)
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> On success, <link linkend="GNUTLS-E-SUCCESS--CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> is returned, otherwise a
  negative error value.and a negative value in case of an error.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-x509-crt-get-subject-key-id" role="function">
<title>gnutls_x509_crt_get_subject_key_id ()</title>
<indexterm zone="gnutls-x509-crt-get-subject-key-id"><primary sortas="gnutls_x509_crt_get_subject_key_id">gnutls_x509_crt_get_subject_key_id</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_x509_crt_get_subject_key_id  (<link linkend="gnutls-x509-crt-t">gnutls_x509_crt_t</link> cert,
                                                         <link linkend="void">void</link> *ret,
                                                         <link linkend="size-t">size_t</link> *ret_size,
                                                         unsigned <link linkend="int">int</link> *critical);</programlisting>
<para>
This function will return the X.509v3 certificate's subject key identifier.
This is obtained by the X.509 Subject Key identifier extension
field (2.5.29.14).</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>cert</parameter>&#160;:</term>
<listitem><simpara> should contain a <link linkend="gnutls-x509-crt-t"><type>gnutls_x509_crt_t</type></link> structure
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ret</parameter>&#160;:</term>
<listitem><simpara> The place where the identifier will be copied
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ret_size</parameter>&#160;:</term>
<listitem><simpara> Holds the size of the result field.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>critical</parameter>&#160;:</term>
<listitem><simpara> will be non zero if the extension is marked as critical (may be null)
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> On success, <link linkend="GNUTLS-E-SUCCESS--CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> is returned, otherwise a
  negative error value.and a negative value in case of an error.

</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="GNUTLS-CRL-REASON-UNUSED--CAPS" role="macro">
<title>GNUTLS_CRL_REASON_UNUSED</title>
<indexterm zone="GNUTLS-CRL-REASON-UNUSED--CAPS"><primary sortas="GNUTLS_CRL_REASON_UNUSED">GNUTLS_CRL_REASON_UNUSED</primary></indexterm><programlisting>#define GNUTLS_CRL_REASON_UNUSED 128
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-CRL-REASON-KEY-COMPROMISE--CAPS" role="macro">
<title>GNUTLS_CRL_REASON_KEY_COMPROMISE</title>
<indexterm zone="GNUTLS-CRL-REASON-KEY-COMPROMISE--CAPS"><primary sortas="GNUTLS_CRL_REASON_KEY_COMPROMISE">GNUTLS_CRL_REASON_KEY_COMPROMISE</primary></indexterm><programlisting>#define GNUTLS_CRL_REASON_KEY_COMPROMISE 64
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-CRL-REASON-CA-COMPROMISE--CAPS" role="macro">
<title>GNUTLS_CRL_REASON_CA_COMPROMISE</title>
<indexterm zone="GNUTLS-CRL-REASON-CA-COMPROMISE--CAPS"><primary sortas="GNUTLS_CRL_REASON_CA_COMPROMISE">GNUTLS_CRL_REASON_CA_COMPROMISE</primary></indexterm><programlisting>#define GNUTLS_CRL_REASON_CA_COMPROMISE 32
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-CRL-REASON-AFFILIATION-CHANGED--CAPS" role="macro">
<title>GNUTLS_CRL_REASON_AFFILIATION_CHANGED</title>
<indexterm zone="GNUTLS-CRL-REASON-AFFILIATION-CHANGED--CAPS"><primary sortas="GNUTLS_CRL_REASON_AFFILIATION_CHANGED">GNUTLS_CRL_REASON_AFFILIATION_CHANGED</primary></indexterm><programlisting>#define GNUTLS_CRL_REASON_AFFILIATION_CHANGED 16
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-CRL-REASON-SUPERSEEDED--CAPS" role="macro">
<title>GNUTLS_CRL_REASON_SUPERSEEDED</title>
<indexterm zone="GNUTLS-CRL-REASON-SUPERSEEDED--CAPS"><primary sortas="GNUTLS_CRL_REASON_SUPERSEEDED">GNUTLS_CRL_REASON_SUPERSEEDED</primary></indexterm><programlisting>#define GNUTLS_CRL_REASON_SUPERSEEDED 8
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-CRL-REASON-CESSATION-OF-OPERATION--CAPS" role="macro">
<title>GNUTLS_CRL_REASON_CESSATION_OF_OPERATION</title>
<indexterm zone="GNUTLS-CRL-REASON-CESSATION-OF-OPERATION--CAPS"><primary sortas="GNUTLS_CRL_REASON_CESSATION_OF_OPERATION">GNUTLS_CRL_REASON_CESSATION_OF_OPERATION</primary></indexterm><programlisting>#define GNUTLS_CRL_REASON_CESSATION_OF_OPERATION 4
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-CRL-REASON-CERTIFICATE-HOLD--CAPS" role="macro">
<title>GNUTLS_CRL_REASON_CERTIFICATE_HOLD</title>
<indexterm zone="GNUTLS-CRL-REASON-CERTIFICATE-HOLD--CAPS"><primary sortas="GNUTLS_CRL_REASON_CERTIFICATE_HOLD">GNUTLS_CRL_REASON_CERTIFICATE_HOLD</primary></indexterm><programlisting>#define GNUTLS_CRL_REASON_CERTIFICATE_HOLD 2
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-CRL-REASON-PRIVILEGE-WITHDRAWN--CAPS" role="macro">
<title>GNUTLS_CRL_REASON_PRIVILEGE_WITHDRAWN</title>
<indexterm zone="GNUTLS-CRL-REASON-PRIVILEGE-WITHDRAWN--CAPS"><primary sortas="GNUTLS_CRL_REASON_PRIVILEGE_WITHDRAWN">GNUTLS_CRL_REASON_PRIVILEGE_WITHDRAWN</primary></indexterm><programlisting>#define GNUTLS_CRL_REASON_PRIVILEGE_WITHDRAWN 1
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-CRL-REASON-AA-COMPROMISE--CAPS" role="macro">
<title>GNUTLS_CRL_REASON_AA_COMPROMISE</title>
<indexterm zone="GNUTLS-CRL-REASON-AA-COMPROMISE--CAPS"><primary sortas="GNUTLS_CRL_REASON_AA_COMPROMISE">GNUTLS_CRL_REASON_AA_COMPROMISE</primary></indexterm><programlisting>#define GNUTLS_CRL_REASON_AA_COMPROMISE 32768
</programlisting>
<para>
</para></refsect2>
<refsect2 id="gnutls-x509-crt-get-crl-dist-points" role="function">
<title>gnutls_x509_crt_get_crl_dist_points ()</title>
<indexterm zone="gnutls-x509-crt-get-crl-dist-points"><primary sortas="gnutls_x509_crt_get_crl_dist_points">gnutls_x509_crt_get_crl_dist_points</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_x509_crt_get_crl_dist_points (<link linkend="gnutls-x509-crt-t">gnutls_x509_crt_t</link> cert,
                                                         unsigned <link linkend="int">int</link> seq,
                                                         <link linkend="void">void</link> *ret,
                                                         <link linkend="size-t">size_t</link> *ret_size,
                                                         unsigned <link linkend="int">int</link> *reason_flags,
                                                         unsigned <link linkend="int">int</link> *critical);</programlisting>
<para>
This function will return the CRL distribution points (2.5.29.31),
contained in the given certificate.
</para>
<para>
<parameter>reason_flags</parameter> should be an ORed sequence of
GNUTLS_CRL_REASON_UNUSED, GNUTLS_CRL_REASON_KEY_COMPROMISE,
GNUTLS_CRL_REASON_CA_COMPROMISE,
GNUTLS_CRL_REASON_AFFILIATION_CHANGED,
GNUTLS_CRL_REASON_SUPERSEEDED,
GNUTLS_CRL_REASON_CESSATION_OF_OPERATION,
GNUTLS_CRL_REASON_CERTIFICATE_HOLD,
GNUTLS_CRL_REASON_PRIVILEGE_WITHDRAWN,
GNUTLS_CRL_REASON_AA_COMPROMISE, or zero for all possible reasons.
</para>
<para>
This is specified in X509v3 Certificate Extensions. GNUTLS will
return the distribution point type, or a negative error code on
error.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>cert</parameter>&#160;:</term>
<listitem><simpara> should contain a <link linkend="gnutls-x509-crt-t"><type>gnutls_x509_crt_t</type></link> structure
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>seq</parameter>&#160;:</term>
<listitem><simpara> specifies the sequence number of the distribution point (0 for the first one, 1 for the second etc.)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ret</parameter>&#160;:</term>
<listitem><simpara> is the place where the distribution point will be copied to
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ret_size</parameter>&#160;:</term>
<listitem><simpara> holds the size of ret.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>reason_flags</parameter>&#160;:</term>
<listitem><simpara> Revocation reasons flags.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>critical</parameter>&#160;:</term>
<listitem><simpara> will be non zero if the extension is marked as critical (may be null)
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> <link linkend="GNUTLS-E-SHORT-MEMORY-BUFFER--CAPS"><literal>GNUTLS_E_SHORT_MEMORY_BUFFER</literal></link> and updates &amp;<parameter>ret_size</parameter> if
&amp;<parameter>ret_size</parameter> is not enough to hold the distribution point, or the
type of the distribution point if everything was ok. The type is
one of the enumerated <link linkend="gnutls-x509-subject-alt-name-t"><literal>gnutls_x509_subject_alt_name_t</literal></link>.  If the
certificate does not have an Alternative name with the specified
sequence number then <link linkend="GNUTLS-E-REQUESTED-DATA-NOT-AVAILABLE--CAPS"><literal>GNUTLS_E_REQUESTED_DATA_NOT_AVAILABLE</literal></link> is
returned.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-x509-crt-set-crl-dist-points2" role="function" condition="since:2.6.0">
<title>gnutls_x509_crt_set_crl_dist_points2 ()</title>
<indexterm zone="gnutls-x509-crt-set-crl-dist-points2" role="2.6.0"><primary sortas="gnutls_x509_crt_set_crl_dist_points2">gnutls_x509_crt_set_crl_dist_points2</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_x509_crt_set_crl_dist_points2
                                                        (<link linkend="gnutls-x509-crt-t">gnutls_x509_crt_t</link> crt,
                                                         <link linkend="gnutls-x509-subject-alt-name-t">gnutls_x509_subject_alt_name_t</link> type,
                                                         const <link linkend="void">void</link> *data,
                                                         unsigned <link linkend="int">int</link> data_size,
                                                         unsigned <link linkend="int">int</link> reason_flags);</programlisting>
<para>
This function will set the CRL distribution points certificate extension.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>crt</parameter>&#160;:</term>
<listitem><simpara> a certificate of type <link linkend="gnutls-x509-crt-t"><type>gnutls_x509_crt_t</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>type</parameter>&#160;:</term>
<listitem><simpara> is one of the gnutls_x509_subject_alt_name_t enumerations
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>data</parameter>&#160;:</term>
<listitem><simpara> The data to be set
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>data_size</parameter>&#160;:</term>
<listitem><simpara> The data size
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>reason_flags</parameter>&#160;:</term>
<listitem><simpara> revocation reasons
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> On success, <link linkend="GNUTLS-E-SUCCESS--CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> is returned, otherwise a
  negative error value.

</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 2.6.0</para></refsect2>
<refsect2 id="gnutls-x509-crt-set-crl-dist-points" role="function">
<title>gnutls_x509_crt_set_crl_dist_points ()</title>
<indexterm zone="gnutls-x509-crt-set-crl-dist-points"><primary sortas="gnutls_x509_crt_set_crl_dist_points">gnutls_x509_crt_set_crl_dist_points</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_x509_crt_set_crl_dist_points (<link linkend="gnutls-x509-crt-t">gnutls_x509_crt_t</link> crt,
                                                         <link linkend="gnutls-x509-subject-alt-name-t">gnutls_x509_subject_alt_name_t</link> type,
                                                         const <link linkend="void">void</link> *data_string,
                                                         unsigned <link linkend="int">int</link> reason_flags);</programlisting>
<para>
This function will set the CRL distribution points certificate extension.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>crt</parameter>&#160;:</term>
<listitem><simpara> a certificate of type <link linkend="gnutls-x509-crt-t"><type>gnutls_x509_crt_t</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>type</parameter>&#160;:</term>
<listitem><simpara> is one of the gnutls_x509_subject_alt_name_t enumerations
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>data_string</parameter>&#160;:</term>
<listitem><simpara> The data to be set
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>reason_flags</parameter>&#160;:</term>
<listitem><simpara> revocation reasons
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> On success, <link linkend="GNUTLS-E-SUCCESS--CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> is returned, otherwise a
  negative error value.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-x509-crt-cpy-crl-dist-points" role="function">
<title>gnutls_x509_crt_cpy_crl_dist_points ()</title>
<indexterm zone="gnutls-x509-crt-cpy-crl-dist-points"><primary sortas="gnutls_x509_crt_cpy_crl_dist_points">gnutls_x509_crt_cpy_crl_dist_points</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_x509_crt_cpy_crl_dist_points (<link linkend="gnutls-x509-crt-t">gnutls_x509_crt_t</link> dst,
                                                         <link linkend="gnutls-x509-crt-t">gnutls_x509_crt_t</link> src);</programlisting>
<para>
This function will copy the CRL distribution points certificate
extension, from the source to the destination certificate.
This may be useful to copy from a CA certificate to issued ones.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>dst</parameter>&#160;:</term>
<listitem><simpara> a certificate of type <link linkend="gnutls-x509-crt-t"><type>gnutls_x509_crt_t</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>src</parameter>&#160;:</term>
<listitem><simpara> the certificate where the dist points will be copied from
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> On success, <link linkend="GNUTLS-E-SUCCESS--CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> is returned, otherwise a
  negative error value.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-x509-crt-get-activation-time" role="function">
<title>gnutls_x509_crt_get_activation_time ()</title>
<indexterm zone="gnutls-x509-crt-get-activation-time"><primary sortas="gnutls_x509_crt_get_activation_time">gnutls_x509_crt_get_activation_time</primary></indexterm><programlisting><link linkend="time-t">time_t</link>              gnutls_x509_crt_get_activation_time (<link linkend="gnutls-x509-crt-t">gnutls_x509_crt_t</link> cert);</programlisting>
<para>
This function will return the time this Certificate was or will be
activated.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>cert</parameter>&#160;:</term>
<listitem><simpara> should contain a <link linkend="gnutls-x509-crt-t"><type>gnutls_x509_crt_t</type></link> structure
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> activation time, or (time_t)-1 on error.

</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-x509-crt-get-expiration-time" role="function">
<title>gnutls_x509_crt_get_expiration_time ()</title>
<indexterm zone="gnutls-x509-crt-get-expiration-time"><primary sortas="gnutls_x509_crt_get_expiration_time">gnutls_x509_crt_get_expiration_time</primary></indexterm><programlisting><link linkend="time-t">time_t</link>              gnutls_x509_crt_get_expiration_time (<link linkend="gnutls-x509-crt-t">gnutls_x509_crt_t</link> cert);</programlisting>
<para>
This function will return the time this Certificate was or will be
expired.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>cert</parameter>&#160;:</term>
<listitem><simpara> should contain a <link linkend="gnutls-x509-crt-t"><type>gnutls_x509_crt_t</type></link> structure
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> expiration time, or (time_t)-1 on error.

</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-x509-crt-get-serial" role="function">
<title>gnutls_x509_crt_get_serial ()</title>
<indexterm zone="gnutls-x509-crt-get-serial"><primary sortas="gnutls_x509_crt_get_serial">gnutls_x509_crt_get_serial</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_x509_crt_get_serial          (<link linkend="gnutls-x509-crt-t">gnutls_x509_crt_t</link> cert,
                                                         <link linkend="void">void</link> *result,
                                                         <link linkend="size-t">size_t</link> *result_size);</programlisting>
<para>
This function will return the X.509 certificate's serial number. 
This is obtained by the X509 Certificate serialNumber
field. Serial is not always a 32 or 64bit number. Some CAs use
large serial numbers, thus it may be wise to handle it as something
opaque.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>cert</parameter>&#160;:</term>
<listitem><simpara> should contain a <link linkend="gnutls-x509-crt-t"><type>gnutls_x509_crt_t</type></link> structure
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>result</parameter>&#160;:</term>
<listitem><simpara> The place where the serial number will be copied
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>result_size</parameter>&#160;:</term>
<listitem><simpara> Holds the size of the result field.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> On success, <link linkend="GNUTLS-E-SUCCESS--CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> is returned, otherwise a
  negative error value.and a negative value in case of an error.

</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-x509-crt-get-pk-algorithm" role="function">
<title>gnutls_x509_crt_get_pk_algorithm ()</title>
<indexterm zone="gnutls-x509-crt-get-pk-algorithm"><primary sortas="gnutls_x509_crt_get_pk_algorithm">gnutls_x509_crt_get_pk_algorithm</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_x509_crt_get_pk_algorithm    (<link linkend="gnutls-x509-crt-t">gnutls_x509_crt_t</link> cert,
                                                         unsigned <link linkend="int">int</link> *bits);</programlisting>
<para>
This function will return the public key algorithm of an X.509 
certificate.
</para>
<para>
If bits is non null, it should have enough size to hold the parameters
size in bits. For RSA the bits returned is the modulus. 
For DSA the bits returned are of the public
exponent.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>cert</parameter>&#160;:</term>
<listitem><simpara> should contain a <link linkend="gnutls-x509-crt-t"><type>gnutls_x509_crt_t</type></link> structure
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>bits</parameter>&#160;:</term>
<listitem><simpara> if bits is non null it will hold the size of the parameters' in bits
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a member of the <link linkend="gnutls-pk-algorithm-t"><type>gnutls_pk_algorithm_t</type></link> enumeration on
success, or a negative value on error.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-x509-crt-get-pk-rsa-raw" role="function">
<title>gnutls_x509_crt_get_pk_rsa_raw ()</title>
<indexterm zone="gnutls-x509-crt-get-pk-rsa-raw"><primary sortas="gnutls_x509_crt_get_pk_rsa_raw">gnutls_x509_crt_get_pk_rsa_raw</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_x509_crt_get_pk_rsa_raw      (<link linkend="gnutls-x509-crt-t">gnutls_x509_crt_t</link> crt,
                                                         <link linkend="gnutls-datum-t">gnutls_datum_t</link> *m,
                                                         <link linkend="gnutls-datum-t">gnutls_datum_t</link> *e);</programlisting>
<para>
This function will export the RSA public key's parameters found in
the given structure.  The new parameters will be allocated using
<link linkend="gnutls-malloc"><function>gnutls_malloc()</function></link> and will be stored in the appropriate datum.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>crt</parameter>&#160;:</term>
<listitem><simpara> Holds the certificate
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>m</parameter>&#160;:</term>
<listitem><simpara> will hold the modulus
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>e</parameter>&#160;:</term>
<listitem><simpara> will hold the public exponent
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> <link linkend="GNUTLS-E-SUCCESS--CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> on success, otherwise an error.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-x509-crt-get-pk-dsa-raw" role="function">
<title>gnutls_x509_crt_get_pk_dsa_raw ()</title>
<indexterm zone="gnutls-x509-crt-get-pk-dsa-raw"><primary sortas="gnutls_x509_crt_get_pk_dsa_raw">gnutls_x509_crt_get_pk_dsa_raw</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_x509_crt_get_pk_dsa_raw      (<link linkend="gnutls-x509-crt-t">gnutls_x509_crt_t</link> crt,
                                                         <link linkend="gnutls-datum-t">gnutls_datum_t</link> *p,
                                                         <link linkend="gnutls-datum-t">gnutls_datum_t</link> *q,
                                                         <link linkend="gnutls-datum-t">gnutls_datum_t</link> *g,
                                                         <link linkend="gnutls-datum-t">gnutls_datum_t</link> *y);</programlisting>
<para>
This function will export the DSA public key's parameters found in
the given certificate.  The new parameters will be allocated using
<link linkend="gnutls-malloc"><function>gnutls_malloc()</function></link> and will be stored in the appropriate datum.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>crt</parameter>&#160;:</term>
<listitem><simpara> Holds the certificate
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>p</parameter>&#160;:</term>
<listitem><simpara> will hold the p
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>q</parameter>&#160;:</term>
<listitem><simpara> will hold the q
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>g</parameter>&#160;:</term>
<listitem><simpara> will hold the g
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>y</parameter>&#160;:</term>
<listitem><simpara> will hold the y
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> <link linkend="GNUTLS-E-SUCCESS--CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> on success, otherwise an error.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-x509-crt-get-subject-alt-name" role="function">
<title>gnutls_x509_crt_get_subject_alt_name ()</title>
<indexterm zone="gnutls-x509-crt-get-subject-alt-name"><primary sortas="gnutls_x509_crt_get_subject_alt_name">gnutls_x509_crt_get_subject_alt_name</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_x509_crt_get_subject_alt_name
                                                        (<link linkend="gnutls-x509-crt-t">gnutls_x509_crt_t</link> cert,
                                                         unsigned <link linkend="int">int</link> seq,
                                                         <link linkend="void">void</link> *ret,
                                                         <link linkend="size-t">size_t</link> *ret_size,
                                                         unsigned <link linkend="int">int</link> *critical);</programlisting>
<para>
This function will return the alternative names, contained in the
given certificate.
</para>
<para>
This is specified in X509v3 Certificate Extensions.  GNUTLS will
return the Alternative name (2.5.29.17), or a negative error code.
</para>
<para>
When the SAN type is otherName, it will extract the data in the
otherName's value field, and <link linkend="GNUTLS-SAN-OTHERNAME--CAPS"><literal>GNUTLS_SAN_OTHERNAME</literal></link> is returned.
You may use <link linkend="gnutls-x509-crt-get-subject-alt-othername-oid"><function>gnutls_x509_crt_get_subject_alt_othername_oid()</function></link> to get
the corresponding OID and the "virtual" SAN types (e.g.,
<link linkend="GNUTLS-SAN-OTHERNAME-XMPP--CAPS"><literal>GNUTLS_SAN_OTHERNAME_XMPP</literal></link>).
</para>
<para>
If an otherName OID is known, the data will be decoded.  Otherwise
the returned data will be DER encoded, and you will have to decode
it yourself.  Currently, only the RFC 3920 id-on-xmppAddr SAN is
recognized.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>cert</parameter>&#160;:</term>
<listitem><simpara> should contain a <link linkend="gnutls-x509-crt-t"><type>gnutls_x509_crt_t</type></link> structure
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>seq</parameter>&#160;:</term>
<listitem><simpara> specifies the sequence number of the alt name (0 for the first one, 1 for the second etc.)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ret</parameter>&#160;:</term>
<listitem><simpara> is the place where the alternative name will be copied to
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ret_size</parameter>&#160;:</term>
<listitem><simpara> holds the size of ret.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>critical</parameter>&#160;:</term>
<listitem><simpara> will be non zero if the extension is marked as critical (may be null)
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> the alternative subject name type on success, one of the
  enumerated <link linkend="gnutls-x509-subject-alt-name-t"><type>gnutls_x509_subject_alt_name_t</type></link>.  It will return
  <link linkend="GNUTLS-E-SHORT-MEMORY-BUFFER--CAPS"><literal>GNUTLS_E_SHORT_MEMORY_BUFFER</literal></link> if <parameter>ret_size</parameter> is not large enough
  to hold the value.  In that case <parameter>ret_size</parameter> will be updated with
  the required size.  If the certificate does not have an
  Alternative name with the specified sequence number then
  <link linkend="GNUTLS-E-REQUESTED-DATA-NOT-AVAILABLE--CAPS"><literal>GNUTLS_E_REQUESTED_DATA_NOT_AVAILABLE</literal></link> is returned.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-x509-crt-get-subject-alt-name2" role="function">
<title>gnutls_x509_crt_get_subject_alt_name2 ()</title>
<indexterm zone="gnutls-x509-crt-get-subject-alt-name2"><primary sortas="gnutls_x509_crt_get_subject_alt_name2">gnutls_x509_crt_get_subject_alt_name2</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_x509_crt_get_subject_alt_name2
                                                        (<link linkend="gnutls-x509-crt-t">gnutls_x509_crt_t</link> cert,
                                                         unsigned <link linkend="int">int</link> seq,
                                                         <link linkend="void">void</link> *ret,
                                                         <link linkend="size-t">size_t</link> *ret_size,
                                                         unsigned <link linkend="int">int</link> *ret_type,
                                                         unsigned <link linkend="int">int</link> *critical);</programlisting>
<para>
This function will return the alternative names, contained in the
given certificate. It is the same as
<link linkend="gnutls-x509-crt-get-subject-alt-name"><function>gnutls_x509_crt_get_subject_alt_name()</function></link> except for the fact that it
will return the type of the alternative name in <parameter>ret_type</parameter> even if
the function fails for some reason (i.e.  the buffer provided is
not enough).</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>cert</parameter>&#160;:</term>
<listitem><simpara> should contain a <link linkend="gnutls-x509-crt-t"><type>gnutls_x509_crt_t</type></link> structure
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>seq</parameter>&#160;:</term>
<listitem><simpara> specifies the sequence number of the alt name (0 for the first one, 1 for the second etc.)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ret</parameter>&#160;:</term>
<listitem><simpara> is the place where the alternative name will be copied to
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ret_size</parameter>&#160;:</term>
<listitem><simpara> holds the size of ret.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ret_type</parameter>&#160;:</term>
<listitem><simpara> holds the type of the alternative name (one of gnutls_x509_subject_alt_name_t).
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>critical</parameter>&#160;:</term>
<listitem><simpara> will be non zero if the extension is marked as critical (may be null)
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> the alternative subject name type on success, one of the
  enumerated <link linkend="gnutls-x509-subject-alt-name-t"><type>gnutls_x509_subject_alt_name_t</type></link>.  It will return
  <link linkend="GNUTLS-E-SHORT-MEMORY-BUFFER--CAPS"><literal>GNUTLS_E_SHORT_MEMORY_BUFFER</literal></link> if <parameter>ret_size</parameter> is not large enough
  to hold the value.  In that case <parameter>ret_size</parameter> will be updated with
  the required size.  If the certificate does not have an
  Alternative name with the specified sequence number then
  <link linkend="GNUTLS-E-REQUESTED-DATA-NOT-AVAILABLE--CAPS"><literal>GNUTLS_E_REQUESTED_DATA_NOT_AVAILABLE</literal></link> is returned.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-x509-crt-get-subject-alt-othername-oid" role="function">
<title>gnutls_x509_crt_get_subject_alt_othername_oid ()</title>
<indexterm zone="gnutls-x509-crt-get-subject-alt-othername-oid"><primary sortas="gnutls_x509_crt_get_subject_alt_othername_oid">gnutls_x509_crt_get_subject_alt_othername_oid</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_x509_crt_get_subject_alt_othername_oid
                                                        (<link linkend="gnutls-x509-crt-t">gnutls_x509_crt_t</link> cert,
                                                         unsigned <link linkend="int">int</link> seq,
                                                         <link linkend="void">void</link> *ret,
                                                         <link linkend="size-t">size_t</link> *ret_size);</programlisting>
<para>
This function will extract the type OID of an otherName Subject
Alternative Name, contained in the given certificate, and return
the type as an enumerated element.
</para>
<para>
This function is only useful if
<link linkend="gnutls-x509-crt-get-subject-alt-name"><function>gnutls_x509_crt_get_subject_alt_name()</function></link> returned
<link linkend="GNUTLS-SAN-OTHERNAME--CAPS"><literal>GNUTLS_SAN_OTHERNAME</literal></link>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>cert</parameter>&#160;:</term>
<listitem><simpara> should contain a <link linkend="gnutls-x509-crt-t"><type>gnutls_x509_crt_t</type></link> structure
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>seq</parameter>&#160;:</term>
<listitem><simpara> specifies the sequence number of the alt name (0 for the first one, 1 for the second etc.)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ret</parameter>&#160;:</term>
<listitem><simpara> is the place where the otherName OID will be copied to
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ret_size</parameter>&#160;:</term>
<listitem><simpara> holds the size of ret.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> the alternative subject name type on success, one of the
enumerated gnutls_x509_subject_alt_name_t.  For supported OIDs, it
will return one of the virtual (GNUTLS_SAN_OTHERNAME_*) types,
e.g. <link linkend="GNUTLS-SAN-OTHERNAME-XMPP--CAPS"><literal>GNUTLS_SAN_OTHERNAME_XMPP</literal></link>, and <link linkend="GNUTLS-SAN-OTHERNAME--CAPS"><literal>GNUTLS_SAN_OTHERNAME</literal></link> for
unknown OIDs.  It will return <link linkend="GNUTLS-E-SHORT-MEMORY-BUFFER--CAPS"><literal>GNUTLS_E_SHORT_MEMORY_BUFFER</literal></link> if
<parameter>ret_size</parameter> is not large enough to hold the value.  In that case
<parameter>ret_size</parameter> will be updated with the required size.  If the
certificate does not have an Alternative name with the specified
sequence number and with the otherName type then
<link linkend="GNUTLS-E-REQUESTED-DATA-NOT-AVAILABLE--CAPS"><literal>GNUTLS_E_REQUESTED_DATA_NOT_AVAILABLE</literal></link> is returned.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-x509-crt-get-ca-status" role="function">
<title>gnutls_x509_crt_get_ca_status ()</title>
<indexterm zone="gnutls-x509-crt-get-ca-status"><primary sortas="gnutls_x509_crt_get_ca_status">gnutls_x509_crt_get_ca_status</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_x509_crt_get_ca_status       (<link linkend="gnutls-x509-crt-t">gnutls_x509_crt_t</link> cert,
                                                         unsigned <link linkend="int">int</link> *critical);</programlisting>
<para>
This function will return certificates CA status, by reading the
basicConstraints X.509 extension (2.5.29.19). If the certificate is
a CA a positive value will be returned, or zero if the certificate
does not have CA flag set.
</para>
<para>
Use <link linkend="gnutls-x509-crt-get-basic-constraints"><function>gnutls_x509_crt_get_basic_constraints()</function></link> if you want to read the
pathLenConstraint field too.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>cert</parameter>&#160;:</term>
<listitem><simpara> should contain a <link linkend="gnutls-x509-crt-t"><type>gnutls_x509_crt_t</type></link> structure
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>critical</parameter>&#160;:</term>
<listitem><simpara> will be non zero if the extension is marked as critical
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> A negative value may be returned in case of parsing error.
If the certificate does not contain the basicConstraints extension
<link linkend="GNUTLS-E-REQUESTED-DATA-NOT-AVAILABLE--CAPS"><literal>GNUTLS_E_REQUESTED_DATA_NOT_AVAILABLE</literal></link> will be returned.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-x509-crt-get-basic-constraints" role="function">
<title>gnutls_x509_crt_get_basic_constraints ()</title>
<indexterm zone="gnutls-x509-crt-get-basic-constraints"><primary sortas="gnutls_x509_crt_get_basic_constraints">gnutls_x509_crt_get_basic_constraints</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_x509_crt_get_basic_constraints
                                                        (<link linkend="gnutls-x509-crt-t">gnutls_x509_crt_t</link> cert,
                                                         unsigned <link linkend="int">int</link> *critical,
                                                         <link linkend="int">int</link> *ca,
                                                         <link linkend="int">int</link> *pathlen);</programlisting>
<para>
This function will read the certificate's basic constraints, and
return the certificates CA status.  It reads the basicConstraints
X.509 extension (2.5.29.19).</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>cert</parameter>&#160;:</term>
<listitem><simpara> should contain a <link linkend="gnutls-x509-crt-t"><type>gnutls_x509_crt_t</type></link> structure
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>critical</parameter>&#160;:</term>
<listitem><simpara> will be non zero if the extension is marked as critical
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ca</parameter>&#160;:</term>
<listitem><simpara> pointer to output integer indicating CA status, may be NULL,
  value is 1 if the certificate CA flag is set, 0 otherwise.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>pathlen</parameter>&#160;:</term>
<listitem><simpara> pointer to output integer indicating path length (may be
  NULL), non-negative values indicate a present pathLenConstraint
  field and the actual value, -1 indicate that the field is absent.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> If the certificate is a CA a positive value will be
returned, or zero if the certificate does not have CA flag set.  A
negative value may be returned in case of errors.  If the
certificate does not contain the basicConstraints extension
GNUTLS_E_REQUESTED_DATA_NOT_AVAILABLE will be returned.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-x509-crt-get-key-usage" role="function">
<title>gnutls_x509_crt_get_key_usage ()</title>
<indexterm zone="gnutls-x509-crt-get-key-usage"><primary sortas="gnutls_x509_crt_get_key_usage">gnutls_x509_crt_get_key_usage</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_x509_crt_get_key_usage       (<link linkend="gnutls-x509-crt-t">gnutls_x509_crt_t</link> cert,
                                                         unsigned <link linkend="int">int</link> *key_usage,
                                                         unsigned <link linkend="int">int</link> *critical);</programlisting>
<para>
This function will return certificate's key usage, by reading the
keyUsage X.509 extension (2.5.29.15). The key usage value will
ORed values of the: <link linkend="GNUTLS-KEY-DIGITAL-SIGNATURE--CAPS"><literal>GNUTLS_KEY_DIGITAL_SIGNATURE</literal></link>,
<link linkend="GNUTLS-KEY-NON-REPUDIATION--CAPS"><literal>GNUTLS_KEY_NON_REPUDIATION</literal></link>, <link linkend="GNUTLS-KEY-KEY-ENCIPHERMENT--CAPS"><literal>GNUTLS_KEY_KEY_ENCIPHERMENT</literal></link>,
<link linkend="GNUTLS-KEY-DATA-ENCIPHERMENT--CAPS"><literal>GNUTLS_KEY_DATA_ENCIPHERMENT</literal></link>, <link linkend="GNUTLS-KEY-KEY-AGREEMENT--CAPS"><literal>GNUTLS_KEY_KEY_AGREEMENT</literal></link>,
<link linkend="GNUTLS-KEY-KEY-CERT-SIGN--CAPS"><literal>GNUTLS_KEY_KEY_CERT_SIGN</literal></link>, <link linkend="GNUTLS-KEY-CRL-SIGN--CAPS"><literal>GNUTLS_KEY_CRL_SIGN</literal></link>,
<link linkend="GNUTLS-KEY-ENCIPHER-ONLY--CAPS"><literal>GNUTLS_KEY_ENCIPHER_ONLY</literal></link>, <link linkend="GNUTLS-KEY-DECIPHER-ONLY--CAPS"><literal>GNUTLS_KEY_DECIPHER_ONLY</literal></link>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>cert</parameter>&#160;:</term>
<listitem><simpara> should contain a <link linkend="gnutls-x509-crt-t"><type>gnutls_x509_crt_t</type></link> structure
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>key_usage</parameter>&#160;:</term>
<listitem><simpara> where the key usage bits will be stored
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>critical</parameter>&#160;:</term>
<listitem><simpara> will be non zero if the extension is marked as critical
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> the certificate key usage, or a negative value in case of
parsing error.  If the certificate does not contain the keyUsage
extension <link linkend="GNUTLS-E-REQUESTED-DATA-NOT-AVAILABLE--CAPS"><literal>GNUTLS_E_REQUESTED_DATA_NOT_AVAILABLE</literal></link> will be returned.

</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-x509-crt-set-key-usage" role="function">
<title>gnutls_x509_crt_set_key_usage ()</title>
<indexterm zone="gnutls-x509-crt-set-key-usage"><primary sortas="gnutls_x509_crt_set_key_usage">gnutls_x509_crt_set_key_usage</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_x509_crt_set_key_usage       (<link linkend="gnutls-x509-crt-t">gnutls_x509_crt_t</link> crt,
                                                         unsigned <link linkend="int">int</link> usage);</programlisting>
<para>
This function will set the keyUsage certificate extension.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>crt</parameter>&#160;:</term>
<listitem><simpara> a certificate of type <link linkend="gnutls-x509-crt-t"><type>gnutls_x509_crt_t</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>usage</parameter>&#160;:</term>
<listitem><simpara> an ORed sequence of the GNUTLS_KEY_* elements.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> On success, <link linkend="GNUTLS-E-SUCCESS--CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> is returned, otherwise a
  negative error value.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-x509-crt-get-proxy" role="function">
<title>gnutls_x509_crt_get_proxy ()</title>
<indexterm zone="gnutls-x509-crt-get-proxy"><primary sortas="gnutls_x509_crt_get_proxy">gnutls_x509_crt_get_proxy</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_x509_crt_get_proxy           (<link linkend="gnutls-x509-crt-t">gnutls_x509_crt_t</link> cert,
                                                         unsigned <link linkend="int">int</link> *critical,
                                                         <link linkend="int">int</link> *pathlen,
                                                         <link linkend="char">char</link> **policyLanguage,
                                                         <link linkend="char">char</link> **policy,
                                                         <link linkend="size-t">size_t</link> *sizeof_policy);</programlisting>
<para>
This function will get information from a proxy certificate.  It
reads the ProxyCertInfo X.509 extension (1.3.6.1.5.5.7.1.14).</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>cert</parameter>&#160;:</term>
<listitem><simpara> should contain a <link linkend="gnutls-x509-crt-t"><type>gnutls_x509_crt_t</type></link> structure
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>critical</parameter>&#160;:</term>
<listitem><simpara> will be non zero if the extension is marked as critical
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>pathlen</parameter>&#160;:</term>
<listitem><simpara> pointer to output integer indicating path length (may be
  NULL), non-negative values indicate a present pCPathLenConstraint
  field and the actual value, -1 indicate that the field is absent.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>policyLanguage</parameter>&#160;:</term>
<listitem><simpara> output variable with OID of policy language
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>policy</parameter>&#160;:</term>
<listitem><simpara> output variable with policy data
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>sizeof_policy</parameter>&#160;:</term>
<listitem><simpara> output variable size of policy data
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> On success, <link linkend="GNUTLS-E-SUCCESS--CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> (zero) is returned,
  otherwise an error code is returned.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-x509-dn-oid-known" role="function">
<title>gnutls_x509_dn_oid_known ()</title>
<indexterm zone="gnutls-x509-dn-oid-known"><primary sortas="gnutls_x509_dn_oid_known">gnutls_x509_dn_oid_known</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_x509_dn_oid_known            (const <link linkend="char">char</link> *oid);</programlisting>
<para>
This function will inform about known DN OIDs. This is useful since
functions like <link linkend="gnutls-x509-crt-set-dn-by-oid"><function>gnutls_x509_crt_set_dn_by_oid()</function></link> use the information
on known OIDs to properly encode their input. Object Identifiers
that are not known are not encoded by these functions, and their
input is stored directly into the ASN.1 structure. In that case of
unknown OIDs, you have the responsibility of DER encoding your
data.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>oid</parameter>&#160;:</term>
<listitem><simpara> holds an Object Identifier in a null terminated string
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> 1 on known OIDs and 0 otherwise.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-x509-crt-get-extension-oid" role="function">
<title>gnutls_x509_crt_get_extension_oid ()</title>
<indexterm zone="gnutls-x509-crt-get-extension-oid"><primary sortas="gnutls_x509_crt_get_extension_oid">gnutls_x509_crt_get_extension_oid</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_x509_crt_get_extension_oid   (<link linkend="gnutls-x509-crt-t">gnutls_x509_crt_t</link> cert,
                                                         <link linkend="int">int</link> indx,
                                                         <link linkend="void">void</link> *oid,
                                                         <link linkend="size-t">size_t</link> *sizeof_oid);</programlisting>
<para>
This function will return the requested extension OID in the certificate.
The extension OID will be stored as a string in the provided buffer.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>cert</parameter>&#160;:</term>
<listitem><simpara> should contain a <link linkend="gnutls-x509-crt-t"><type>gnutls_x509_crt_t</type></link> structure
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>indx</parameter>&#160;:</term>
<listitem><simpara> Specifies which extension OID to send. Use zero to get the first one.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>oid</parameter>&#160;:</term>
<listitem><simpara> a pointer to a structure to hold the OID (may be null)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>sizeof_oid</parameter>&#160;:</term>
<listitem><simpara> initially holds the size of <parameter>oid</parameter>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> On success, <link linkend="GNUTLS-E-SUCCESS--CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> (zero) is returned,
  otherwise an error code is returned.  If you have reached the
  last extension available <link linkend="GNUTLS-E-REQUESTED-DATA-NOT-AVAILABLE--CAPS"><literal>GNUTLS_E_REQUESTED_DATA_NOT_AVAILABLE</literal></link>
  will be returned.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-x509-crt-get-extension-by-oid" role="function">
<title>gnutls_x509_crt_get_extension_by_oid ()</title>
<indexterm zone="gnutls-x509-crt-get-extension-by-oid"><primary sortas="gnutls_x509_crt_get_extension_by_oid">gnutls_x509_crt_get_extension_by_oid</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_x509_crt_get_extension_by_oid
                                                        (<link linkend="gnutls-x509-crt-t">gnutls_x509_crt_t</link> cert,
                                                         const <link linkend="char">char</link> *oid,
                                                         <link linkend="int">int</link> indx,
                                                         <link linkend="void">void</link> *buf,
                                                         <link linkend="size-t">size_t</link> *sizeof_buf,
                                                         unsigned <link linkend="int">int</link> *critical);</programlisting>
<para>
This function will return the extension specified by the OID in the
certificate.  The extensions will be returned as binary data DER
encoded, in the provided buffer.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>cert</parameter>&#160;:</term>
<listitem><simpara> should contain a <link linkend="gnutls-x509-crt-t"><type>gnutls_x509_crt_t</type></link> structure
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>oid</parameter>&#160;:</term>
<listitem><simpara> holds an Object Identified in null terminated string
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>indx</parameter>&#160;:</term>
<listitem><simpara> In case multiple same OIDs exist in the extensions, this specifies which to send. Use zero to get the first one.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>buf</parameter>&#160;:</term>
<listitem><simpara> a pointer to a structure to hold the name (may be null)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>sizeof_buf</parameter>&#160;:</term>
<listitem><simpara> initially holds the size of <parameter>buf</parameter>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>critical</parameter>&#160;:</term>
<listitem><simpara> will be non zero if the extension is marked as critical
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> On success, <link linkend="GNUTLS-E-SUCCESS--CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> (zero) is returned,
  otherwise an error code is returned. If the certificate does not
  contain the specified extension
  GNUTLS_E_REQUESTED_DATA_NOT_AVAILABLE will be returned.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-x509-crt-get-extension-info" role="function">
<title>gnutls_x509_crt_get_extension_info ()</title>
<indexterm zone="gnutls-x509-crt-get-extension-info"><primary sortas="gnutls_x509_crt_get_extension_info">gnutls_x509_crt_get_extension_info</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_x509_crt_get_extension_info  (<link linkend="gnutls-x509-crt-t">gnutls_x509_crt_t</link> cert,
                                                         <link linkend="int">int</link> indx,
                                                         <link linkend="void">void</link> *oid,
                                                         <link linkend="size-t">size_t</link> *sizeof_oid,
                                                         <link linkend="int">int</link> *critical);</programlisting>
<para>
This function will return the requested extension OID in the
certificate, and the critical flag for it.  The extension OID will
be stored as a string in the provided buffer.  Use
<link linkend="gnutls-x509-crt-get-extension-data"><function>gnutls_x509_crt_get_extension_data()</function></link> to extract the data.
</para>
<para>
If the buffer provided is not long enough to hold the output, then
*<parameter>sizeof_oid</parameter> is updated and <link linkend="GNUTLS-E-SHORT-MEMORY-BUFFER--CAPS"><literal>GNUTLS_E_SHORT_MEMORY_BUFFER</literal></link> will be
returned.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>cert</parameter>&#160;:</term>
<listitem><simpara> should contain a <link linkend="gnutls-x509-crt-t"><type>gnutls_x509_crt_t</type></link> structure
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>indx</parameter>&#160;:</term>
<listitem><simpara> Specifies which extension OID to send. Use zero to get the first one.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>oid</parameter>&#160;:</term>
<listitem><simpara> a pointer to a structure to hold the OID
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>sizeof_oid</parameter>&#160;:</term>
<listitem><simpara> initially holds the maximum size of <parameter>oid</parameter>, on return
  holds actual size of <parameter>oid</parameter>.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>critical</parameter>&#160;:</term>
<listitem><simpara> output variable with critical flag, may be NULL.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> On success, <link linkend="GNUTLS-E-SUCCESS--CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> (zero) is returned,
  otherwise an error code is returned.  If you have reached the
  last extension available <link linkend="GNUTLS-E-REQUESTED-DATA-NOT-AVAILABLE--CAPS"><literal>GNUTLS_E_REQUESTED_DATA_NOT_AVAILABLE</literal></link>
  will be returned.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-x509-crt-get-extension-data" role="function">
<title>gnutls_x509_crt_get_extension_data ()</title>
<indexterm zone="gnutls-x509-crt-get-extension-data"><primary sortas="gnutls_x509_crt_get_extension_data">gnutls_x509_crt_get_extension_data</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_x509_crt_get_extension_data  (<link linkend="gnutls-x509-crt-t">gnutls_x509_crt_t</link> cert,
                                                         <link linkend="int">int</link> indx,
                                                         <link linkend="void">void</link> *data,
                                                         <link linkend="size-t">size_t</link> *sizeof_data);</programlisting>
<para>
This function will return the requested extension data in the
certificate.  The extension data will be stored as a string in the
provided buffer.
</para>
<para>
Use <link linkend="gnutls-x509-crt-get-extension-info"><function>gnutls_x509_crt_get_extension_info()</function></link> to extract the OID and
critical flag.  Use <link linkend="gnutls-x509-crt-get-extension-by-oid"><function>gnutls_x509_crt_get_extension_by_oid()</function></link> instead,
if you want to get data indexed by the extension OID rather than
sequence.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>cert</parameter>&#160;:</term>
<listitem><simpara> should contain a <link linkend="gnutls-x509-crt-t"><type>gnutls_x509_crt_t</type></link> structure
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>indx</parameter>&#160;:</term>
<listitem><simpara> Specifies which extension OID to send. Use zero to get the first one.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>data</parameter>&#160;:</term>
<listitem><simpara> a pointer to a structure to hold the data (may be null)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>sizeof_data</parameter>&#160;:</term>
<listitem><simpara> initially holds the size of <parameter>oid</parameter>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> On success, <link linkend="GNUTLS-E-SUCCESS--CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> (zero) is returned,
  otherwise an error code is returned.  If you have reached the
  last extension available <link linkend="GNUTLS-E-REQUESTED-DATA-NOT-AVAILABLE--CAPS"><literal>GNUTLS_E_REQUESTED_DATA_NOT_AVAILABLE</literal></link>
  will be returned.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-x509-crt-set-extension-by-oid" role="function">
<title>gnutls_x509_crt_set_extension_by_oid ()</title>
<indexterm zone="gnutls-x509-crt-set-extension-by-oid"><primary sortas="gnutls_x509_crt_set_extension_by_oid">gnutls_x509_crt_set_extension_by_oid</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_x509_crt_set_extension_by_oid
                                                        (<link linkend="gnutls-x509-crt-t">gnutls_x509_crt_t</link> crt,
                                                         const <link linkend="char">char</link> *oid,
                                                         const <link linkend="void">void</link> *buf,
                                                         <link linkend="size-t">size_t</link> sizeof_buf,
                                                         unsigned <link linkend="int">int</link> critical);</programlisting>
<para>
This function will set an the extension, by the specified OID, in
the certificate.  The extension data should be binary data DER
encoded.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>crt</parameter>&#160;:</term>
<listitem><simpara> a certificate of type <link linkend="gnutls-x509-crt-t"><type>gnutls_x509_crt_t</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>oid</parameter>&#160;:</term>
<listitem><simpara> holds an Object Identified in null terminated string
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>buf</parameter>&#160;:</term>
<listitem><simpara> a pointer to a DER encoded data
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>sizeof_buf</parameter>&#160;:</term>
<listitem><simpara> holds the size of <parameter>buf</parameter>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>critical</parameter>&#160;:</term>
<listitem><simpara> should be non zero if the extension is to be marked as critical
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> On success, <link linkend="GNUTLS-E-SUCCESS--CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> is returned, otherwise a
  negative error value.and a negative value in case of an error.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-x509-crt-set-dn-by-oid" role="function">
<title>gnutls_x509_crt_set_dn_by_oid ()</title>
<indexterm zone="gnutls-x509-crt-set-dn-by-oid"><primary sortas="gnutls_x509_crt_set_dn_by_oid">gnutls_x509_crt_set_dn_by_oid</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_x509_crt_set_dn_by_oid       (<link linkend="gnutls-x509-crt-t">gnutls_x509_crt_t</link> crt,
                                                         const <link linkend="char">char</link> *oid,
                                                         unsigned <link linkend="int">int</link> raw_flag,
                                                         const <link linkend="void">void</link> *name,
                                                         unsigned <link linkend="int">int</link> sizeof_name);</programlisting>
<para>
This function will set the part of the name of the Certificate
subject, specified by the given OID. The input string should be
ASCII or UTF-8 encoded.
</para>
<para>
Some helper macros with popular OIDs can be found in gnutls/x509.h
With this function you can only set the known OIDs. You can test
for known OIDs using <link linkend="gnutls-x509-dn-oid-known"><function>gnutls_x509_dn_oid_known()</function></link>. For OIDs that are
not known (by gnutls) you should properly DER encode your data,
and call this function with <parameter>raw_flag</parameter> set.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>crt</parameter>&#160;:</term>
<listitem><simpara> a certificate of type <link linkend="gnutls-x509-crt-t"><type>gnutls_x509_crt_t</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>oid</parameter>&#160;:</term>
<listitem><simpara> holds an Object Identifier in a null terminated string
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>raw_flag</parameter>&#160;:</term>
<listitem><simpara> must be 0, or 1 if the data are DER encoded
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>name</parameter>&#160;:</term>
<listitem><simpara> a pointer to the name
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>sizeof_name</parameter>&#160;:</term>
<listitem><simpara> holds the size of <parameter>name</parameter>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> On success, <link linkend="GNUTLS-E-SUCCESS--CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> is returned, otherwise a
  negative error value.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-x509-crt-set-issuer-dn-by-oid" role="function">
<title>gnutls_x509_crt_set_issuer_dn_by_oid ()</title>
<indexterm zone="gnutls-x509-crt-set-issuer-dn-by-oid"><primary sortas="gnutls_x509_crt_set_issuer_dn_by_oid">gnutls_x509_crt_set_issuer_dn_by_oid</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_x509_crt_set_issuer_dn_by_oid
                                                        (<link linkend="gnutls-x509-crt-t">gnutls_x509_crt_t</link> crt,
                                                         const <link linkend="char">char</link> *oid,
                                                         unsigned <link linkend="int">int</link> raw_flag,
                                                         const <link linkend="void">void</link> *name,
                                                         unsigned <link linkend="int">int</link> sizeof_name);</programlisting>
<para>
This function will set the part of the name of the Certificate
issuer, specified by the given OID.  The input string should be
ASCII or UTF-8 encoded.
</para>
<para>
Some helper macros with popular OIDs can be found in gnutls/x509.h
With this function you can only set the known OIDs. You can test
for known OIDs using <link linkend="gnutls-x509-dn-oid-known"><function>gnutls_x509_dn_oid_known()</function></link>. For OIDs that are
not known (by gnutls) you should properly DER encode your data,
and call this function with <parameter>raw_flag</parameter> set.
</para>
<para>
Normally you do not need to call this function, since the signing
operation will copy the signer's name as the issuer of the
certificate.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>crt</parameter>&#160;:</term>
<listitem><simpara> a certificate of type <link linkend="gnutls-x509-crt-t"><type>gnutls_x509_crt_t</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>oid</parameter>&#160;:</term>
<listitem><simpara> holds an Object Identifier in a null terminated string
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>raw_flag</parameter>&#160;:</term>
<listitem><simpara> must be 0, or 1 if the data are DER encoded
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>name</parameter>&#160;:</term>
<listitem><simpara> a pointer to the name
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>sizeof_name</parameter>&#160;:</term>
<listitem><simpara> holds the size of <parameter>name</parameter>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> On success, <link linkend="GNUTLS-E-SUCCESS--CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> is returned, otherwise a
  negative error value.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-x509-crt-set-version" role="function">
<title>gnutls_x509_crt_set_version ()</title>
<indexterm zone="gnutls-x509-crt-set-version"><primary sortas="gnutls_x509_crt_set_version">gnutls_x509_crt_set_version</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_x509_crt_set_version         (<link linkend="gnutls-x509-crt-t">gnutls_x509_crt_t</link> crt,
                                                         unsigned <link linkend="int">int</link> version);</programlisting>
<para>
This function will set the version of the certificate.  This must
be one for X.509 version 1, and so on.  Plain certificates without
extensions must have version set to one.
</para>
<para>
To create well-formed certificates, you must specify version 3 if
you use any certificate extensions.  Extensions are created by
functions such as <link linkend="gnutls-x509-crt-set-subject-alt-name"><function>gnutls_x509_crt_set_subject_alt_name()</function></link>
or <link linkend="gnutls-x509-crt-set-key-usage"><function>gnutls_x509_crt_set_key_usage()</function></link>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>crt</parameter>&#160;:</term>
<listitem><simpara> a certificate of type <link linkend="gnutls-x509-crt-t"><type>gnutls_x509_crt_t</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>version</parameter>&#160;:</term>
<listitem><simpara> holds the version number. For X.509v1 certificates must be 1.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> On success, <link linkend="GNUTLS-E-SUCCESS--CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> is returned, otherwise a
  negative error value.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-x509-crt-set-key" role="function">
<title>gnutls_x509_crt_set_key ()</title>
<indexterm zone="gnutls-x509-crt-set-key"><primary sortas="gnutls_x509_crt_set_key">gnutls_x509_crt_set_key</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_x509_crt_set_key             (<link linkend="gnutls-x509-crt-t">gnutls_x509_crt_t</link> crt,
                                                         <link linkend="gnutls-x509-privkey-t">gnutls_x509_privkey_t</link> key);</programlisting>
<para>
This function will set the public parameters from the given
private key to the certificate. Only RSA keys are currently
supported.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>crt</parameter>&#160;:</term>
<listitem><simpara> a certificate of type <link linkend="gnutls-x509-crt-t"><type>gnutls_x509_crt_t</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>key</parameter>&#160;:</term>
<listitem><simpara> holds a private key
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> On success, <link linkend="GNUTLS-E-SUCCESS--CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> is returned, otherwise a
  negative error value.

</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-x509-crt-set-ca-status" role="function">
<title>gnutls_x509_crt_set_ca_status ()</title>
<indexterm zone="gnutls-x509-crt-set-ca-status"><primary sortas="gnutls_x509_crt_set_ca_status">gnutls_x509_crt_set_ca_status</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_x509_crt_set_ca_status       (<link linkend="gnutls-x509-crt-t">gnutls_x509_crt_t</link> crt,
                                                         unsigned <link linkend="int">int</link> ca);</programlisting>
<para>
This function will set the basicConstraints certificate extension.
Use <link linkend="gnutls-x509-crt-set-basic-constraints"><function>gnutls_x509_crt_set_basic_constraints()</function></link> if you want to control
the pathLenConstraint field too.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>crt</parameter>&#160;:</term>
<listitem><simpara> a certificate of type <link linkend="gnutls-x509-crt-t"><type>gnutls_x509_crt_t</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ca</parameter>&#160;:</term>
<listitem><simpara> true(1) or false(0). Depending on the Certificate authority status.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> On success, <link linkend="GNUTLS-E-SUCCESS--CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> is returned, otherwise a
  negative error value.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-x509-crt-set-basic-constraints" role="function">
<title>gnutls_x509_crt_set_basic_constraints ()</title>
<indexterm zone="gnutls-x509-crt-set-basic-constraints"><primary sortas="gnutls_x509_crt_set_basic_constraints">gnutls_x509_crt_set_basic_constraints</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_x509_crt_set_basic_constraints
                                                        (<link linkend="gnutls-x509-crt-t">gnutls_x509_crt_t</link> crt,
                                                         unsigned <link linkend="int">int</link> ca,
                                                         <link linkend="int">int</link> pathLenConstraint);</programlisting>
<para>
This function will set the basicConstraints certificate extension.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>crt</parameter>&#160;:</term>
<listitem><simpara> a certificate of type <link linkend="gnutls-x509-crt-t"><type>gnutls_x509_crt_t</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ca</parameter>&#160;:</term>
<listitem><simpara> true(1) or false(0). Depending on the Certificate authority status.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>pathLenConstraint</parameter>&#160;:</term>
<listitem><simpara> non-negative values indicate maximum length of path,
  and negative values indicate that the pathLenConstraints field should
  not be present.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> On success, <link linkend="GNUTLS-E-SUCCESS--CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> is returned, otherwise a
  negative error value.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-x509-crt-set-subject-alternative-name" role="function">
<title>gnutls_x509_crt_set_subject_alternative_name ()</title>
<indexterm zone="gnutls-x509-crt-set-subject-alternative-name"><primary sortas="gnutls_x509_crt_set_subject_alternative_name">gnutls_x509_crt_set_subject_alternative_name</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_x509_crt_set_subject_alternative_name
                                                        (<link linkend="gnutls-x509-crt-t">gnutls_x509_crt_t</link> crt,
                                                         <link linkend="gnutls-x509-subject-alt-name-t">gnutls_x509_subject_alt_name_t</link> type,
                                                         const <link linkend="char">char</link> *data_string);</programlisting>
<para>
This function will set the subject alternative name certificate
extension. This function assumes that data can be expressed as a null
terminated string.
</para>
<para>
The name of the function is unfortunate since it is incosistent with
<link linkend="gnutls-x509-crt-get-subject-alt-name"><function>gnutls_x509_crt_get_subject_alt_name()</function></link>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>crt</parameter>&#160;:</term>
<listitem><simpara> a certificate of type <link linkend="gnutls-x509-crt-t"><type>gnutls_x509_crt_t</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>type</parameter>&#160;:</term>
<listitem><simpara> is one of the gnutls_x509_subject_alt_name_t enumerations
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>data_string</parameter>&#160;:</term>
<listitem><simpara> The data to be set, a zero terminated string
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> On success, <link linkend="GNUTLS-E-SUCCESS--CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> is returned, otherwise a
  negative error value.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-x509-crt-set-subject-alt-name" role="function" condition="since:2.6.0">
<title>gnutls_x509_crt_set_subject_alt_name ()</title>
<indexterm zone="gnutls-x509-crt-set-subject-alt-name" role="2.6.0"><primary sortas="gnutls_x509_crt_set_subject_alt_name">gnutls_x509_crt_set_subject_alt_name</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_x509_crt_set_subject_alt_name
                                                        (<link linkend="gnutls-x509-crt-t">gnutls_x509_crt_t</link> crt,
                                                         <link linkend="gnutls-x509-subject-alt-name-t">gnutls_x509_subject_alt_name_t</link> type,
                                                         const <link linkend="void">void</link> *data,
                                                         unsigned <link linkend="int">int</link> data_size,
                                                         unsigned <link linkend="int">int</link> flags);</programlisting>
<para>
This function will set the subject alternative name certificate
extension. It can set the following types:
</para>
<para>
&amp;GNUTLS_SAN_DNSNAME: as a text string
</para>
<para>
&amp;GNUTLS_SAN_RFC822NAME: as a text string
</para>
<para>
&amp;GNUTLS_SAN_URI: as a text string
</para>
<para>
&amp;GNUTLS_SAN_IPADDRESS: as a binary IP address (4 or 16 bytes)
</para>
<para>
Other values can be set as binary values with the proper DER encoding.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>crt</parameter>&#160;:</term>
<listitem><simpara> a certificate of type <link linkend="gnutls-x509-crt-t"><type>gnutls_x509_crt_t</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>type</parameter>&#160;:</term>
<listitem><simpara> is one of the gnutls_x509_subject_alt_name_t enumerations
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>data</parameter>&#160;:</term>
<listitem><simpara> The data to be set
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>data_size</parameter>&#160;:</term>
<listitem><simpara> The size of data to be set
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>flags</parameter>&#160;:</term>
<listitem><simpara> GNUTLS_FSAN_SET to clear previous data or GNUTLS_FSAN_APPEND to append. 
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> On success, <link linkend="GNUTLS-E-SUCCESS--CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> is returned, otherwise a
  negative error value.

</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 2.6.0</para></refsect2>
<refsect2 id="gnutls-x509-crt-sign" role="function">
<title>gnutls_x509_crt_sign ()</title>
<indexterm zone="gnutls-x509-crt-sign"><primary sortas="gnutls_x509_crt_sign">gnutls_x509_crt_sign</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_x509_crt_sign                (<link linkend="gnutls-x509-crt-t">gnutls_x509_crt_t</link> crt,
                                                         <link linkend="gnutls-x509-crt-t">gnutls_x509_crt_t</link> issuer,
                                                         <link linkend="gnutls-x509-privkey-t">gnutls_x509_privkey_t</link> issuer_key);</programlisting>
<para>
This function is the same a <link linkend="gnutls-x509-crt-sign2"><function>gnutls_x509_crt_sign2()</function></link> with no flags,
and SHA1 as the hash algorithm.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>crt</parameter>&#160;:</term>
<listitem><simpara> a certificate of type <link linkend="gnutls-x509-crt-t"><type>gnutls_x509_crt_t</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>issuer</parameter>&#160;:</term>
<listitem><simpara> is the certificate of the certificate issuer
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>issuer_key</parameter>&#160;:</term>
<listitem><simpara> holds the issuer's private key
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> On success, <link linkend="GNUTLS-E-SUCCESS--CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> is returned, otherwise a
  negative error value.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-x509-crt-sign2" role="function">
<title>gnutls_x509_crt_sign2 ()</title>
<indexterm zone="gnutls-x509-crt-sign2"><primary sortas="gnutls_x509_crt_sign2">gnutls_x509_crt_sign2</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_x509_crt_sign2               (<link linkend="gnutls-x509-crt-t">gnutls_x509_crt_t</link> crt,
                                                         <link linkend="gnutls-x509-crt-t">gnutls_x509_crt_t</link> issuer,
                                                         <link linkend="gnutls-x509-privkey-t">gnutls_x509_privkey_t</link> issuer_key,
                                                         <link linkend="gnutls-digest-algorithm-t">gnutls_digest_algorithm_t</link> dig,
                                                         unsigned <link linkend="int">int</link> flags);</programlisting>
<para>
This function will sign the certificate with the issuer's private key, and
will copy the issuer's information into the certificate.
</para>
<para>
This must be the last step in a certificate generation since all
the previously set parameters are now signed.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>crt</parameter>&#160;:</term>
<listitem><simpara> a certificate of type <link linkend="gnutls-x509-crt-t"><type>gnutls_x509_crt_t</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>issuer</parameter>&#160;:</term>
<listitem><simpara> is the certificate of the certificate issuer
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>issuer_key</parameter>&#160;:</term>
<listitem><simpara> holds the issuer's private key
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>dig</parameter>&#160;:</term>
<listitem><simpara> The message digest to use, <link linkend="GNUTLS-DIG-SHA1--CAPS"><literal>GNUTLS_DIG_SHA1</literal></link> is a safe choice
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>flags</parameter>&#160;:</term>
<listitem><simpara> must be 0
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> On success, <link linkend="GNUTLS-E-SUCCESS--CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> is returned, otherwise a
  negative error value.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-x509-crt-set-activation-time" role="function">
<title>gnutls_x509_crt_set_activation_time ()</title>
<indexterm zone="gnutls-x509-crt-set-activation-time"><primary sortas="gnutls_x509_crt_set_activation_time">gnutls_x509_crt_set_activation_time</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_x509_crt_set_activation_time (<link linkend="gnutls-x509-crt-t">gnutls_x509_crt_t</link> cert,
                                                         <link linkend="time-t">time_t</link> act_time);</programlisting>
<para>
This function will set the time this Certificate was or will be
activated.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>cert</parameter>&#160;:</term>
<listitem><simpara> a certificate of type <link linkend="gnutls-x509-crt-t"><type>gnutls_x509_crt_t</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>act_time</parameter>&#160;:</term>
<listitem><simpara> The actual time
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> On success, <link linkend="GNUTLS-E-SUCCESS--CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> is returned, otherwise a
  negative error value.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-x509-crt-set-expiration-time" role="function">
<title>gnutls_x509_crt_set_expiration_time ()</title>
<indexterm zone="gnutls-x509-crt-set-expiration-time"><primary sortas="gnutls_x509_crt_set_expiration_time">gnutls_x509_crt_set_expiration_time</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_x509_crt_set_expiration_time (<link linkend="gnutls-x509-crt-t">gnutls_x509_crt_t</link> cert,
                                                         <link linkend="time-t">time_t</link> exp_time);</programlisting>
<para>
This function will set the time this Certificate will expire.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>cert</parameter>&#160;:</term>
<listitem><simpara> a certificate of type <link linkend="gnutls-x509-crt-t"><type>gnutls_x509_crt_t</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>exp_time</parameter>&#160;:</term>
<listitem><simpara> The actual time
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> On success, <link linkend="GNUTLS-E-SUCCESS--CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> is returned, otherwise a
  negative error value.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-x509-crt-set-serial" role="function">
<title>gnutls_x509_crt_set_serial ()</title>
<indexterm zone="gnutls-x509-crt-set-serial"><primary sortas="gnutls_x509_crt_set_serial">gnutls_x509_crt_set_serial</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_x509_crt_set_serial          (<link linkend="gnutls-x509-crt-t">gnutls_x509_crt_t</link> cert,
                                                         const <link linkend="void">void</link> *serial,
                                                         <link linkend="size-t">size_t</link> serial_size);</programlisting>
<para>
This function will set the X.509 certificate's serial number.
Serial is not always a 32 or 64bit number.  Some CAs use large
serial numbers, thus it may be wise to handle it as something
opaque.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>cert</parameter>&#160;:</term>
<listitem><simpara> a certificate of type <link linkend="gnutls-x509-crt-t"><type>gnutls_x509_crt_t</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>serial</parameter>&#160;:</term>
<listitem><simpara> The serial number
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>serial_size</parameter>&#160;:</term>
<listitem><simpara> Holds the size of the serial field.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> On success, <link linkend="GNUTLS-E-SUCCESS--CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> is returned, otherwise a
  negative error value.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-x509-crt-set-subject-key-id" role="function">
<title>gnutls_x509_crt_set_subject_key_id ()</title>
<indexterm zone="gnutls-x509-crt-set-subject-key-id"><primary sortas="gnutls_x509_crt_set_subject_key_id">gnutls_x509_crt_set_subject_key_id</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_x509_crt_set_subject_key_id  (<link linkend="gnutls-x509-crt-t">gnutls_x509_crt_t</link> cert,
                                                         const <link linkend="void">void</link> *id,
                                                         <link linkend="size-t">size_t</link> id_size);</programlisting>
<para>
This function will set the X.509 certificate's subject key ID
extension.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>cert</parameter>&#160;:</term>
<listitem><simpara> a certificate of type <link linkend="gnutls-x509-crt-t"><type>gnutls_x509_crt_t</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>id</parameter>&#160;:</term>
<listitem><simpara> The key ID
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>id_size</parameter>&#160;:</term>
<listitem><simpara> Holds the size of the serial field.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> On success, <link linkend="GNUTLS-E-SUCCESS--CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> is returned, otherwise a
  negative error value.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-x509-crt-set-proxy-dn" role="function">
<title>gnutls_x509_crt_set_proxy_dn ()</title>
<indexterm zone="gnutls-x509-crt-set-proxy-dn"><primary sortas="gnutls_x509_crt_set_proxy_dn">gnutls_x509_crt_set_proxy_dn</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_x509_crt_set_proxy_dn        (<link linkend="gnutls-x509-crt-t">gnutls_x509_crt_t</link> crt,
                                                         <link linkend="gnutls-x509-crt-t">gnutls_x509_crt_t</link> eecrt,
                                                         unsigned <link linkend="int">int</link> raw_flag,
                                                         const <link linkend="void">void</link> *name,
                                                         unsigned <link linkend="int">int</link> sizeof_name);</programlisting>
<para>
This function will set the subject in <parameter>crt</parameter> to the end entity's
<parameter>eecrt</parameter> subject name, and add a single Common Name component <parameter>name</parameter>
of size <parameter>sizeof_name</parameter>.  This corresponds to the required proxy
certificate naming style.  Note that if <parameter>name</parameter> is <link linkend="NULL--CAPS"><literal>NULL</literal></link>, you MUST
set it later by using <link linkend="gnutls-x509-crt-set-dn-by-oid"><function>gnutls_x509_crt_set_dn_by_oid()</function></link> or similar.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>crt</parameter>&#160;:</term>
<listitem><simpara> a gnutls_x509_crt_t structure with the new proxy cert
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>eecrt</parameter>&#160;:</term>
<listitem><simpara> the end entity certificate that will be issuing the proxy
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>raw_flag</parameter>&#160;:</term>
<listitem><simpara> must be 0, or 1 if the CN is DER encoded
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>name</parameter>&#160;:</term>
<listitem><simpara> a pointer to the CN name, may be NULL (but MUST then be added later)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>sizeof_name</parameter>&#160;:</term>
<listitem><simpara> holds the size of <parameter>name</parameter>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> On success, <link linkend="GNUTLS-E-SUCCESS--CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> is returned, otherwise a
  negative error value.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-x509-crt-set-proxy" role="function">
<title>gnutls_x509_crt_set_proxy ()</title>
<indexterm zone="gnutls-x509-crt-set-proxy"><primary sortas="gnutls_x509_crt_set_proxy">gnutls_x509_crt_set_proxy</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_x509_crt_set_proxy           (<link linkend="gnutls-x509-crt-t">gnutls_x509_crt_t</link> crt,
                                                         <link linkend="int">int</link> pathLenConstraint,
                                                         const <link linkend="char">char</link> *policyLanguage,
                                                         const <link linkend="char">char</link> *policy,
                                                         <link linkend="size-t">size_t</link> sizeof_policy);</programlisting>
<para>
This function will set the proxyCertInfo extension.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>crt</parameter>&#160;:</term>
<listitem><simpara> a certificate of type <link linkend="gnutls-x509-crt-t"><type>gnutls_x509_crt_t</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>pathLenConstraint</parameter>&#160;:</term>
<listitem><simpara> non-negative values indicate maximum length of path,
  and negative values indicate that the pathLenConstraints field should
  not be present.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>policyLanguage</parameter>&#160;:</term>
<listitem><simpara> OID describing the language of <parameter>policy</parameter>.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>policy</parameter>&#160;:</term>
<listitem><simpara> opaque byte array with policy language, can be <link linkend="NULL--CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>sizeof_policy</parameter>&#160;:</term>
<listitem><simpara> size of <parameter>policy</parameter>.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> On success, <link linkend="GNUTLS-E-SUCCESS--CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> is returned, otherwise a
  negative error value.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-x509-crt-print" role="function">
<title>gnutls_x509_crt_print ()</title>
<indexterm zone="gnutls-x509-crt-print"><primary sortas="gnutls_x509_crt_print">gnutls_x509_crt_print</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_x509_crt_print               (<link linkend="gnutls-x509-crt-t">gnutls_x509_crt_t</link> cert,
                                                         <link linkend="gnutls-certificate-print-formats-t">gnutls_certificate_print_formats_t</link> format,
                                                         <link linkend="gnutls-datum-t">gnutls_datum_t</link> *out);</programlisting>
<para>
This function will pretty print a X.509 certificate, suitable for
display to a human.
</para>
<para>
If the format is <link linkend="GNUTLS-CRT-PRINT-FULL--CAPS"><literal>GNUTLS_CRT_PRINT_FULL</literal></link> then all fields of the
certificate will be output, on multiple lines.  The
<link linkend="GNUTLS-CRT-PRINT-ONELINE--CAPS"><literal>GNUTLS_CRT_PRINT_ONELINE</literal></link> format will generate one line with some
selected fields, which is useful for logging purposes.
</para>
<para>
The output <parameter>out</parameter> needs to be deallocate using <link linkend="gnutls-free"><function>gnutls_free()</function></link>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>cert</parameter>&#160;:</term>
<listitem><simpara> The structure to be printed
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>format</parameter>&#160;:</term>
<listitem><simpara> Indicate the format to use
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>out</parameter>&#160;:</term>
<listitem><simpara> Newly allocated datum with zero terminated string.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> On success, <link linkend="GNUTLS-E-SUCCESS--CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> is returned, otherwise a
  negative error value.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-x509-crl-print" role="function">
<title>gnutls_x509_crl_print ()</title>
<indexterm zone="gnutls-x509-crl-print"><primary sortas="gnutls_x509_crl_print">gnutls_x509_crl_print</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_x509_crl_print               (<link linkend="gnutls-x509-crl-t">gnutls_x509_crl_t</link> crl,
                                                         <link linkend="gnutls-certificate-print-formats-t">gnutls_certificate_print_formats_t</link> format,
                                                         <link linkend="gnutls-datum-t">gnutls_datum_t</link> *out);</programlisting>
<para>
This function will pretty print a X.509 certificate revocation
list, suitable for display to a human.
</para>
<para>
The output <parameter>out</parameter> needs to be deallocate using <link linkend="gnutls-free"><function>gnutls_free()</function></link>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>crl</parameter>&#160;:</term>
<listitem><simpara> The structure to be printed
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>format</parameter>&#160;:</term>
<listitem><simpara> Indicate the format to use
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>out</parameter>&#160;:</term>
<listitem><simpara> Newly allocated datum with zero terminated string.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> On success, <link linkend="GNUTLS-E-SUCCESS--CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> is returned, otherwise a
  negative error value.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-x509-crt-get-raw-issuer-dn" role="function">
<title>gnutls_x509_crt_get_raw_issuer_dn ()</title>
<indexterm zone="gnutls-x509-crt-get-raw-issuer-dn"><primary sortas="gnutls_x509_crt_get_raw_issuer_dn">gnutls_x509_crt_get_raw_issuer_dn</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_x509_crt_get_raw_issuer_dn   (<link linkend="gnutls-x509-crt-t">gnutls_x509_crt_t</link> cert,
                                                         <link linkend="gnutls-datum-t">gnutls_datum_t</link> *start);</programlisting>
<para>
This function will return a pointer to the DER encoded DN structure
and the length.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>cert</parameter>&#160;:</term>
<listitem><simpara> should contain a <link linkend="gnutls-x509-crt-t"><type>gnutls_x509_crt_t</type></link> structure
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>start</parameter>&#160;:</term>
<listitem><simpara> will hold the starting point of the DN
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> On success, <link linkend="GNUTLS-E-SUCCESS--CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> is returned, otherwise a
  negative error value.or a negative value on error.

</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-x509-crt-get-raw-dn" role="function">
<title>gnutls_x509_crt_get_raw_dn ()</title>
<indexterm zone="gnutls-x509-crt-get-raw-dn"><primary sortas="gnutls_x509_crt_get_raw_dn">gnutls_x509_crt_get_raw_dn</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_x509_crt_get_raw_dn          (<link linkend="gnutls-x509-crt-t">gnutls_x509_crt_t</link> cert,
                                                         <link linkend="gnutls-datum-t">gnutls_datum_t</link> *start);</programlisting>
<para>
This function will return a pointer to the DER encoded DN structure and
the length.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>cert</parameter>&#160;:</term>
<listitem><simpara> should contain a <link linkend="gnutls-x509-crt-t"><type>gnutls_x509_crt_t</type></link> structure
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>start</parameter>&#160;:</term>
<listitem><simpara> will hold the starting point of the DN
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> On success, <link linkend="GNUTLS-E-SUCCESS--CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> is returned, otherwise a
  negative error value. or a negative value on error.

</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-x509-rdn-get" role="function">
<title>gnutls_x509_rdn_get ()</title>
<indexterm zone="gnutls-x509-rdn-get"><primary sortas="gnutls_x509_rdn_get">gnutls_x509_rdn_get</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_x509_rdn_get                 (const <link linkend="gnutls-datum-t">gnutls_datum_t</link> *idn,
                                                         <link linkend="char">char</link> *buf,
                                                         <link linkend="size-t">size_t</link> *sizeof_buf);</programlisting>
<para>
This function will return the name of the given RDN sequence.  The
name will be in the form "C=xxxx,O=yyyy,CN=zzzz" as described in
RFC2253.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>idn</parameter>&#160;:</term>
<listitem><simpara> should contain a DER encoded RDN sequence
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>buf</parameter>&#160;:</term>
<listitem><simpara> a pointer to a structure to hold the peer's name
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>sizeof_buf</parameter>&#160;:</term>
<listitem><simpara> holds the size of <parameter>buf</parameter>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> On success, <link linkend="GNUTLS-E-SUCCESS--CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> is returned, or
<link linkend="GNUTLS-E-SHORT-MEMORY-BUFFER--CAPS"><literal>GNUTLS_E_SHORT_MEMORY_BUFFER</literal></link> is returned and *<parameter>sizeof_buf</parameter> is
updated if the provided buffer is not long enough, otherwise a
negative error value.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-x509-rdn-get-oid" role="function" condition="since:2.4.0">
<title>gnutls_x509_rdn_get_oid ()</title>
<indexterm zone="gnutls-x509-rdn-get-oid" role="2.4.0"><primary sortas="gnutls_x509_rdn_get_oid">gnutls_x509_rdn_get_oid</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_x509_rdn_get_oid             (const <link linkend="gnutls-datum-t">gnutls_datum_t</link> *idn,
                                                         <link linkend="int">int</link> indx,
                                                         <link linkend="void">void</link> *buf,
                                                         <link linkend="size-t">size_t</link> *sizeof_buf);</programlisting>
<para>
This function will return the specified Object identifier, of the
RDN sequence.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>idn</parameter>&#160;:</term>
<listitem><simpara> should contain a DER encoded RDN sequence
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>indx</parameter>&#160;:</term>
<listitem><simpara> Indicates which OID to return. Use 0 for the first one.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>buf</parameter>&#160;:</term>
<listitem><simpara> a pointer to a structure to hold the peer's name OID
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>sizeof_buf</parameter>&#160;:</term>
<listitem><simpara> holds the size of <parameter>buf</parameter>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> On success, <link linkend="GNUTLS-E-SUCCESS--CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> is returned, or
<link linkend="GNUTLS-E-SHORT-MEMORY-BUFFER--CAPS"><literal>GNUTLS_E_SHORT_MEMORY_BUFFER</literal></link> is returned and *<parameter>sizeof_buf</parameter> is
updated if the provided buffer is not long enough, otherwise a
negative error value.

</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 2.4.0</para></refsect2>
<refsect2 id="gnutls-x509-rdn-get-by-oid" role="function">
<title>gnutls_x509_rdn_get_by_oid ()</title>
<indexterm zone="gnutls-x509-rdn-get-by-oid"><primary sortas="gnutls_x509_rdn_get_by_oid">gnutls_x509_rdn_get_by_oid</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_x509_rdn_get_by_oid          (const <link linkend="gnutls-datum-t">gnutls_datum_t</link> *idn,
                                                         const <link linkend="char">char</link> *oid,
                                                         <link linkend="int">int</link> indx,
                                                         unsigned <link linkend="int">int</link> raw_flag,
                                                         <link linkend="void">void</link> *buf,
                                                         <link linkend="size-t">size_t</link> *sizeof_buf);</programlisting>
<para>
This function will return the name of the given Object identifier,
of the RDN sequence.  The name will be encoded using the rules
from RFC2253.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>idn</parameter>&#160;:</term>
<listitem><simpara> should contain a DER encoded RDN sequence
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>oid</parameter>&#160;:</term>
<listitem><simpara> an Object Identifier
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>indx</parameter>&#160;:</term>
<listitem><simpara> In case multiple same OIDs exist in the RDN indicates which
  to send. Use 0 for the first one.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>raw_flag</parameter>&#160;:</term>
<listitem><simpara> If non zero then the raw DER data are returned.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>buf</parameter>&#160;:</term>
<listitem><simpara> a pointer to a structure to hold the peer's name
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>sizeof_buf</parameter>&#160;:</term>
<listitem><simpara> holds the size of <parameter>buf</parameter>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> On success, <link linkend="GNUTLS-E-SUCCESS--CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> is returned, or
<link linkend="GNUTLS-E-SHORT-MEMORY-BUFFER--CAPS"><literal>GNUTLS_E_SHORT_MEMORY_BUFFER</literal></link> is returned and *<parameter>sizeof_buf</parameter> is
updated if the provided buffer is not long enough, otherwise a
negative error value.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-x509-dn-t" role="typedef">
<title>gnutls_x509_dn_t</title>
<indexterm zone="gnutls-x509-dn-t"><primary sortas="gnutls_x509_dn_t">gnutls_x509_dn_t</primary></indexterm><programlisting>  typedef void *gnutls_x509_dn_t;
</programlisting>
<para>
</para></refsect2>
<refsect2 id="gnutls-x509-crt-get-subject" role="function">
<title>gnutls_x509_crt_get_subject ()</title>
<indexterm zone="gnutls-x509-crt-get-subject"><primary sortas="gnutls_x509_crt_get_subject">gnutls_x509_crt_get_subject</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_x509_crt_get_subject         (<link linkend="gnutls-x509-crt-t">gnutls_x509_crt_t</link> cert,
                                                         <link linkend="gnutls-x509-dn-t">gnutls_x509_dn_t</link> *dn);</programlisting>
<para>
Return the Certificate's Subject DN as an opaque data type.  You
may use <link linkend="gnutls-x509-dn-get-rdn-ava"><function>gnutls_x509_dn_get_rdn_ava()</function></link> to decode the DN. 
</para>
<para>
Note that <parameter>dn</parameter> should be treated as constant. Because points 
into the <parameter>cert</parameter> object, you may not deallocate <parameter>cert</parameter> 
and continue to access <parameter>dn</parameter>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>cert</parameter>&#160;:</term>
<listitem><simpara> should contain a <link linkend="gnutls-x509-crt-t"><type>gnutls_x509_crt_t</type></link> structure
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>dn</parameter>&#160;:</term>
<listitem><simpara> output variable with pointer to opaque DN.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> Returns 0 on success, or an error code.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-x509-crt-get-issuer" role="function">
<title>gnutls_x509_crt_get_issuer ()</title>
<indexterm zone="gnutls-x509-crt-get-issuer"><primary sortas="gnutls_x509_crt_get_issuer">gnutls_x509_crt_get_issuer</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_x509_crt_get_issuer          (<link linkend="gnutls-x509-crt-t">gnutls_x509_crt_t</link> cert,
                                                         <link linkend="gnutls-x509-dn-t">gnutls_x509_dn_t</link> *dn);</programlisting>
<para>
Return the Certificate's Issuer DN as an opaque data type.  You may
use <link linkend="gnutls-x509-dn-get-rdn-ava"><function>gnutls_x509_dn_get_rdn_ava()</function></link> to decode the DN.
</para>
<para>
Note that <parameter>dn</parameter> should be treated as constant. Because points 
into the <parameter>cert</parameter> object, you may not deallocate <parameter>cert</parameter> 
and continue to access <parameter>dn</parameter>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>cert</parameter>&#160;:</term>
<listitem><simpara> should contain a <link linkend="gnutls-x509-crt-t"><type>gnutls_x509_crt_t</type></link> structure
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>dn</parameter>&#160;:</term>
<listitem><simpara> output variable with pointer to opaque DN
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> Returns 0 on success, or an error code.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-x509-dn-get-rdn-ava" role="function">
<title>gnutls_x509_dn_get_rdn_ava ()</title>
<indexterm zone="gnutls-x509-dn-get-rdn-ava"><primary sortas="gnutls_x509_dn_get_rdn_ava">gnutls_x509_dn_get_rdn_ava</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_x509_dn_get_rdn_ava          (<link linkend="gnutls-x509-dn-t">gnutls_x509_dn_t</link> dn,
                                                         <link linkend="int">int</link> irdn,
                                                         <link linkend="int">int</link> iava,
                                                         <link linkend="gnutls-x509-ava-st">gnutls_x509_ava_st</link> *ava);</programlisting>
<para>
Get pointers to data within the DN.
</para>
<para>
Note that <parameter>ava</parameter> will contain pointers into the <parameter>dn</parameter> structure, so you
should not modify any data or deallocate it.  Note also that the DN
in turn points into the original certificate structure, and thus
you may not deallocate the certificate and continue to access <parameter>dn</parameter>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>dn</parameter>&#160;:</term>
<listitem><simpara> input variable with opaque DN pointer
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>irdn</parameter>&#160;:</term>
<listitem><simpara> index of RDN
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>iava</parameter>&#160;:</term>
<listitem><simpara> index of AVA.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ava</parameter>&#160;:</term>
<listitem><simpara> Pointer to structure which will hold output information.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> Returns 0 on success, or an error code.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-x509-dn-init" role="function" condition="since:2.4.0">
<title>gnutls_x509_dn_init ()</title>
<indexterm zone="gnutls-x509-dn-init" role="2.4.0"><primary sortas="gnutls_x509_dn_init">gnutls_x509_dn_init</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_x509_dn_init                 (<link linkend="gnutls-x509-dn-t">gnutls_x509_dn_t</link> *dn);</programlisting>
<para>
This function initializes a <link linkend="gnutls-x509-dn-t"><type>gnutls_x509_dn_t</type></link> structure.
</para>
<para>
The object returned must be deallocated using
<link linkend="gnutls-x509-dn-deinit"><function>gnutls_x509_dn_deinit()</function></link>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>dn</parameter>&#160;:</term>
<listitem><simpara> the object to be initialized
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> On success, <link linkend="GNUTLS-E-SUCCESS--CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> is returned, otherwise a
  negative error value.

</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 2.4.0</para></refsect2>
<refsect2 id="gnutls-x509-dn-import" role="function" condition="since:2.4.0">
<title>gnutls_x509_dn_import ()</title>
<indexterm zone="gnutls-x509-dn-import" role="2.4.0"><primary sortas="gnutls_x509_dn_import">gnutls_x509_dn_import</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_x509_dn_import               (<link linkend="gnutls-x509-dn-t">gnutls_x509_dn_t</link> dn,
                                                         const <link linkend="gnutls-datum-t">gnutls_datum_t</link> *data);</programlisting>
<para>
This function parses an RDN sequence and stores the result to a
<link linkend="gnutls-x509-dn-t"><type>gnutls_x509_dn_t</type></link> structure. The structure must have been initialized
with <link linkend="gnutls-x509-dn-init"><function>gnutls_x509_dn_init()</function></link>. You may use <link linkend="gnutls-x509-dn-get-rdn-ava"><function>gnutls_x509_dn_get_rdn_ava()</function></link> to
decode the DN.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>dn</parameter>&#160;:</term>
<listitem><simpara> the structure that will hold the imported DN
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>data</parameter>&#160;:</term>
<listitem><simpara> should contain a DER encoded RDN sequence
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> On success, <link linkend="GNUTLS-E-SUCCESS--CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> is returned, otherwise a
  negative error value.

</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 2.4.0</para></refsect2>
<refsect2 id="gnutls-x509-dn-export" role="function">
<title>gnutls_x509_dn_export ()</title>
<indexterm zone="gnutls-x509-dn-export"><primary sortas="gnutls_x509_dn_export">gnutls_x509_dn_export</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_x509_dn_export               (<link linkend="gnutls-x509-dn-t">gnutls_x509_dn_t</link> dn,
                                                         <link linkend="gnutls-x509-crt-fmt-t">gnutls_x509_crt_fmt_t</link> format,
                                                         <link linkend="void">void</link> *output_data,
                                                         <link linkend="size-t">size_t</link> *output_data_size);</programlisting>
<para>
This function will export the DN to DER or PEM format.
</para>
<para>
If the buffer provided is not long enough to hold the output, then
*<parameter>output_data_size</parameter> is updated and <link linkend="GNUTLS-E-SHORT-MEMORY-BUFFER--CAPS"><literal>GNUTLS_E_SHORT_MEMORY_BUFFER</literal></link>
will be returned.
</para>
<para>
If the structure is PEM encoded, it will have a header
of "BEGIN NAME".</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>dn</parameter>&#160;:</term>
<listitem><simpara> Holds the opaque DN object
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>format</parameter>&#160;:</term>
<listitem><simpara> the format of output params. One of PEM or DER.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>output_data</parameter>&#160;:</term>
<listitem><simpara> will contain a DN PEM or DER encoded
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>output_data_size</parameter>&#160;:</term>
<listitem><simpara> holds the size of output_data (and will be
  replaced by the actual size of parameters)
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> On success, <link linkend="GNUTLS-E-SUCCESS--CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> is returned, otherwise a
  negative error value.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-x509-dn-deinit" role="function" condition="since:2.4.0">
<title>gnutls_x509_dn_deinit ()</title>
<indexterm zone="gnutls-x509-dn-deinit" role="2.4.0"><primary sortas="gnutls_x509_dn_deinit">gnutls_x509_dn_deinit</primary></indexterm><programlisting><link linkend="void">void</link>                gnutls_x509_dn_deinit               (<link linkend="gnutls-x509-dn-t">gnutls_x509_dn_t</link> dn);</programlisting>
<para>
This function deallocates the DN object as returned by
<link linkend="gnutls-x509-dn-import"><function>gnutls_x509_dn_import()</function></link>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>dn</parameter>&#160;:</term>
<listitem><simpara> a DN opaque object pointer.
</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 2.4.0</para></refsect2>
<refsect2 id="gnutls-x509-crl-init" role="function">
<title>gnutls_x509_crl_init ()</title>
<indexterm zone="gnutls-x509-crl-init"><primary sortas="gnutls_x509_crl_init">gnutls_x509_crl_init</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_x509_crl_init                (<link linkend="gnutls-x509-crl-t">gnutls_x509_crl_t</link> *crl);</programlisting>
<para>
This function will initialize a CRL structure. CRL stands for
Certificate Revocation List. A revocation list usually contains
lists of certificate serial numbers that have been revoked by an
Authority. The revocation lists are always signed with the
authority's private key.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>crl</parameter>&#160;:</term>
<listitem><simpara> The structure to be initialized
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> On success, <link linkend="GNUTLS-E-SUCCESS--CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> is returned, otherwise a
  negative error value.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-x509-crl-deinit" role="function">
<title>gnutls_x509_crl_deinit ()</title>
<indexterm zone="gnutls-x509-crl-deinit"><primary sortas="gnutls_x509_crl_deinit">gnutls_x509_crl_deinit</primary></indexterm><programlisting><link linkend="void">void</link>                gnutls_x509_crl_deinit              (<link linkend="gnutls-x509-crl-t">gnutls_x509_crl_t</link> crl);</programlisting>
<para>
This function will deinitialize a CRL structure.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>crl</parameter>&#160;:</term>
<listitem><simpara> The structure to be initialized
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-x509-crl-import" role="function">
<title>gnutls_x509_crl_import ()</title>
<indexterm zone="gnutls-x509-crl-import"><primary sortas="gnutls_x509_crl_import">gnutls_x509_crl_import</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_x509_crl_import              (<link linkend="gnutls-x509-crl-t">gnutls_x509_crl_t</link> crl,
                                                         const <link linkend="gnutls-datum-t">gnutls_datum_t</link> *data,
                                                         <link linkend="gnutls-x509-crt-fmt-t">gnutls_x509_crt_fmt_t</link> format);</programlisting>
<para>
This function will convert the given DER or PEM encoded CRL
to the native <link linkend="gnutls-x509-crl-t"><type>gnutls_x509_crl_t</type></link> format. The output will be stored in 'crl'.
</para>
<para>
If the CRL is PEM encoded it should have a header of "X509 CRL".</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>crl</parameter>&#160;:</term>
<listitem><simpara> The structure to store the parsed CRL.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>data</parameter>&#160;:</term>
<listitem><simpara> The DER or PEM encoded CRL.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>format</parameter>&#160;:</term>
<listitem><simpara> One of DER or PEM
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> On success, <link linkend="GNUTLS-E-SUCCESS--CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> is returned, otherwise a
  negative error value.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-x509-crl-export" role="function">
<title>gnutls_x509_crl_export ()</title>
<indexterm zone="gnutls-x509-crl-export"><primary sortas="gnutls_x509_crl_export">gnutls_x509_crl_export</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_x509_crl_export              (<link linkend="gnutls-x509-crl-t">gnutls_x509_crl_t</link> crl,
                                                         <link linkend="gnutls-x509-crt-fmt-t">gnutls_x509_crt_fmt_t</link> format,
                                                         <link linkend="void">void</link> *output_data,
                                                         <link linkend="size-t">size_t</link> *output_data_size);</programlisting>
<para>
This function will export the revocation list to DER or PEM format.
</para>
<para>
If the buffer provided is not long enough to hold the output, then
¤GNUTLS_E_SHORT_MEMORY_BUFFER will be returned.
</para>
<para>
If the structure is PEM encoded, it will have a header
of "BEGIN X509 CRL".</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>crl</parameter>&#160;:</term>
<listitem><simpara> Holds the revocation list
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>format</parameter>&#160;:</term>
<listitem><simpara> the format of output params. One of PEM or DER.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>output_data</parameter>&#160;:</term>
<listitem><simpara> will contain a private key PEM or DER encoded
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>output_data_size</parameter>&#160;:</term>
<listitem><simpara> holds the size of output_data (and will
  be replaced by the actual size of parameters)
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> On success, <link linkend="GNUTLS-E-SUCCESS--CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> is returned, otherwise a
  negative error value. and a negative value on failure.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-x509-crl-get-issuer-dn" role="function">
<title>gnutls_x509_crl_get_issuer_dn ()</title>
<indexterm zone="gnutls-x509-crl-get-issuer-dn"><primary sortas="gnutls_x509_crl_get_issuer_dn">gnutls_x509_crl_get_issuer_dn</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_x509_crl_get_issuer_dn       (const <link linkend="gnutls-x509-crl-t">gnutls_x509_crl_t</link> crl,
                                                         <link linkend="char">char</link> *buf,
                                                         <link linkend="size-t">size_t</link> *sizeof_buf);</programlisting>
<para>
This function will copy the name of the CRL issuer in the provided
buffer. The name will be in the form "C=xxxx,O=yyyy,CN=zzzz" as
described in RFC2253. The output string will be ASCII or UTF-8
encoded, depending on the certificate data.
</para>
<para>
If buf is <link linkend="NULL--CAPS"><literal>NULL</literal></link> then only the size will be filled.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>crl</parameter>&#160;:</term>
<listitem><simpara> should contain a gnutls_x509_crl_t structure
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>buf</parameter>&#160;:</term>
<listitem><simpara> a pointer to a structure to hold the peer's name (may be null)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>sizeof_buf</parameter>&#160;:</term>
<listitem><simpara> initially holds the size of <parameter>buf</parameter>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> <link linkend="GNUTLS-E-SHORT-MEMORY-BUFFER--CAPS"><literal>GNUTLS_E_SHORT_MEMORY_BUFFER</literal></link> if the provided buffer is
not long enough, and in that case the sizeof_buf will be updated
with the required size, and 0 on success.

</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-x509-crl-get-issuer-dn-by-oid" role="function">
<title>gnutls_x509_crl_get_issuer_dn_by_oid ()</title>
<indexterm zone="gnutls-x509-crl-get-issuer-dn-by-oid"><primary sortas="gnutls_x509_crl_get_issuer_dn_by_oid">gnutls_x509_crl_get_issuer_dn_by_oid</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_x509_crl_get_issuer_dn_by_oid
                                                        (<link linkend="gnutls-x509-crl-t">gnutls_x509_crl_t</link> crl,
                                                         const <link linkend="char">char</link> *oid,
                                                         <link linkend="int">int</link> indx,
                                                         unsigned <link linkend="int">int</link> raw_flag,
                                                         <link linkend="void">void</link> *buf,
                                                         <link linkend="size-t">size_t</link> *sizeof_buf);</programlisting>
<para>
This function will extract the part of the name of the CRL issuer
specified by the given OID. The output will be encoded as described
in RFC2253. The output string will be ASCII or UTF-8 encoded,
depending on the certificate data.
</para>
<para>
Some helper macros with popular OIDs can be found in gnutls/x509.h
If raw flag is zero, this function will only return known OIDs as
text. Other OIDs will be DER encoded, as described in RFC2253 -- in
hex format with a '#' prefix.  You can check about known OIDs
using <link linkend="gnutls-x509-dn-oid-known"><function>gnutls_x509_dn_oid_known()</function></link>.
</para>
<para>
If buf is null then only the size will be filled.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>crl</parameter>&#160;:</term>
<listitem><simpara> should contain a gnutls_x509_crl_t structure
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>oid</parameter>&#160;:</term>
<listitem><simpara> holds an Object Identified in null terminated string
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>indx</parameter>&#160;:</term>
<listitem><simpara> In case multiple same OIDs exist in the RDN, this specifies which to send. Use zero to get the first one.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>raw_flag</parameter>&#160;:</term>
<listitem><simpara> If non zero returns the raw DER data of the DN part.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>buf</parameter>&#160;:</term>
<listitem><simpara> a pointer to a structure to hold the peer's name (may be null)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>sizeof_buf</parameter>&#160;:</term>
<listitem><simpara> initially holds the size of <parameter>buf</parameter>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> <link linkend="GNUTLS-E-SHORT-MEMORY-BUFFER--CAPS"><literal>GNUTLS_E_SHORT_MEMORY_BUFFER</literal></link> if the provided buffer is
not long enough, and in that case the sizeof_buf will be updated
with the required size, and 0 on success.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-x509-crl-get-dn-oid" role="function">
<title>gnutls_x509_crl_get_dn_oid ()</title>
<indexterm zone="gnutls-x509-crl-get-dn-oid"><primary sortas="gnutls_x509_crl_get_dn_oid">gnutls_x509_crl_get_dn_oid</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_x509_crl_get_dn_oid          (<link linkend="gnutls-x509-crl-t">gnutls_x509_crl_t</link> crl,
                                                         <link linkend="int">int</link> indx,
                                                         <link linkend="void">void</link> *oid,
                                                         <link linkend="size-t">size_t</link> *sizeof_oid);</programlisting>
<para>
This function will extract the requested OID of the name of the CRL
issuer, specified by the given index.
</para>
<para>
If oid is null then only the size will be filled.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>crl</parameter>&#160;:</term>
<listitem><simpara> should contain a gnutls_x509_crl_t structure
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>indx</parameter>&#160;:</term>
<listitem><simpara> Specifies which DN OID to send. Use zero to get the first one.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>oid</parameter>&#160;:</term>
<listitem><simpara> a pointer to a structure to hold the name (may be null)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>sizeof_oid</parameter>&#160;:</term>
<listitem><simpara> initially holds the size of 'oid'
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> <link linkend="GNUTLS-E-SHORT-MEMORY-BUFFER--CAPS"><literal>GNUTLS_E_SHORT_MEMORY_BUFFER</literal></link> if the provided buffer is
not long enough, and in that case the sizeof_oid will be updated
with the required size.  On success 0 is returned.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-x509-crl-get-signature-algorithm" role="function">
<title>gnutls_x509_crl_get_signature_algorithm ()</title>
<indexterm zone="gnutls-x509-crl-get-signature-algorithm"><primary sortas="gnutls_x509_crl_get_signature_algorithm">gnutls_x509_crl_get_signature_algorithm</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_x509_crl_get_signature_algorithm
                                                        (<link linkend="gnutls-x509-crl-t">gnutls_x509_crl_t</link> crl);</programlisting>
<para>
This function will return a value of the <link linkend="gnutls-sign-algorithm-t"><type>gnutls_sign_algorithm_t</type></link>
enumeration that is the signature algorithm.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>crl</parameter>&#160;:</term>
<listitem><simpara> should contain a <link linkend="gnutls-x509-crl-t"><type>gnutls_x509_crl_t</type></link> structure
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> On success, <link linkend="GNUTLS-E-SUCCESS--CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> is returned, otherwise a
  negative error value.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-x509-crl-get-signature" role="function">
<title>gnutls_x509_crl_get_signature ()</title>
<indexterm zone="gnutls-x509-crl-get-signature"><primary sortas="gnutls_x509_crl_get_signature">gnutls_x509_crl_get_signature</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_x509_crl_get_signature       (<link linkend="gnutls-x509-crl-t">gnutls_x509_crl_t</link> crl,
                                                         <link linkend="char">char</link> *sig,
                                                         <link linkend="size-t">size_t</link> *sizeof_sig);</programlisting>
<para>
This function will extract the signature field of a CRL.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>crl</parameter>&#160;:</term>
<listitem><simpara> should contain a gnutls_x509_crl_t structure
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>sig</parameter>&#160;:</term>
<listitem><simpara> a pointer where the signature part will be copied (may be null).
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>sizeof_sig</parameter>&#160;:</term>
<listitem><simpara> initially holds the size of <parameter>sig</parameter>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> On success, <link linkend="GNUTLS-E-SUCCESS--CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> is returned, otherwise a
  negative error value. and a negative value on error.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-x509-crl-get-version" role="function">
<title>gnutls_x509_crl_get_version ()</title>
<indexterm zone="gnutls-x509-crl-get-version"><primary sortas="gnutls_x509_crl_get_version">gnutls_x509_crl_get_version</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_x509_crl_get_version         (<link linkend="gnutls-x509-crl-t">gnutls_x509_crl_t</link> crl);</programlisting>
<para>
This function will return the version of the specified CRL.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>crl</parameter>&#160;:</term>
<listitem><simpara> should contain a <link linkend="gnutls-x509-crl-t"><type>gnutls_x509_crl_t</type></link> structure
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> The version number, or a negative value on error.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-x509-crl-get-this-update" role="function">
<title>gnutls_x509_crl_get_this_update ()</title>
<indexterm zone="gnutls-x509-crl-get-this-update"><primary sortas="gnutls_x509_crl_get_this_update">gnutls_x509_crl_get_this_update</primary></indexterm><programlisting><link linkend="time-t">time_t</link>              gnutls_x509_crl_get_this_update     (<link linkend="gnutls-x509-crl-t">gnutls_x509_crl_t</link> crl);</programlisting>
<para>
This function will return the time this CRL was issued.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>crl</parameter>&#160;:</term>
<listitem><simpara> should contain a <link linkend="gnutls-x509-crl-t"><type>gnutls_x509_crl_t</type></link> structure
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> when the CRL was issued, or (time_t)-1 on error.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-x509-crl-get-next-update" role="function">
<title>gnutls_x509_crl_get_next_update ()</title>
<indexterm zone="gnutls-x509-crl-get-next-update"><primary sortas="gnutls_x509_crl_get_next_update">gnutls_x509_crl_get_next_update</primary></indexterm><programlisting><link linkend="time-t">time_t</link>              gnutls_x509_crl_get_next_update     (<link linkend="gnutls-x509-crl-t">gnutls_x509_crl_t</link> crl);</programlisting>
<para>
This function will return the time the next CRL will be issued.
This field is optional in a CRL so it might be normal to get an
error instead.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>crl</parameter>&#160;:</term>
<listitem><simpara> should contain a <link linkend="gnutls-x509-crl-t"><type>gnutls_x509_crl_t</type></link> structure
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> when the next CRL will be issued, or (time_t)-1 on error.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-x509-crl-get-crt-count" role="function">
<title>gnutls_x509_crl_get_crt_count ()</title>
<indexterm zone="gnutls-x509-crl-get-crt-count"><primary sortas="gnutls_x509_crl_get_crt_count">gnutls_x509_crl_get_crt_count</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_x509_crl_get_crt_count       (<link linkend="gnutls-x509-crl-t">gnutls_x509_crl_t</link> crl);</programlisting>
<para>
This function will return the number of revoked certificates in the
given CRL.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>crl</parameter>&#160;:</term>
<listitem><simpara> should contain a <link linkend="gnutls-x509-crl-t"><type>gnutls_x509_crl_t</type></link> structure
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> number of certificates, a negative value on failure.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-x509-crl-get-crt-serial" role="function">
<title>gnutls_x509_crl_get_crt_serial ()</title>
<indexterm zone="gnutls-x509-crl-get-crt-serial"><primary sortas="gnutls_x509_crl_get_crt_serial">gnutls_x509_crl_get_crt_serial</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_x509_crl_get_crt_serial      (<link linkend="gnutls-x509-crl-t">gnutls_x509_crl_t</link> crl,
                                                         <link linkend="int">int</link> indx,
                                                         unsigned <link linkend="char">char</link> *serial,
                                                         <link linkend="size-t">size_t</link> *serial_size,
                                                         <link linkend="time-t">time_t</link> *t);</programlisting>
<para>
This function will retrieve the serial number of the specified, by
the index, revoked certificate.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>crl</parameter>&#160;:</term>
<listitem><simpara> should contain a <link linkend="gnutls-x509-crl-t"><type>gnutls_x509_crl_t</type></link> structure
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>indx</parameter>&#160;:</term>
<listitem><simpara> the index of the certificate to extract (starting from 0)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>serial</parameter>&#160;:</term>
<listitem><simpara> where the serial number will be copied
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>serial_size</parameter>&#160;:</term>
<listitem><simpara> initially holds the size of serial
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>t</parameter>&#160;:</term>
<listitem><simpara> if non null, will hold the time this certificate was revoked
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> On success, <link linkend="GNUTLS-E-SUCCESS--CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> is returned, otherwise a
  negative error value. and a negative value on error.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-x509-crl-get-certificate-count" role="macro">
<title>gnutls_x509_crl_get_certificate_count</title>
<indexterm zone="gnutls-x509-crl-get-certificate-count"><primary sortas="gnutls_x509_crl_get_certificate_count">gnutls_x509_crl_get_certificate_count</primary></indexterm><programlisting>#define gnutls_x509_crl_get_certificate_count gnutls_x509_crl_get_crt_count
</programlisting>
<para>
</para></refsect2>
<refsect2 id="gnutls-x509-crl-get-certificate" role="macro">
<title>gnutls_x509_crl_get_certificate</title>
<indexterm zone="gnutls-x509-crl-get-certificate"><primary sortas="gnutls_x509_crl_get_certificate">gnutls_x509_crl_get_certificate</primary></indexterm><programlisting>#define gnutls_x509_crl_get_certificate gnutls_x509_crl_get_crt_serial
</programlisting>
<para>
</para></refsect2>
<refsect2 id="gnutls-x509-crl-check-issuer" role="function">
<title>gnutls_x509_crl_check_issuer ()</title>
<indexterm zone="gnutls-x509-crl-check-issuer"><primary sortas="gnutls_x509_crl_check_issuer">gnutls_x509_crl_check_issuer</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_x509_crl_check_issuer        (<link linkend="gnutls-x509-crl-t">gnutls_x509_crl_t</link> crl,
                                                         <link linkend="gnutls-x509-crt-t">gnutls_x509_crt_t</link> issuer);</programlisting>
<para>
This function will check if the given CRL was issued by the given
issuer certificate.  It will return true (1) if the given CRL was
issued by the given issuer, and false (0) if not.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>crl</parameter>&#160;:</term>
<listitem><simpara> is the CRL to be checked
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>issuer</parameter>&#160;:</term>
<listitem><simpara> is the certificate of a possible issuer
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> On success, <link linkend="GNUTLS-E-SUCCESS--CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> is returned, otherwise a
  negative error value.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-x509-crl-set-version" role="function">
<title>gnutls_x509_crl_set_version ()</title>
<indexterm zone="gnutls-x509-crl-set-version"><primary sortas="gnutls_x509_crl_set_version">gnutls_x509_crl_set_version</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_x509_crl_set_version         (<link linkend="gnutls-x509-crl-t">gnutls_x509_crl_t</link> crl,
                                                         unsigned <link linkend="int">int</link> version);</programlisting>
<para>
This function will set the version of the CRL. This
must be one for CRL version 1, and so on. The CRLs generated
by gnutls should have a version number of 2.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>crl</parameter>&#160;:</term>
<listitem><simpara> should contain a gnutls_x509_crl_t structure
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>version</parameter>&#160;:</term>
<listitem><simpara> holds the version number. For CRLv1 crls must be 1.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> On success, <link linkend="GNUTLS-E-SUCCESS--CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> is returned, otherwise a
  negative error value.

</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-x509-crl-sign" role="function">
<title>gnutls_x509_crl_sign ()</title>
<indexterm zone="gnutls-x509-crl-sign"><primary sortas="gnutls_x509_crl_sign">gnutls_x509_crl_sign</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_x509_crl_sign                (<link linkend="gnutls-x509-crl-t">gnutls_x509_crl_t</link> crl,
                                                         <link linkend="gnutls-x509-crt-t">gnutls_x509_crt_t</link> issuer,
                                                         <link linkend="gnutls-x509-privkey-t">gnutls_x509_privkey_t</link> issuer_key);</programlisting>
<para>
This function is the same a <link linkend="gnutls-x509-crl-sign2"><function>gnutls_x509_crl_sign2()</function></link> with no flags, and
SHA1 as the hash algorithm.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>crl</parameter>&#160;:</term>
<listitem><simpara> should contain a gnutls_x509_crl_t structure
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>issuer</parameter>&#160;:</term>
<listitem><simpara> is the certificate of the certificate issuer
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>issuer_key</parameter>&#160;:</term>
<listitem><simpara> holds the issuer's private key
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> On success, <link linkend="GNUTLS-E-SUCCESS--CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> is returned, otherwise a
  negative error value.

</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-x509-crl-sign2" role="function">
<title>gnutls_x509_crl_sign2 ()</title>
<indexterm zone="gnutls-x509-crl-sign2"><primary sortas="gnutls_x509_crl_sign2">gnutls_x509_crl_sign2</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_x509_crl_sign2               (<link linkend="gnutls-x509-crl-t">gnutls_x509_crl_t</link> crl,
                                                         <link linkend="gnutls-x509-crt-t">gnutls_x509_crt_t</link> issuer,
                                                         <link linkend="gnutls-x509-privkey-t">gnutls_x509_privkey_t</link> issuer_key,
                                                         <link linkend="gnutls-digest-algorithm-t">gnutls_digest_algorithm_t</link> dig,
                                                         unsigned <link linkend="int">int</link> flags);</programlisting>
<para>
This function will sign the CRL with the issuer's private key, and
will copy the issuer's information into the CRL.
</para>
<para>
This must be the last step in a certificate CRL since all
the previously set parameters are now signed.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>crl</parameter>&#160;:</term>
<listitem><simpara> should contain a gnutls_x509_crl_t structure
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>issuer</parameter>&#160;:</term>
<listitem><simpara> is the certificate of the certificate issuer
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>issuer_key</parameter>&#160;:</term>
<listitem><simpara> holds the issuer's private key
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>dig</parameter>&#160;:</term>
<listitem><simpara> The message digest to use. GNUTLS_DIG_SHA1 is the safe choice unless you know what you're doing.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>flags</parameter>&#160;:</term>
<listitem><simpara> must be 0
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> On success, <link linkend="GNUTLS-E-SUCCESS--CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> is returned, otherwise a
  negative error value.

</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-x509-crl-set-this-update" role="function">
<title>gnutls_x509_crl_set_this_update ()</title>
<indexterm zone="gnutls-x509-crl-set-this-update"><primary sortas="gnutls_x509_crl_set_this_update">gnutls_x509_crl_set_this_update</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_x509_crl_set_this_update     (<link linkend="gnutls-x509-crl-t">gnutls_x509_crl_t</link> crl,
                                                         <link linkend="time-t">time_t</link> act_time);</programlisting>
<para>
This function will set the time this CRL was issued.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>crl</parameter>&#160;:</term>
<listitem><simpara> should contain a gnutls_x509_crl_t structure
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>act_time</parameter>&#160;:</term>
<listitem><simpara> The actual time
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> On success, <link linkend="GNUTLS-E-SUCCESS--CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> is returned, otherwise a
  negative error value.

</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-x509-crl-set-next-update" role="function">
<title>gnutls_x509_crl_set_next_update ()</title>
<indexterm zone="gnutls-x509-crl-set-next-update"><primary sortas="gnutls_x509_crl_set_next_update">gnutls_x509_crl_set_next_update</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_x509_crl_set_next_update     (<link linkend="gnutls-x509-crl-t">gnutls_x509_crl_t</link> crl,
                                                         <link linkend="time-t">time_t</link> exp_time);</programlisting>
<para>
This function will set the time this CRL will be updated.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>crl</parameter>&#160;:</term>
<listitem><simpara> should contain a gnutls_x509_crl_t structure
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>exp_time</parameter>&#160;:</term>
<listitem><simpara> The actual time
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> On success, <link linkend="GNUTLS-E-SUCCESS--CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> is returned, otherwise a
  negative error value.

</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-x509-crl-set-crt-serial" role="function">
<title>gnutls_x509_crl_set_crt_serial ()</title>
<indexterm zone="gnutls-x509-crl-set-crt-serial"><primary sortas="gnutls_x509_crl_set_crt_serial">gnutls_x509_crl_set_crt_serial</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_x509_crl_set_crt_serial      (<link linkend="gnutls-x509-crl-t">gnutls_x509_crl_t</link> crl,
                                                         const <link linkend="void">void</link> *serial,
                                                         <link linkend="size-t">size_t</link> serial_size,
                                                         <link linkend="time-t">time_t</link> revocation_time);</programlisting>
<para>
This function will set a revoked certificate's serial number to the CRL.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>crl</parameter>&#160;:</term>
<listitem><simpara> should contain a gnutls_x509_crl_t structure
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>serial</parameter>&#160;:</term>
<listitem><simpara> The revoked certificate's serial number
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>serial_size</parameter>&#160;:</term>
<listitem><simpara> Holds the size of the serial field.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>revocation_time</parameter>&#160;:</term>
<listitem><simpara> The time this certificate was revoked
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> On success, <link linkend="GNUTLS-E-SUCCESS--CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> is returned, otherwise a
  negative error value.

</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-x509-crl-set-crt" role="function">
<title>gnutls_x509_crl_set_crt ()</title>
<indexterm zone="gnutls-x509-crl-set-crt"><primary sortas="gnutls_x509_crl_set_crt">gnutls_x509_crl_set_crt</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_x509_crl_set_crt             (<link linkend="gnutls-x509-crl-t">gnutls_x509_crl_t</link> crl,
                                                         <link linkend="gnutls-x509-crt-t">gnutls_x509_crt_t</link> crt,
                                                         <link linkend="time-t">time_t</link> revocation_time);</programlisting>
<para>
This function will set a revoked certificate's serial number to the CRL.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>crl</parameter>&#160;:</term>
<listitem><simpara> should contain a gnutls_x509_crl_t structure
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>crt</parameter>&#160;:</term>
<listitem><simpara> a certificate of type <link linkend="gnutls-x509-crt-t"><type>gnutls_x509_crt_t</type></link> with the revoked certificate
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>revocation_time</parameter>&#160;:</term>
<listitem><simpara> The time this certificate was revoked
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> On success, <link linkend="GNUTLS-E-SUCCESS--CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> is returned, otherwise a
  negative error value.

</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-x509-crl-get-authority-key-id" role="function" condition="since:2.8.0">
<title>gnutls_x509_crl_get_authority_key_id ()</title>
<indexterm zone="gnutls-x509-crl-get-authority-key-id" role="2.8.0"><primary sortas="gnutls_x509_crl_get_authority_key_id">gnutls_x509_crl_get_authority_key_id</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_x509_crl_get_authority_key_id
                                                        (<link linkend="gnutls-x509-crl-t">gnutls_x509_crl_t</link> crl,
                                                         <link linkend="void">void</link> *ret,
                                                         <link linkend="size-t">size_t</link> *ret_size,
                                                         unsigned <link linkend="int">int</link> *critical);</programlisting>
<para>
This function will return the CRL authority's key identifier.  This
is obtained by the X.509 Authority Key identifier extension field
(2.5.29.35).  Note that this function only returns the
keyIdentifier field of the extension.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>crl</parameter>&#160;:</term>
<listitem><simpara> should contain a <link linkend="gnutls-x509-crl-t"><type>gnutls_x509_crl_t</type></link> structure
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ret</parameter>&#160;:</term>
<listitem><simpara> The place where the identifier will be copied
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ret_size</parameter>&#160;:</term>
<listitem><simpara> Holds the size of the result field.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>critical</parameter>&#160;:</term>
<listitem><simpara> will be non zero if the extension is marked as critical
  (may be null)
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> On success, <link linkend="GNUTLS-E-SUCCESS--CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> is returned, otherwise a
  negative value in case of an error.

</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 2.8.0</para></refsect2>
<refsect2 id="gnutls-x509-crl-get-number" role="function" condition="since:2.8.0">
<title>gnutls_x509_crl_get_number ()</title>
<indexterm zone="gnutls-x509-crl-get-number" role="2.8.0"><primary sortas="gnutls_x509_crl_get_number">gnutls_x509_crl_get_number</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_x509_crl_get_number          (<link linkend="gnutls-x509-crl-t">gnutls_x509_crl_t</link> crl,
                                                         <link linkend="void">void</link> *ret,
                                                         <link linkend="size-t">size_t</link> *ret_size,
                                                         unsigned <link linkend="int">int</link> *critical);</programlisting>
<para>
This function will return the CRL number extension.  This is
obtained by the CRL Number extension field (2.5.29.20).</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>crl</parameter>&#160;:</term>
<listitem><simpara> should contain a <link linkend="gnutls-x509-crl-t"><type>gnutls_x509_crl_t</type></link> structure
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ret</parameter>&#160;:</term>
<listitem><simpara> The place where the number will be copied
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ret_size</parameter>&#160;:</term>
<listitem><simpara> Holds the size of the result field.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>critical</parameter>&#160;:</term>
<listitem><simpara> will be non zero if the extension is marked as critical
  (may be null)
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> On success, <link linkend="GNUTLS-E-SUCCESS--CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> is returned, otherwise a
  negative value in case of an error.

</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 2.8.0</para></refsect2>
<refsect2 id="gnutls-x509-crl-get-extension-oid" role="function" condition="since:2.8.0">
<title>gnutls_x509_crl_get_extension_oid ()</title>
<indexterm zone="gnutls-x509-crl-get-extension-oid" role="2.8.0"><primary sortas="gnutls_x509_crl_get_extension_oid">gnutls_x509_crl_get_extension_oid</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_x509_crl_get_extension_oid   (<link linkend="gnutls-x509-crl-t">gnutls_x509_crl_t</link> crl,
                                                         <link linkend="int">int</link> indx,
                                                         <link linkend="void">void</link> *oid,
                                                         <link linkend="size-t">size_t</link> *sizeof_oid);</programlisting>
<para>
This function will return the requested extension OID in the CRL.
The extension OID will be stored as a string in the provided
buffer.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>crl</parameter>&#160;:</term>
<listitem><simpara> should contain a <link linkend="gnutls-x509-crl-t"><type>gnutls_x509_crl_t</type></link> structure
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>indx</parameter>&#160;:</term>
<listitem><simpara> Specifies which extension OID to send, use zero to get the first one.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>oid</parameter>&#160;:</term>
<listitem><simpara> a pointer to a structure to hold the OID (may be null)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>sizeof_oid</parameter>&#160;:</term>
<listitem><simpara> initially holds the size of <parameter>oid</parameter>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> On success, <link linkend="GNUTLS-E-SUCCESS--CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> is returned, otherwise a
  negative value in case of an error.  If your have reached the
  last extension available <link linkend="GNUTLS-E-REQUESTED-DATA-NOT-AVAILABLE--CAPS"><literal>GNUTLS_E_REQUESTED_DATA_NOT_AVAILABLE</literal></link>
  will be returned.

</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 2.8.0</para></refsect2>
<refsect2 id="gnutls-x509-crl-get-extension-info" role="function" condition="since:2.8.0">
<title>gnutls_x509_crl_get_extension_info ()</title>
<indexterm zone="gnutls-x509-crl-get-extension-info" role="2.8.0"><primary sortas="gnutls_x509_crl_get_extension_info">gnutls_x509_crl_get_extension_info</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_x509_crl_get_extension_info  (<link linkend="gnutls-x509-crl-t">gnutls_x509_crl_t</link> crl,
                                                         <link linkend="int">int</link> indx,
                                                         <link linkend="void">void</link> *oid,
                                                         <link linkend="size-t">size_t</link> *sizeof_oid,
                                                         <link linkend="int">int</link> *critical);</programlisting>
<para>
This function will return the requested extension OID in the CRL,
and the critical flag for it.  The extension OID will be stored as
a string in the provided buffer.  Use
<link linkend="gnutls-x509-crl-get-extension-data"><function>gnutls_x509_crl_get_extension_data()</function></link> to extract the data.
</para>
<para>
If the buffer provided is not long enough to hold the output, then
*<parameter>sizeof_oid</parameter> is updated and <link linkend="GNUTLS-E-SHORT-MEMORY-BUFFER--CAPS"><literal>GNUTLS_E_SHORT_MEMORY_BUFFER</literal></link> will be
returned.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>crl</parameter>&#160;:</term>
<listitem><simpara> should contain a <link linkend="gnutls-x509-crl-t"><type>gnutls_x509_crl_t</type></link> structure
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>indx</parameter>&#160;:</term>
<listitem><simpara> Specifies which extension OID to send, use zero to get the first one.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>oid</parameter>&#160;:</term>
<listitem><simpara> a pointer to a structure to hold the OID
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>sizeof_oid</parameter>&#160;:</term>
<listitem><simpara> initially holds the maximum size of <parameter>oid</parameter>, on return
  holds actual size of <parameter>oid</parameter>.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>critical</parameter>&#160;:</term>
<listitem><simpara> output variable with critical flag, may be NULL.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> On success, <link linkend="GNUTLS-E-SUCCESS--CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> is returned, otherwise a
  negative value in case of an error.  If your have reached the
  last extension available <link linkend="GNUTLS-E-REQUESTED-DATA-NOT-AVAILABLE--CAPS"><literal>GNUTLS_E_REQUESTED_DATA_NOT_AVAILABLE</literal></link>
  will be returned.

</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 2.8.0</para></refsect2>
<refsect2 id="gnutls-x509-crl-get-extension-data" role="function" condition="since:2.8.0">
<title>gnutls_x509_crl_get_extension_data ()</title>
<indexterm zone="gnutls-x509-crl-get-extension-data" role="2.8.0"><primary sortas="gnutls_x509_crl_get_extension_data">gnutls_x509_crl_get_extension_data</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_x509_crl_get_extension_data  (<link linkend="gnutls-x509-crl-t">gnutls_x509_crl_t</link> crl,
                                                         <link linkend="int">int</link> indx,
                                                         <link linkend="void">void</link> *data,
                                                         <link linkend="size-t">size_t</link> *sizeof_data);</programlisting>
<para>
This function will return the requested extension data in the CRL.
The extension data will be stored as a string in the provided
buffer.
</para>
<para>
Use <link linkend="gnutls-x509-crl-get-extension-info"><function>gnutls_x509_crl_get_extension_info()</function></link> to extract the OID and
critical flag.  Use <link linkend="gnutls-x509-crl-get-extension-by-oid"><function>gnutls_x509_crl_get_extension_by_oid()</function></link> instead,
if you want to get data indexed by the extension OID rather than
sequence.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>crl</parameter>&#160;:</term>
<listitem><simpara> should contain a <link linkend="gnutls-x509-crl-t"><type>gnutls_x509_crl_t</type></link> structure
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>indx</parameter>&#160;:</term>
<listitem><simpara> Specifies which extension OID to send. Use zero to get the first one.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>data</parameter>&#160;:</term>
<listitem><simpara> a pointer to a structure to hold the data (may be null)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>sizeof_data</parameter>&#160;:</term>
<listitem><simpara> initially holds the size of <parameter>oid</parameter>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> On success, <link linkend="GNUTLS-E-SUCCESS--CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> is returned, otherwise a
  negative value in case of an error.  If your have reached the
  last extension available <link linkend="GNUTLS-E-REQUESTED-DATA-NOT-AVAILABLE--CAPS"><literal>GNUTLS_E_REQUESTED_DATA_NOT_AVAILABLE</literal></link>
  will be returned.

</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 2.8.0</para></refsect2>
<refsect2 id="gnutls-x509-crl-set-authority-key-id" role="function" condition="since:2.8.0">
<title>gnutls_x509_crl_set_authority_key_id ()</title>
<indexterm zone="gnutls-x509-crl-set-authority-key-id" role="2.8.0"><primary sortas="gnutls_x509_crl_set_authority_key_id">gnutls_x509_crl_set_authority_key_id</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_x509_crl_set_authority_key_id
                                                        (<link linkend="gnutls-x509-crl-t">gnutls_x509_crl_t</link> crl,
                                                         const <link linkend="void">void</link> *id,
                                                         <link linkend="size-t">size_t</link> id_size);</programlisting>
<para>
This function will set the CRL's authority key ID extension.  Only
the keyIdentifier field can be set with this function.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>crl</parameter>&#160;:</term>
<listitem><simpara> a CRL of type <link linkend="gnutls-x509-crl-t"><type>gnutls_x509_crl_t</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>id</parameter>&#160;:</term>
<listitem><simpara> The key ID
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>id_size</parameter>&#160;:</term>
<listitem><simpara> Holds the size of the serial field.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> On success, <link linkend="GNUTLS-E-SUCCESS--CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> is returned, otherwise a
  negative error value.

</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 2.8.0</para></refsect2>
<refsect2 id="gnutls-x509-crl-set-number" role="function" condition="since:2.8.0">
<title>gnutls_x509_crl_set_number ()</title>
<indexterm zone="gnutls-x509-crl-set-number" role="2.8.0"><primary sortas="gnutls_x509_crl_set_number">gnutls_x509_crl_set_number</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_x509_crl_set_number          (<link linkend="gnutls-x509-crl-t">gnutls_x509_crl_t</link> crl,
                                                         const <link linkend="void">void</link> *nr,
                                                         <link linkend="size-t">size_t</link> nr_size);</programlisting>
<para>
This function will set the CRL's number extension.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>crl</parameter>&#160;:</term>
<listitem><simpara> a CRL of type <link linkend="gnutls-x509-crl-t"><type>gnutls_x509_crl_t</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>nr</parameter>&#160;:</term>
<listitem><simpara> The CRL number
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>nr_size</parameter>&#160;:</term>
<listitem><simpara> Holds the size of the nr field.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> On success, <link linkend="GNUTLS-E-SUCCESS--CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> is returned, otherwise a
  negative error value.

</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 2.8.0</para></refsect2>
<refsect2 id="gnutls-pkcs7-int" role="struct">
<title>struct gnutls_pkcs7_int</title>
<indexterm zone="gnutls-pkcs7-int"><primary sortas="gnutls_pkcs7_int">gnutls_pkcs7_int</primary></indexterm><programlisting>struct gnutls_pkcs7_int;</programlisting>
<para>
</para></refsect2>
<refsect2 id="gnutls-pkcs7-t" role="typedef">
<title>gnutls_pkcs7_t</title>
<indexterm zone="gnutls-pkcs7-t"><primary sortas="gnutls_pkcs7_t">gnutls_pkcs7_t</primary></indexterm><programlisting>  typedef struct gnutls_pkcs7_int *gnutls_pkcs7_t;
</programlisting>
<para>
</para></refsect2>
<refsect2 id="gnutls-pkcs7-init" role="function">
<title>gnutls_pkcs7_init ()</title>
<indexterm zone="gnutls-pkcs7-init"><primary sortas="gnutls_pkcs7_init">gnutls_pkcs7_init</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_pkcs7_init                   (<link linkend="gnutls-pkcs7-t">gnutls_pkcs7_t</link> *pkcs7);</programlisting>
<para>
This function will initialize a PKCS7 structure. PKCS7 structures
usually contain lists of X.509 Certificates and X.509 Certificate
revocation lists.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>pkcs7</parameter>&#160;:</term>
<listitem><simpara> The structure to be initialized
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> On success, <link linkend="GNUTLS-E-SUCCESS--CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> is returned, otherwise a
  negative error value.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-pkcs7-deinit" role="function">
<title>gnutls_pkcs7_deinit ()</title>
<indexterm zone="gnutls-pkcs7-deinit"><primary sortas="gnutls_pkcs7_deinit">gnutls_pkcs7_deinit</primary></indexterm><programlisting><link linkend="void">void</link>                gnutls_pkcs7_deinit                 (<link linkend="gnutls-pkcs7-t">gnutls_pkcs7_t</link> pkcs7);</programlisting>
<para>
This function will deinitialize a PKCS7 structure.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>pkcs7</parameter>&#160;:</term>
<listitem><simpara> The structure to be initialized
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-pkcs7-import" role="function">
<title>gnutls_pkcs7_import ()</title>
<indexterm zone="gnutls-pkcs7-import"><primary sortas="gnutls_pkcs7_import">gnutls_pkcs7_import</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_pkcs7_import                 (<link linkend="gnutls-pkcs7-t">gnutls_pkcs7_t</link> pkcs7,
                                                         const <link linkend="gnutls-datum-t">gnutls_datum_t</link> *data,
                                                         <link linkend="gnutls-x509-crt-fmt-t">gnutls_x509_crt_fmt_t</link> format);</programlisting>
<para>
This function will convert the given DER or PEM encoded PKCS7 to
the native <link linkend="gnutls-pkcs7-t"><type>gnutls_pkcs7_t</type></link> format.  The output will be stored in
'pkcs7'.
</para>
<para>
If the PKCS7 is PEM encoded it should have a header of "PKCS7".</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>pkcs7</parameter>&#160;:</term>
<listitem><simpara> The structure to store the parsed PKCS7.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>data</parameter>&#160;:</term>
<listitem><simpara> The DER or PEM encoded PKCS7.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>format</parameter>&#160;:</term>
<listitem><simpara> One of DER or PEM
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> On success, <link linkend="GNUTLS-E-SUCCESS--CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> is returned, otherwise a
  negative error value.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-pkcs7-export" role="function">
<title>gnutls_pkcs7_export ()</title>
<indexterm zone="gnutls-pkcs7-export"><primary sortas="gnutls_pkcs7_export">gnutls_pkcs7_export</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_pkcs7_export                 (<link linkend="gnutls-pkcs7-t">gnutls_pkcs7_t</link> pkcs7,
                                                         <link linkend="gnutls-x509-crt-fmt-t">gnutls_x509_crt_fmt_t</link> format,
                                                         <link linkend="void">void</link> *output_data,
                                                         <link linkend="size-t">size_t</link> *output_data_size);</programlisting>
<para>
This function will export the pkcs7 structure to DER or PEM format.
</para>
<para>
If the buffer provided is not long enough to hold the output, then
*<parameter>output_data_size</parameter> is updated and <link linkend="GNUTLS-E-SHORT-MEMORY-BUFFER--CAPS"><literal>GNUTLS_E_SHORT_MEMORY_BUFFER</literal></link>
will be returned.
</para>
<para>
If the structure is PEM encoded, it will have a header
of "BEGIN PKCS7".</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>pkcs7</parameter>&#160;:</term>
<listitem><simpara> Holds the pkcs7 structure
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>format</parameter>&#160;:</term>
<listitem><simpara> the format of output params. One of PEM or DER.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>output_data</parameter>&#160;:</term>
<listitem><simpara> will contain a structure PEM or DER encoded
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>output_data_size</parameter>&#160;:</term>
<listitem><simpara> holds the size of output_data (and will be
  replaced by the actual size of parameters)
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> On success, <link linkend="GNUTLS-E-SUCCESS--CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> is returned, otherwise a
  negative error value.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-pkcs7-get-crt-count" role="function">
<title>gnutls_pkcs7_get_crt_count ()</title>
<indexterm zone="gnutls-pkcs7-get-crt-count"><primary sortas="gnutls_pkcs7_get_crt_count">gnutls_pkcs7_get_crt_count</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_pkcs7_get_crt_count          (<link linkend="gnutls-pkcs7-t">gnutls_pkcs7_t</link> pkcs7);</programlisting>
<para>
This function will return the number of certifcates in the PKCS7
or RFC2630 certificate set.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>pkcs7</parameter>&#160;:</term>
<listitem><simpara> should contain a <link linkend="gnutls-pkcs7-t"><type>gnutls_pkcs7_t</type></link> structure
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> On success, <link linkend="GNUTLS-E-SUCCESS--CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> is returned, otherwise a
  negative error value.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-pkcs7-get-crt-raw" role="function">
<title>gnutls_pkcs7_get_crt_raw ()</title>
<indexterm zone="gnutls-pkcs7-get-crt-raw"><primary sortas="gnutls_pkcs7_get_crt_raw">gnutls_pkcs7_get_crt_raw</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_pkcs7_get_crt_raw            (<link linkend="gnutls-pkcs7-t">gnutls_pkcs7_t</link> pkcs7,
                                                         <link linkend="int">int</link> indx,
                                                         <link linkend="void">void</link> *certificate,
                                                         <link linkend="size-t">size_t</link> *certificate_size);</programlisting>
<para>
This function will return a certificate of the PKCS7 or RFC2630
certificate set.
</para>
<para>
After the last certificate has been read
<link linkend="GNUTLS-E-REQUESTED-DATA-NOT-AVAILABLE--CAPS"><literal>GNUTLS_E_REQUESTED_DATA_NOT_AVAILABLE</literal></link> will be returned.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>pkcs7</parameter>&#160;:</term>
<listitem><simpara> should contain a gnutls_pkcs7_t structure
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>indx</parameter>&#160;:</term>
<listitem><simpara> contains the index of the certificate to extract
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>certificate</parameter>&#160;:</term>
<listitem><simpara> the contents of the certificate will be copied
  there (may be null)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>certificate_size</parameter>&#160;:</term>
<listitem><simpara> should hold the size of the certificate
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> On success, <link linkend="GNUTLS-E-SUCCESS--CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> is returned, otherwise a
  negative error value.  If the provided buffer is not long enough,
  then <parameter>certificate_size</parameter> is updated and
  <link linkend="GNUTLS-E-SHORT-MEMORY-BUFFER--CAPS"><literal>GNUTLS_E_SHORT_MEMORY_BUFFER</literal></link> is returned.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-pkcs7-set-crt-raw" role="function">
<title>gnutls_pkcs7_set_crt_raw ()</title>
<indexterm zone="gnutls-pkcs7-set-crt-raw"><primary sortas="gnutls_pkcs7_set_crt_raw">gnutls_pkcs7_set_crt_raw</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_pkcs7_set_crt_raw            (<link linkend="gnutls-pkcs7-t">gnutls_pkcs7_t</link> pkcs7,
                                                         const <link linkend="gnutls-datum-t">gnutls_datum_t</link> *crt);</programlisting>
<para>
This function will add a certificate to the PKCS7 or RFC2630
certificate set.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>pkcs7</parameter>&#160;:</term>
<listitem><simpara> should contain a <link linkend="gnutls-pkcs7-t"><type>gnutls_pkcs7_t</type></link> structure
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>crt</parameter>&#160;:</term>
<listitem><simpara> the DER encoded certificate to be added
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> On success, <link linkend="GNUTLS-E-SUCCESS--CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> is returned, otherwise a
  negative error value.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-pkcs7-set-crt" role="function">
<title>gnutls_pkcs7_set_crt ()</title>
<indexterm zone="gnutls-pkcs7-set-crt"><primary sortas="gnutls_pkcs7_set_crt">gnutls_pkcs7_set_crt</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_pkcs7_set_crt                (<link linkend="gnutls-pkcs7-t">gnutls_pkcs7_t</link> pkcs7,
                                                         <link linkend="gnutls-x509-crt-t">gnutls_x509_crt_t</link> crt);</programlisting>
<para>
This function will add a parsed certificate to the PKCS7 or
RFC2630 certificate set.  This is a wrapper function over
<link linkend="gnutls-pkcs7-set-crt-raw"><function>gnutls_pkcs7_set_crt_raw()</function></link> .</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>pkcs7</parameter>&#160;:</term>
<listitem><simpara> should contain a <link linkend="gnutls-pkcs7-t"><type>gnutls_pkcs7_t</type></link> structure
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>crt</parameter>&#160;:</term>
<listitem><simpara> the certificate to be copied.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> On success, <link linkend="GNUTLS-E-SUCCESS--CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> is returned, otherwise a
  negative error value.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-pkcs7-delete-crt" role="function">
<title>gnutls_pkcs7_delete_crt ()</title>
<indexterm zone="gnutls-pkcs7-delete-crt"><primary sortas="gnutls_pkcs7_delete_crt">gnutls_pkcs7_delete_crt</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_pkcs7_delete_crt             (<link linkend="gnutls-pkcs7-t">gnutls_pkcs7_t</link> pkcs7,
                                                         <link linkend="int">int</link> indx);</programlisting>
<para>
This function will delete a certificate from a PKCS7 or RFC2630
certificate set.  Index starts from 0. Returns 0 on success.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>pkcs7</parameter>&#160;:</term>
<listitem><simpara> should contain a gnutls_pkcs7_t structure
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>indx</parameter>&#160;:</term>
<listitem><simpara> the index of the certificate to delete
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> On success, <link linkend="GNUTLS-E-SUCCESS--CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> is returned, otherwise a
  negative error value.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-pkcs7-get-crl-raw" role="function">
<title>gnutls_pkcs7_get_crl_raw ()</title>
<indexterm zone="gnutls-pkcs7-get-crl-raw"><primary sortas="gnutls_pkcs7_get_crl_raw">gnutls_pkcs7_get_crl_raw</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_pkcs7_get_crl_raw            (<link linkend="gnutls-pkcs7-t">gnutls_pkcs7_t</link> pkcs7,
                                                         <link linkend="int">int</link> indx,
                                                         <link linkend="void">void</link> *crl,
                                                         <link linkend="size-t">size_t</link> *crl_size);</programlisting>
<para>
This function will return a crl of the PKCS7 or RFC2630 crl set.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>pkcs7</parameter>&#160;:</term>
<listitem><simpara> should contain a <link linkend="gnutls-pkcs7-t"><type>gnutls_pkcs7_t</type></link> structure
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>indx</parameter>&#160;:</term>
<listitem><simpara> contains the index of the crl to extract
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>crl</parameter>&#160;:</term>
<listitem><simpara> the contents of the crl will be copied there (may be null)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>crl_size</parameter>&#160;:</term>
<listitem><simpara> should hold the size of the crl
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> On success, <link linkend="GNUTLS-E-SUCCESS--CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> is returned, otherwise a
  negative error value.  If the provided buffer is not long enough,
  then <parameter>crl_size</parameter> is updated and <link linkend="GNUTLS-E-SHORT-MEMORY-BUFFER--CAPS"><literal>GNUTLS_E_SHORT_MEMORY_BUFFER</literal></link> is
  returned.  After the last crl has been read
  <link linkend="GNUTLS-E-REQUESTED-DATA-NOT-AVAILABLE--CAPS"><literal>GNUTLS_E_REQUESTED_DATA_NOT_AVAILABLE</literal></link> will be returned.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-pkcs7-get-crl-count" role="function">
<title>gnutls_pkcs7_get_crl_count ()</title>
<indexterm zone="gnutls-pkcs7-get-crl-count"><primary sortas="gnutls_pkcs7_get_crl_count">gnutls_pkcs7_get_crl_count</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_pkcs7_get_crl_count          (<link linkend="gnutls-pkcs7-t">gnutls_pkcs7_t</link> pkcs7);</programlisting>
<para>
This function will return the number of certifcates in the PKCS7
or RFC2630 crl set.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>pkcs7</parameter>&#160;:</term>
<listitem><simpara> should contain a gnutls_pkcs7_t structure
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> On success, <link linkend="GNUTLS-E-SUCCESS--CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> is returned, otherwise a
  negative error value.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-pkcs7-set-crl-raw" role="function">
<title>gnutls_pkcs7_set_crl_raw ()</title>
<indexterm zone="gnutls-pkcs7-set-crl-raw"><primary sortas="gnutls_pkcs7_set_crl_raw">gnutls_pkcs7_set_crl_raw</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_pkcs7_set_crl_raw            (<link linkend="gnutls-pkcs7-t">gnutls_pkcs7_t</link> pkcs7,
                                                         const <link linkend="gnutls-datum-t">gnutls_datum_t</link> *crl);</programlisting>
<para>
This function will add a crl to the PKCS7 or RFC2630 crl set.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>pkcs7</parameter>&#160;:</term>
<listitem><simpara> should contain a <link linkend="gnutls-pkcs7-t"><type>gnutls_pkcs7_t</type></link> structure
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>crl</parameter>&#160;:</term>
<listitem><simpara> the DER encoded crl to be added
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> On success, <link linkend="GNUTLS-E-SUCCESS--CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> is returned, otherwise a
  negative error value.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-pkcs7-set-crl" role="function">
<title>gnutls_pkcs7_set_crl ()</title>
<indexterm zone="gnutls-pkcs7-set-crl"><primary sortas="gnutls_pkcs7_set_crl">gnutls_pkcs7_set_crl</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_pkcs7_set_crl                (<link linkend="gnutls-pkcs7-t">gnutls_pkcs7_t</link> pkcs7,
                                                         <link linkend="gnutls-x509-crl-t">gnutls_x509_crl_t</link> crl);</programlisting>
<para>
This function will add a parsed CRL to the PKCS7 or RFC2630 crl
set.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>pkcs7</parameter>&#160;:</term>
<listitem><simpara> should contain a <link linkend="gnutls-pkcs7-t"><type>gnutls_pkcs7_t</type></link> structure
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>crl</parameter>&#160;:</term>
<listitem><simpara> the DER encoded crl to be added
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> On success, <link linkend="GNUTLS-E-SUCCESS--CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> is returned, otherwise a
  negative error value.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-pkcs7-delete-crl" role="function">
<title>gnutls_pkcs7_delete_crl ()</title>
<indexterm zone="gnutls-pkcs7-delete-crl"><primary sortas="gnutls_pkcs7_delete_crl">gnutls_pkcs7_delete_crl</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_pkcs7_delete_crl             (<link linkend="gnutls-pkcs7-t">gnutls_pkcs7_t</link> pkcs7,
                                                         <link linkend="int">int</link> indx);</programlisting>
<para>
This function will delete a crl from a PKCS7 or RFC2630 crl set.
Index starts from 0. Returns 0 on success.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>pkcs7</parameter>&#160;:</term>
<listitem><simpara> should contain a <link linkend="gnutls-pkcs7-t"><type>gnutls_pkcs7_t</type></link> structure
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>indx</parameter>&#160;:</term>
<listitem><simpara> the index of the crl to delete
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> On success, <link linkend="GNUTLS-E-SUCCESS--CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> is returned, otherwise a
  negative error value.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-certificate-verify-flags" role="enum">
<title>enum gnutls_certificate_verify_flags</title>
<indexterm zone="gnutls-certificate-verify-flags"><primary sortas="gnutls_certificate_verify_flags">gnutls_certificate_verify_flags</primary></indexterm><programlisting>  typedef enum gnutls_certificate_verify_flags
  {
    /* If set a signer does not have to be a certificate authority. This
     * flag should normaly be disabled, unless you know what this means.
     */
    GNUTLS_VERIFY_DISABLE_CA_SIGN = 1,

    /* Allow only trusted CA certificates that have version 1.  This is
     * safer than GNUTLS_VERIFY_ALLOW_ANY_X509_V1_CA_CRT, and should be
     * used instead. That way only signers in your trusted list will be
     * allowed to have certificates of version 1.
     */
    GNUTLS_VERIFY_ALLOW_X509_V1_CA_CRT = 2,

    /* If a certificate is not signed by anyone trusted but exists in
     * the trusted CA list do not treat it as trusted.
     */
    GNUTLS_VERIFY_DO_NOT_ALLOW_SAME = 4,

    /* Allow CA certificates that have version 1 (both root and
     * intermediate). This might be dangerous since those haven't the
     * basicConstraints extension. Must be used in combination with
     * GNUTLS_VERIFY_ALLOW_X509_V1_CA_CRT.
     */
    GNUTLS_VERIFY_ALLOW_ANY_X509_V1_CA_CRT = 8,

    /* Allow certificates to be signed using the broken MD2 algorithm.
     */
    GNUTLS_VERIFY_ALLOW_SIGN_RSA_MD2 = 16,

    /* Allow certificates to be signed using the broken MD5 algorithm.
     */
    GNUTLS_VERIFY_ALLOW_SIGN_RSA_MD5 = 32,

    /* Disable checking of activation and expiration validity
     * periods of certificate chains. Don't set this unless you
     * understand the security implications.
     */
    GNUTLS_VERIFY_DISABLE_TIME_CHECKS = 64
  } gnutls_certificate_verify_flags;
</programlisting>
<para>
</para></refsect2>
<refsect2 id="gnutls-x509-crt-check-issuer" role="function">
<title>gnutls_x509_crt_check_issuer ()</title>
<indexterm zone="gnutls-x509-crt-check-issuer"><primary sortas="gnutls_x509_crt_check_issuer">gnutls_x509_crt_check_issuer</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_x509_crt_check_issuer        (<link linkend="gnutls-x509-crt-t">gnutls_x509_crt_t</link> cert,
                                                         <link linkend="gnutls-x509-crt-t">gnutls_x509_crt_t</link> issuer);</programlisting>
<para>
This function will check if the given certificate was issued by the
given issuer.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>cert</parameter>&#160;:</term>
<listitem><simpara> is the certificate to be checked
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>issuer</parameter>&#160;:</term>
<listitem><simpara> is the certificate of a possible issuer
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> It will return true (1) if the given certificate is issued
  by the given issuer, and false (0) if not.  A negative value is
  returned in case of an error.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-x509-crt-list-verify" role="function">
<title>gnutls_x509_crt_list_verify ()</title>
<indexterm zone="gnutls-x509-crt-list-verify"><primary sortas="gnutls_x509_crt_list_verify">gnutls_x509_crt_list_verify</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_x509_crt_list_verify         (const <link linkend="gnutls-x509-crt-t">gnutls_x509_crt_t</link> *cert_list,
                                                         <link linkend="int">int</link> cert_list_length,
                                                         const <link linkend="gnutls-x509-crt-t">gnutls_x509_crt_t</link> *CA_list,
                                                         <link linkend="int">int</link> CA_list_length,
                                                         const <link linkend="gnutls-x509-crl-t">gnutls_x509_crl_t</link> *CRL_list,
                                                         <link linkend="int">int</link> CRL_list_length,
                                                         unsigned <link linkend="int">int</link> flags,
                                                         unsigned <link linkend="int">int</link> *verify);</programlisting>
<para>
This function will try to verify the given certificate list and return its status.
If no flags are specified (0), this function will use the 
basicConstraints (2.5.29.19) PKIX extension. This means that only a certificate 
authority is allowed to sign a certificate.
</para>
<para>
You must also check the peer's name in order to check if the verified 
certificate belongs to the actual peer. 
</para>
<para>
The certificate verification output will be put in <parameter>verify</parameter> and will be
one or more of the gnutls_certificate_status_t enumerated elements bitwise or'd.
For a more detailed verification status use <link linkend="gnutls-x509-crt-verify"><function>gnutls_x509_crt_verify()</function></link> per list
element.
</para>
<para>
GNUTLS_CERT_INVALID: the certificate chain is not valid.
</para>
<para>
GNUTLS_CERT_REVOKED: a certificate in the chain has been revoked.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>cert_list</parameter>&#160;:</term>
<listitem><simpara> is the certificate list to be verified
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>cert_list_length</parameter>&#160;:</term>
<listitem><simpara> holds the number of certificate in cert_list
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>CA_list</parameter>&#160;:</term>
<listitem><simpara> is the CA list which will be used in verification
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>CA_list_length</parameter>&#160;:</term>
<listitem><simpara> holds the number of CA certificate in CA_list
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>CRL_list</parameter>&#160;:</term>
<listitem><simpara> holds a list of CRLs.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>CRL_list_length</parameter>&#160;:</term>
<listitem><simpara> the length of CRL list.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>flags</parameter>&#160;:</term>
<listitem><simpara> Flags that may be used to change the verification algorithm. Use OR of the gnutls_certificate_verify_flags enumerations.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>verify</parameter>&#160;:</term>
<listitem><simpara> will hold the certificate verification output.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> On success, <link linkend="GNUTLS-E-SUCCESS--CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> is returned, otherwise a
  negative error value.and a negative value in case of an error.

</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-x509-crt-verify" role="function">
<title>gnutls_x509_crt_verify ()</title>
<indexterm zone="gnutls-x509-crt-verify"><primary sortas="gnutls_x509_crt_verify">gnutls_x509_crt_verify</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_x509_crt_verify              (<link linkend="gnutls-x509-crt-t">gnutls_x509_crt_t</link> cert,
                                                         const <link linkend="gnutls-x509-crt-t">gnutls_x509_crt_t</link> *CA_list,
                                                         <link linkend="int">int</link> CA_list_length,
                                                         unsigned <link linkend="int">int</link> flags,
                                                         unsigned <link linkend="int">int</link> *verify);</programlisting>
<para>
This function will try to verify the given certificate and return its status. 
The verification output in this functions cannot be GNUTLS_CERT_NOT_VALID.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>cert</parameter>&#160;:</term>
<listitem><simpara> is the certificate to be verified
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>CA_list</parameter>&#160;:</term>
<listitem><simpara> is one certificate that is considered to be trusted one
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>CA_list_length</parameter>&#160;:</term>
<listitem><simpara> holds the number of CA certificate in CA_list
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>flags</parameter>&#160;:</term>
<listitem><simpara> Flags that may be used to change the verification algorithm. Use OR of the gnutls_certificate_verify_flags enumerations.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>verify</parameter>&#160;:</term>
<listitem><simpara> will hold the certificate verification output.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> On success, <link linkend="GNUTLS-E-SUCCESS--CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> is returned, otherwise a
  negative error value.and a negative value in case of an error.

</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-x509-crl-verify" role="function">
<title>gnutls_x509_crl_verify ()</title>
<indexterm zone="gnutls-x509-crl-verify"><primary sortas="gnutls_x509_crl_verify">gnutls_x509_crl_verify</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_x509_crl_verify              (<link linkend="gnutls-x509-crl-t">gnutls_x509_crl_t</link> crl,
                                                         const <link linkend="gnutls-x509-crt-t">gnutls_x509_crt_t</link> *CA_list,
                                                         <link linkend="int">int</link> CA_list_length,
                                                         unsigned <link linkend="int">int</link> flags,
                                                         unsigned <link linkend="int">int</link> *verify);</programlisting>
<para>
This function will try to verify the given crl and return its status.
See <link linkend="gnutls-x509-crt-list-verify"><function>gnutls_x509_crt_list_verify()</function></link> for a detailed description of
return values.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>crl</parameter>&#160;:</term>
<listitem><simpara> is the crl to be verified
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>CA_list</parameter>&#160;:</term>
<listitem><simpara> is a certificate list that is considered to be trusted one
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>CA_list_length</parameter>&#160;:</term>
<listitem><simpara> holds the number of CA certificates in CA_list
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>flags</parameter>&#160;:</term>
<listitem><simpara> Flags that may be used to change the verification algorithm. Use OR of the gnutls_certificate_verify_flags enumerations.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>verify</parameter>&#160;:</term>
<listitem><simpara> will hold the crl verification output.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> On success, <link linkend="GNUTLS-E-SUCCESS--CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> is returned, otherwise a
  negative error value.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-x509-crt-check-revocation" role="function">
<title>gnutls_x509_crt_check_revocation ()</title>
<indexterm zone="gnutls-x509-crt-check-revocation"><primary sortas="gnutls_x509_crt_check_revocation">gnutls_x509_crt_check_revocation</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_x509_crt_check_revocation    (<link linkend="gnutls-x509-crt-t">gnutls_x509_crt_t</link> cert,
                                                         const <link linkend="gnutls-x509-crl-t">gnutls_x509_crl_t</link> *crl_list,
                                                         <link linkend="int">int</link> crl_list_length);</programlisting>
<para>
This function will return check if the given certificate is
revoked.  It is assumed that the CRLs have been verified before.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>cert</parameter>&#160;:</term>
<listitem><simpara> should contain a <link linkend="gnutls-x509-crt-t"><type>gnutls_x509_crt_t</type></link> structure
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>crl_list</parameter>&#160;:</term>
<listitem><simpara> should contain a list of gnutls_x509_crl_t structures
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>crl_list_length</parameter>&#160;:</term>
<listitem><simpara> the length of the crl_list
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> 0 if the certificate is NOT revoked, and 1 if it is.  A
negative value is returned on error.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-x509-crt-get-fingerprint" role="function">
<title>gnutls_x509_crt_get_fingerprint ()</title>
<indexterm zone="gnutls-x509-crt-get-fingerprint"><primary sortas="gnutls_x509_crt_get_fingerprint">gnutls_x509_crt_get_fingerprint</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_x509_crt_get_fingerprint     (<link linkend="gnutls-x509-crt-t">gnutls_x509_crt_t</link> cert,
                                                         <link linkend="gnutls-digest-algorithm-t">gnutls_digest_algorithm_t</link> algo,
                                                         <link linkend="void">void</link> *buf,
                                                         <link linkend="size-t">size_t</link> *sizeof_buf);</programlisting>
<para>
This function will calculate and copy the certificate's fingerprint
in the provided buffer.
</para>
<para>
If the buffer is null then only the size will be filled.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>cert</parameter>&#160;:</term>
<listitem><simpara> should contain a <link linkend="gnutls-x509-crt-t"><type>gnutls_x509_crt_t</type></link> structure
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>algo</parameter>&#160;:</term>
<listitem><simpara> is a digest algorithm
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>buf</parameter>&#160;:</term>
<listitem><simpara> a pointer to a structure to hold the fingerprint (may be null)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>sizeof_buf</parameter>&#160;:</term>
<listitem><simpara> initially holds the size of <parameter>buf</parameter>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> <link linkend="GNUTLS-E-SHORT-MEMORY-BUFFER--CAPS"><literal>GNUTLS_E_SHORT_MEMORY_BUFFER</literal></link> if the provided buffer is
not long enough, and in that case the *sizeof_buf will be updated
with the required size.  On success 0 is returned.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-x509-crt-get-key-purpose-oid" role="function">
<title>gnutls_x509_crt_get_key_purpose_oid ()</title>
<indexterm zone="gnutls-x509-crt-get-key-purpose-oid"><primary sortas="gnutls_x509_crt_get_key_purpose_oid">gnutls_x509_crt_get_key_purpose_oid</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_x509_crt_get_key_purpose_oid (<link linkend="gnutls-x509-crt-t">gnutls_x509_crt_t</link> cert,
                                                         <link linkend="int">int</link> indx,
                                                         <link linkend="void">void</link> *oid,
                                                         <link linkend="size-t">size_t</link> *sizeof_oid,
                                                         unsigned <link linkend="int">int</link> *critical);</programlisting>
<para>
This function will extract the key purpose OIDs of the Certificate
specified by the given index.  These are stored in the Extended
Key Usage extension (2.5.29.37) See the GNUTLS_KP_* definitions
for human readable names.
</para>
<para>
If <parameter>oid</parameter> is null then only the size will be filled.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>cert</parameter>&#160;:</term>
<listitem><simpara> should contain a <link linkend="gnutls-x509-crt-t"><type>gnutls_x509_crt_t</type></link> structure
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>indx</parameter>&#160;:</term>
<listitem><simpara> This specifies which OID to return. Use zero to get the first one.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>oid</parameter>&#160;:</term>
<listitem><simpara> a pointer to a buffer to hold the OID (may be null)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>sizeof_oid</parameter>&#160;:</term>
<listitem><simpara> initially holds the size of <parameter>oid</parameter>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>critical</parameter>&#160;:</term>
<listitem><simpara> output flag to indicate criticality of extension
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> <link linkend="GNUTLS-E-SHORT-MEMORY-BUFFER--CAPS"><literal>GNUTLS_E_SHORT_MEMORY_BUFFER</literal></link> if the provided buffer is
  not long enough, and in that case the *sizeof_oid will be
  updated with the required size.  On success 0 is returned.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-x509-crt-set-key-purpose-oid" role="function">
<title>gnutls_x509_crt_set_key_purpose_oid ()</title>
<indexterm zone="gnutls-x509-crt-set-key-purpose-oid"><primary sortas="gnutls_x509_crt_set_key_purpose_oid">gnutls_x509_crt_set_key_purpose_oid</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_x509_crt_set_key_purpose_oid (<link linkend="gnutls-x509-crt-t">gnutls_x509_crt_t</link> cert,
                                                         const <link linkend="void">void</link> *oid,
                                                         unsigned <link linkend="int">int</link> critical);</programlisting>
<para>
This function will set the key purpose OIDs of the Certificate.
These are stored in the Extended Key Usage extension (2.5.29.37)
See the GNUTLS_KP_* definitions for human readable names.
</para>
<para>
Subsequent calls to this function will append OIDs to the OID list.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>cert</parameter>&#160;:</term>
<listitem><simpara> a certificate of type <link linkend="gnutls-x509-crt-t"><type>gnutls_x509_crt_t</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>oid</parameter>&#160;:</term>
<listitem><simpara> a pointer to a null terminated string that holds the OID
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>critical</parameter>&#160;:</term>
<listitem><simpara> Whether this extension will be critical or not
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> On success, <link linkend="GNUTLS-E-SUCCESS--CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> (zero) is returned,
  otherwise an error code is returned.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-pkcs-encrypt-flags-t" role="enum">
<title>enum gnutls_pkcs_encrypt_flags_t</title>
<indexterm zone="gnutls-pkcs-encrypt-flags-t"><primary sortas="gnutls_pkcs_encrypt_flags_t">gnutls_pkcs_encrypt_flags_t</primary></indexterm><programlisting>  typedef enum gnutls_pkcs_encrypt_flags_t
  {
    GNUTLS_PKCS_PLAIN = 1,	/* if set the private key will not
				 * be encrypted.
				 */
    GNUTLS_PKCS_USE_PKCS12_3DES = 2,
    GNUTLS_PKCS_USE_PKCS12_ARCFOUR = 4,
    GNUTLS_PKCS_USE_PKCS12_RC2_40 = 8,
    GNUTLS_PKCS_USE_PBES2_3DES = 16
  } gnutls_pkcs_encrypt_flags_t;
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-PKCS8-PLAIN--CAPS" role="macro">
<title>GNUTLS_PKCS8_PLAIN</title>
<indexterm zone="GNUTLS-PKCS8-PLAIN--CAPS"><primary sortas="GNUTLS_PKCS8_PLAIN">GNUTLS_PKCS8_PLAIN</primary></indexterm><programlisting>#define GNUTLS_PKCS8_PLAIN GNUTLS_PKCS_PLAIN
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-PKCS8-USE-PKCS12-3DES--CAPS" role="macro">
<title>GNUTLS_PKCS8_USE_PKCS12_3DES</title>
<indexterm zone="GNUTLS-PKCS8-USE-PKCS12-3DES--CAPS"><primary sortas="GNUTLS_PKCS8_USE_PKCS12_3DES">GNUTLS_PKCS8_USE_PKCS12_3DES</primary></indexterm><programlisting>#define GNUTLS_PKCS8_USE_PKCS12_3DES GNUTLS_PKCS_USE_PKCS12_3DES
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-PKCS8-USE-PKCS12-ARCFOUR--CAPS" role="macro">
<title>GNUTLS_PKCS8_USE_PKCS12_ARCFOUR</title>
<indexterm zone="GNUTLS-PKCS8-USE-PKCS12-ARCFOUR--CAPS"><primary sortas="GNUTLS_PKCS8_USE_PKCS12_ARCFOUR">GNUTLS_PKCS8_USE_PKCS12_ARCFOUR</primary></indexterm><programlisting>#define GNUTLS_PKCS8_USE_PKCS12_ARCFOUR GNUTLS_PKCS_USE_PKCS12_ARCFOUR
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-PKCS8-USE-PKCS12-RC2-40--CAPS" role="macro">
<title>GNUTLS_PKCS8_USE_PKCS12_RC2_40</title>
<indexterm zone="GNUTLS-PKCS8-USE-PKCS12-RC2-40--CAPS"><primary sortas="GNUTLS_PKCS8_USE_PKCS12_RC2_40">GNUTLS_PKCS8_USE_PKCS12_RC2_40</primary></indexterm><programlisting>#define GNUTLS_PKCS8_USE_PKCS12_RC2_40 GNUTLS_PKCS_USE_PKCS12_RC2_40
</programlisting>
<para>
</para></refsect2>
<refsect2 id="gnutls-x509-privkey-init" role="function">
<title>gnutls_x509_privkey_init ()</title>
<indexterm zone="gnutls-x509-privkey-init"><primary sortas="gnutls_x509_privkey_init">gnutls_x509_privkey_init</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_x509_privkey_init            (<link linkend="gnutls-x509-privkey-t">gnutls_x509_privkey_t</link> *key);</programlisting>
<para>
This function will initialize an private key structure.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>key</parameter>&#160;:</term>
<listitem><simpara> The structure to be initialized
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> On success, <link linkend="GNUTLS-E-SUCCESS--CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> is returned, otherwise a
  negative error value.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-x509-privkey-deinit" role="function">
<title>gnutls_x509_privkey_deinit ()</title>
<indexterm zone="gnutls-x509-privkey-deinit"><primary sortas="gnutls_x509_privkey_deinit">gnutls_x509_privkey_deinit</primary></indexterm><programlisting><link linkend="void">void</link>                gnutls_x509_privkey_deinit          (<link linkend="gnutls-x509-privkey-t">gnutls_x509_privkey_t</link> key);</programlisting>
<para>
This function will deinitialize a private key structure.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>key</parameter>&#160;:</term>
<listitem><simpara> The structure to be initialized
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-x509-privkey-cpy" role="function">
<title>gnutls_x509_privkey_cpy ()</title>
<indexterm zone="gnutls-x509-privkey-cpy"><primary sortas="gnutls_x509_privkey_cpy">gnutls_x509_privkey_cpy</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_x509_privkey_cpy             (<link linkend="gnutls-x509-privkey-t">gnutls_x509_privkey_t</link> dst,
                                                         <link linkend="gnutls-x509-privkey-t">gnutls_x509_privkey_t</link> src);</programlisting>
<para>
This function will copy a private key from source to destination
key.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>dst</parameter>&#160;:</term>
<listitem><simpara> The destination key, which should be initialized.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>src</parameter>&#160;:</term>
<listitem><simpara> The source key
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> On success, <link linkend="GNUTLS-E-SUCCESS--CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> is returned, otherwise a
  negative error value.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-x509-privkey-import" role="function">
<title>gnutls_x509_privkey_import ()</title>
<indexterm zone="gnutls-x509-privkey-import"><primary sortas="gnutls_x509_privkey_import">gnutls_x509_privkey_import</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_x509_privkey_import          (<link linkend="gnutls-x509-privkey-t">gnutls_x509_privkey_t</link> key,
                                                         const <link linkend="gnutls-datum-t">gnutls_datum_t</link> *data,
                                                         <link linkend="gnutls-x509-crt-fmt-t">gnutls_x509_crt_fmt_t</link> format);</programlisting>
<para>
This function will convert the given DER or PEM encoded key to the
native <link linkend="gnutls-x509-privkey-t"><type>gnutls_x509_privkey_t</type></link> format. The output will be stored in
<parameter>key</parameter> .
</para>
<para>
If the key is PEM encoded it should have a header of "RSA PRIVATE
KEY", or "DSA PRIVATE KEY".</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>key</parameter>&#160;:</term>
<listitem><simpara> The structure to store the parsed key
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>data</parameter>&#160;:</term>
<listitem><simpara> The DER or PEM encoded certificate.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>format</parameter>&#160;:</term>
<listitem><simpara> One of DER or PEM
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> On success, <link linkend="GNUTLS-E-SUCCESS--CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> is returned, otherwise a
  negative error value.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-x509-privkey-import-pkcs8" role="function">
<title>gnutls_x509_privkey_import_pkcs8 ()</title>
<indexterm zone="gnutls-x509-privkey-import-pkcs8"><primary sortas="gnutls_x509_privkey_import_pkcs8">gnutls_x509_privkey_import_pkcs8</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_x509_privkey_import_pkcs8    (<link linkend="gnutls-x509-privkey-t">gnutls_x509_privkey_t</link> key,
                                                         const <link linkend="gnutls-datum-t">gnutls_datum_t</link> *data,
                                                         <link linkend="gnutls-x509-crt-fmt-t">gnutls_x509_crt_fmt_t</link> format,
                                                         const <link linkend="char">char</link> *password,
                                                         unsigned <link linkend="int">int</link> flags);</programlisting>
<para>
This function will convert the given DER or PEM encoded PKCS8 2.0 encrypted key
to the native gnutls_x509_privkey_t format. The output will be stored in <parameter>key</parameter>.
Both RSA and DSA keys can be imported, and flags can only be used to indicate
an unencrypted key.
</para>
<para>
The <parameter>password</parameter> can be either ASCII or UTF-8 in the default PBES2
encryption schemas, or ASCII for the PKCS12 schemas.
</para>
<para>
If the Certificate is PEM encoded it should have a header of "ENCRYPTED PRIVATE KEY",
or "PRIVATE KEY". You only need to specify the flags if the key is DER encoded, since
in that case the encryption status cannot be auto-detected.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>key</parameter>&#160;:</term>
<listitem><simpara> The structure to store the parsed key
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>data</parameter>&#160;:</term>
<listitem><simpara> The DER or PEM encoded key.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>format</parameter>&#160;:</term>
<listitem><simpara> One of DER or PEM
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>password</parameter>&#160;:</term>
<listitem><simpara> the password to decrypt the key (if it is encrypted).
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>flags</parameter>&#160;:</term>
<listitem><simpara> 0 if encrypted or GNUTLS_PKCS_PLAIN if not encrypted.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> On success, <link linkend="GNUTLS-E-SUCCESS--CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> is returned, otherwise a
  negative error value.

</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-x509-privkey-import-rsa-raw" role="function">
<title>gnutls_x509_privkey_import_rsa_raw ()</title>
<indexterm zone="gnutls-x509-privkey-import-rsa-raw"><primary sortas="gnutls_x509_privkey_import_rsa_raw">gnutls_x509_privkey_import_rsa_raw</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_x509_privkey_import_rsa_raw  (<link linkend="gnutls-x509-privkey-t">gnutls_x509_privkey_t</link> key,
                                                         const <link linkend="gnutls-datum-t">gnutls_datum_t</link> *m,
                                                         const <link linkend="gnutls-datum-t">gnutls_datum_t</link> *e,
                                                         const <link linkend="gnutls-datum-t">gnutls_datum_t</link> *d,
                                                         const <link linkend="gnutls-datum-t">gnutls_datum_t</link> *p,
                                                         const <link linkend="gnutls-datum-t">gnutls_datum_t</link> *q,
                                                         const <link linkend="gnutls-datum-t">gnutls_datum_t</link> *u);</programlisting>
<para>
This function will convert the given RSA raw parameters to the
native <link linkend="gnutls-x509-privkey-t"><type>gnutls_x509_privkey_t</type></link> format.  The output will be stored in
<parameter>key</parameter>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>key</parameter>&#160;:</term>
<listitem><simpara> The structure to store the parsed key
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>m</parameter>&#160;:</term>
<listitem><simpara> holds the modulus
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>e</parameter>&#160;:</term>
<listitem><simpara> holds the public exponent
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>d</parameter>&#160;:</term>
<listitem><simpara> holds the private exponent
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>p</parameter>&#160;:</term>
<listitem><simpara> holds the first prime (p)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>q</parameter>&#160;:</term>
<listitem><simpara> holds the second prime (q)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>u</parameter>&#160;:</term>
<listitem><simpara> holds the coefficient
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> On success, <link linkend="GNUTLS-E-SUCCESS--CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> is returned, otherwise a
  negative error value.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-x509-privkey-fix" role="function">
<title>gnutls_x509_privkey_fix ()</title>
<indexterm zone="gnutls-x509-privkey-fix"><primary sortas="gnutls_x509_privkey_fix">gnutls_x509_privkey_fix</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_x509_privkey_fix             (<link linkend="gnutls-x509-privkey-t">gnutls_x509_privkey_t</link> key);</programlisting>
<para>
This function will recalculate the secondary parameters in a key.
In RSA keys, this can be the coefficient and exponent1,2.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>key</parameter>&#160;:</term>
<listitem><simpara> Holds the key
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> On success, <link linkend="GNUTLS-E-SUCCESS--CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> is returned, otherwise a
  negative error value.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-x509-privkey-export-dsa-raw" role="function">
<title>gnutls_x509_privkey_export_dsa_raw ()</title>
<indexterm zone="gnutls-x509-privkey-export-dsa-raw"><primary sortas="gnutls_x509_privkey_export_dsa_raw">gnutls_x509_privkey_export_dsa_raw</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_x509_privkey_export_dsa_raw  (<link linkend="gnutls-x509-privkey-t">gnutls_x509_privkey_t</link> key,
                                                         <link linkend="gnutls-datum-t">gnutls_datum_t</link> *p,
                                                         <link linkend="gnutls-datum-t">gnutls_datum_t</link> *q,
                                                         <link linkend="gnutls-datum-t">gnutls_datum_t</link> *g,
                                                         <link linkend="gnutls-datum-t">gnutls_datum_t</link> *y,
                                                         <link linkend="gnutls-datum-t">gnutls_datum_t</link> *x);</programlisting>
<para>
This function will export the DSA private key's parameters found
in the given structure. The new parameters will be allocated using
<link linkend="gnutls-malloc"><function>gnutls_malloc()</function></link> and will be stored in the appropriate datum.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>key</parameter>&#160;:</term>
<listitem><simpara> a structure that holds the DSA parameters
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>p</parameter>&#160;:</term>
<listitem><simpara> will hold the p
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>q</parameter>&#160;:</term>
<listitem><simpara> will hold the q
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>g</parameter>&#160;:</term>
<listitem><simpara> will hold the g
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>y</parameter>&#160;:</term>
<listitem><simpara> will hold the y
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>x</parameter>&#160;:</term>
<listitem><simpara> will hold the x
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> On success, <link linkend="GNUTLS-E-SUCCESS--CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> is returned, otherwise a
  negative error value.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-x509-privkey-import-dsa-raw" role="function">
<title>gnutls_x509_privkey_import_dsa_raw ()</title>
<indexterm zone="gnutls-x509-privkey-import-dsa-raw"><primary sortas="gnutls_x509_privkey_import_dsa_raw">gnutls_x509_privkey_import_dsa_raw</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_x509_privkey_import_dsa_raw  (<link linkend="gnutls-x509-privkey-t">gnutls_x509_privkey_t</link> key,
                                                         const <link linkend="gnutls-datum-t">gnutls_datum_t</link> *p,
                                                         const <link linkend="gnutls-datum-t">gnutls_datum_t</link> *q,
                                                         const <link linkend="gnutls-datum-t">gnutls_datum_t</link> *g,
                                                         const <link linkend="gnutls-datum-t">gnutls_datum_t</link> *y,
                                                         const <link linkend="gnutls-datum-t">gnutls_datum_t</link> *x);</programlisting>
<para>
This function will convert the given DSA raw parameters to the
native <link linkend="gnutls-x509-privkey-t"><type>gnutls_x509_privkey_t</type></link> format.  The output will be stored
in <parameter>key</parameter>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>key</parameter>&#160;:</term>
<listitem><simpara> The structure to store the parsed key
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>p</parameter>&#160;:</term>
<listitem><simpara> holds the p
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>q</parameter>&#160;:</term>
<listitem><simpara> holds the q
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>g</parameter>&#160;:</term>
<listitem><simpara> holds the g
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>y</parameter>&#160;:</term>
<listitem><simpara> holds the y
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>x</parameter>&#160;:</term>
<listitem><simpara> holds the x
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> On success, <link linkend="GNUTLS-E-SUCCESS--CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> is returned, otherwise a
  negative error value.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-x509-privkey-get-pk-algorithm" role="function">
<title>gnutls_x509_privkey_get_pk_algorithm ()</title>
<indexterm zone="gnutls-x509-privkey-get-pk-algorithm"><primary sortas="gnutls_x509_privkey_get_pk_algorithm">gnutls_x509_privkey_get_pk_algorithm</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_x509_privkey_get_pk_algorithm
                                                        (<link linkend="gnutls-x509-privkey-t">gnutls_x509_privkey_t</link> key);</programlisting>
<para>
This function will return the public key algorithm of a private
key.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>key</parameter>&#160;:</term>
<listitem><simpara> should contain a <link linkend="gnutls-x509-privkey-t"><type>gnutls_x509_privkey_t</type></link> structure
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a member of the <link linkend="gnutls-pk-algorithm-t"><type>gnutls_pk_algorithm_t</type></link> enumeration on
  success, or a negative value on error.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-x509-privkey-get-key-id" role="function">
<title>gnutls_x509_privkey_get_key_id ()</title>
<indexterm zone="gnutls-x509-privkey-get-key-id"><primary sortas="gnutls_x509_privkey_get_key_id">gnutls_x509_privkey_get_key_id</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_x509_privkey_get_key_id      (<link linkend="gnutls-x509-privkey-t">gnutls_x509_privkey_t</link> key,
                                                         unsigned <link linkend="int">int</link> flags,
                                                         unsigned <link linkend="char">char</link> *output_data,
                                                         <link linkend="size-t">size_t</link> *output_data_size);</programlisting>
<para>
This function will return a unique ID the depends on the public key
parameters. This ID can be used in checking whether a certificate
corresponds to the given key.
</para>
<para>
If the buffer provided is not long enough to hold the output, then
*<parameter>output_data_size</parameter> is updated and <link linkend="GNUTLS-E-SHORT-MEMORY-BUFFER--CAPS"><literal>GNUTLS_E_SHORT_MEMORY_BUFFER</literal></link> will
be returned.  The output will normally be a SHA-1 hash output,
which is 20 bytes.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>key</parameter>&#160;:</term>
<listitem><simpara> Holds the key
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>flags</parameter>&#160;:</term>
<listitem><simpara> should be 0 for now
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>output_data</parameter>&#160;:</term>
<listitem><simpara> will contain the key ID
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>output_data_size</parameter>&#160;:</term>
<listitem><simpara> holds the size of output_data (and will be
  replaced by the actual size of parameters)
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> On success, <link linkend="GNUTLS-E-SUCCESS--CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> is returned, otherwise a
  negative error value.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-x509-privkey-generate" role="function">
<title>gnutls_x509_privkey_generate ()</title>
<indexterm zone="gnutls-x509-privkey-generate"><primary sortas="gnutls_x509_privkey_generate">gnutls_x509_privkey_generate</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_x509_privkey_generate        (<link linkend="gnutls-x509-privkey-t">gnutls_x509_privkey_t</link> key,
                                                         <link linkend="gnutls-pk-algorithm-t">gnutls_pk_algorithm_t</link> algo,
                                                         unsigned <link linkend="int">int</link> bits,
                                                         unsigned <link linkend="int">int</link> flags);</programlisting>
<para>
This function will generate a random private key. Note that this
function must be called on an empty private key.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>key</parameter>&#160;:</term>
<listitem><simpara> should contain a <link linkend="gnutls-x509-privkey-t"><type>gnutls_x509_privkey_t</type></link> structure
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>algo</parameter>&#160;:</term>
<listitem><simpara> is one of RSA or DSA.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>bits</parameter>&#160;:</term>
<listitem><simpara> the size of the modulus
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>flags</parameter>&#160;:</term>
<listitem><simpara> unused for now.  Must be 0.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> On success, <link linkend="GNUTLS-E-SUCCESS--CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> is returned, otherwise a
  negative error value.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-x509-privkey-export" role="function">
<title>gnutls_x509_privkey_export ()</title>
<indexterm zone="gnutls-x509-privkey-export"><primary sortas="gnutls_x509_privkey_export">gnutls_x509_privkey_export</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_x509_privkey_export          (<link linkend="gnutls-x509-privkey-t">gnutls_x509_privkey_t</link> key,
                                                         <link linkend="gnutls-x509-crt-fmt-t">gnutls_x509_crt_fmt_t</link> format,
                                                         <link linkend="void">void</link> *output_data,
                                                         <link linkend="size-t">size_t</link> *output_data_size);</programlisting>
<para>
This function will export the private key to a PKCS1 structure for
RSA keys, or an integer sequence for DSA keys.  The DSA keys are in
the same format with the parameters used by openssl.
</para>
<para>
If the buffer provided is not long enough to hold the output, then
*<parameter>output_data_size</parameter> is updated and <link linkend="GNUTLS-E-SHORT-MEMORY-BUFFER--CAPS"><literal>GNUTLS_E_SHORT_MEMORY_BUFFER</literal></link>
will be returned.
</para>
<para>
If the structure is PEM encoded, it will have a header
of "BEGIN RSA PRIVATE KEY".</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>key</parameter>&#160;:</term>
<listitem><simpara> Holds the key
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>format</parameter>&#160;:</term>
<listitem><simpara> the format of output params. One of PEM or DER.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>output_data</parameter>&#160;:</term>
<listitem><simpara> will contain a private key PEM or DER encoded
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>output_data_size</parameter>&#160;:</term>
<listitem><simpara> holds the size of output_data (and will be
  replaced by the actual size of parameters)
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> On success, <link linkend="GNUTLS-E-SUCCESS--CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> is returned, otherwise a
  negative error value.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-x509-privkey-export-pkcs8" role="function">
<title>gnutls_x509_privkey_export_pkcs8 ()</title>
<indexterm zone="gnutls-x509-privkey-export-pkcs8"><primary sortas="gnutls_x509_privkey_export_pkcs8">gnutls_x509_privkey_export_pkcs8</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_x509_privkey_export_pkcs8    (<link linkend="gnutls-x509-privkey-t">gnutls_x509_privkey_t</link> key,
                                                         <link linkend="gnutls-x509-crt-fmt-t">gnutls_x509_crt_fmt_t</link> format,
                                                         const <link linkend="char">char</link> *password,
                                                         unsigned <link linkend="int">int</link> flags,
                                                         <link linkend="void">void</link> *output_data,
                                                         <link linkend="size-t">size_t</link> *output_data_size);</programlisting>
<para>
This function will export the private key to a PKCS8 structure.
Both RSA and DSA keys can be exported. For DSA keys we use
PKCS <link linkend="11--CAPS"><type>11</type></link> definitions. If the flags do not specify the encryption 
cipher, then the default 3DES (PBES2) will be used.
</para>
<para>
The <parameter>password</parameter> can be either ASCII or UTF-8 in the default PBES2
encryption schemas, or ASCII for the PKCS12 schemas.
</para>
<para>
If the buffer provided is not long enough to hold the output, then
*output_data_size is updated and GNUTLS_E_SHORT_MEMORY_BUFFER will
be returned.
</para>
<para>
If the structure is PEM encoded, it will have a header
of "BEGIN ENCRYPTED PRIVATE KEY" or "BEGIN PRIVATE KEY" if
encryption is not used.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>key</parameter>&#160;:</term>
<listitem><simpara> Holds the key
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>format</parameter>&#160;:</term>
<listitem><simpara> the format of output params. One of PEM or DER.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>password</parameter>&#160;:</term>
<listitem><simpara> the password that will be used to encrypt the key. 
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>flags</parameter>&#160;:</term>
<listitem><simpara> an ORed sequence of gnutls_pkcs_encrypt_flags_t
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>output_data</parameter>&#160;:</term>
<listitem><simpara> will contain a private key PEM or DER encoded
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>output_data_size</parameter>&#160;:</term>
<listitem><simpara> holds the size of output_data (and will be
  replaced by the actual size of parameters)
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> In case of failure a negative value will be
  returned, and 0 on success.

</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-x509-privkey-export-rsa-raw" role="function">
<title>gnutls_x509_privkey_export_rsa_raw ()</title>
<indexterm zone="gnutls-x509-privkey-export-rsa-raw"><primary sortas="gnutls_x509_privkey_export_rsa_raw">gnutls_x509_privkey_export_rsa_raw</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_x509_privkey_export_rsa_raw  (<link linkend="gnutls-x509-privkey-t">gnutls_x509_privkey_t</link> key,
                                                         <link linkend="gnutls-datum-t">gnutls_datum_t</link> *m,
                                                         <link linkend="gnutls-datum-t">gnutls_datum_t</link> *e,
                                                         <link linkend="gnutls-datum-t">gnutls_datum_t</link> *d,
                                                         <link linkend="gnutls-datum-t">gnutls_datum_t</link> *p,
                                                         <link linkend="gnutls-datum-t">gnutls_datum_t</link> *q,
                                                         <link linkend="gnutls-datum-t">gnutls_datum_t</link> *u);</programlisting>
<para>
This function will export the RSA private key's parameters found
in the given structure. The new parameters will be allocated using
<link linkend="gnutls-malloc"><function>gnutls_malloc()</function></link> and will be stored in the appropriate datum.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>key</parameter>&#160;:</term>
<listitem><simpara> a structure that holds the rsa parameters
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>m</parameter>&#160;:</term>
<listitem><simpara> will hold the modulus
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>e</parameter>&#160;:</term>
<listitem><simpara> will hold the public exponent
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>d</parameter>&#160;:</term>
<listitem><simpara> will hold the private exponent
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>p</parameter>&#160;:</term>
<listitem><simpara> will hold the first prime (p)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>q</parameter>&#160;:</term>
<listitem><simpara> will hold the second prime (q)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>u</parameter>&#160;:</term>
<listitem><simpara> will hold the coefficient
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> On success, <link linkend="GNUTLS-E-SUCCESS--CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> is returned, otherwise a
  negative error value.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-x509-privkey-sign-data" role="function">
<title>gnutls_x509_privkey_sign_data ()</title>
<indexterm zone="gnutls-x509-privkey-sign-data"><primary sortas="gnutls_x509_privkey_sign_data">gnutls_x509_privkey_sign_data</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_x509_privkey_sign_data       (<link linkend="gnutls-x509-privkey-t">gnutls_x509_privkey_t</link> key,
                                                         <link linkend="gnutls-digest-algorithm-t">gnutls_digest_algorithm_t</link> digest,
                                                         unsigned <link linkend="int">int</link> flags,
                                                         const <link linkend="gnutls-datum-t">gnutls_datum_t</link> *data,
                                                         <link linkend="void">void</link> *signature,
                                                         <link linkend="size-t">size_t</link> *signature_size);</programlisting>
<para>
This function will sign the given data using a signature algorithm
supported by the private key. Signature algorithms are always used
together with a hash functions.  Different hash functions may be
used for the RSA algorithm, but only SHA-1 for the DSA keys.
</para>
<para>
If the buffer provided is not long enough to hold the output, then
*<parameter>signature_size</parameter> is updated and <link linkend="GNUTLS-E-SHORT-MEMORY-BUFFER--CAPS"><literal>GNUTLS_E_SHORT_MEMORY_BUFFER</literal></link> will
be returned.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>key</parameter>&#160;:</term>
<listitem><simpara> Holds the key
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>digest</parameter>&#160;:</term>
<listitem><simpara> should be MD5 or SHA1
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>flags</parameter>&#160;:</term>
<listitem><simpara> should be 0 for now
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>data</parameter>&#160;:</term>
<listitem><simpara> holds the data to be signed
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>signature</parameter>&#160;:</term>
<listitem><simpara> will contain the signature
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>signature_size</parameter>&#160;:</term>
<listitem><simpara> holds the size of signature (and will be replaced
  by the new size)
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> On success, <link linkend="GNUTLS-E-SUCCESS--CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> is returned, otherwise a
  negative error value.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-x509-privkey-verify-data" role="function">
<title>gnutls_x509_privkey_verify_data ()</title>
<indexterm zone="gnutls-x509-privkey-verify-data"><primary sortas="gnutls_x509_privkey_verify_data">gnutls_x509_privkey_verify_data</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_x509_privkey_verify_data     (<link linkend="gnutls-x509-privkey-t">gnutls_x509_privkey_t</link> key,
                                                         unsigned <link linkend="int">int</link> flags,
                                                         const <link linkend="gnutls-datum-t">gnutls_datum_t</link> *data,
                                                         const <link linkend="gnutls-datum-t">gnutls_datum_t</link> *signature);</programlisting>
<para>
This function will verify the given signed data, using the
parameters in the private key.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>key</parameter>&#160;:</term>
<listitem><simpara> Holds the key
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>flags</parameter>&#160;:</term>
<listitem><simpara> should be 0 for now
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>data</parameter>&#160;:</term>
<listitem><simpara> holds the data to be signed
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>signature</parameter>&#160;:</term>
<listitem><simpara> contains the signature
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> In case of a verification failure 0 is returned, and 1 on
success.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-x509-crt-verify-data" role="function">
<title>gnutls_x509_crt_verify_data ()</title>
<indexterm zone="gnutls-x509-crt-verify-data"><primary sortas="gnutls_x509_crt_verify_data">gnutls_x509_crt_verify_data</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_x509_crt_verify_data         (<link linkend="gnutls-x509-crt-t">gnutls_x509_crt_t</link> crt,
                                                         unsigned <link linkend="int">int</link> flags,
                                                         const <link linkend="gnutls-datum-t">gnutls_datum_t</link> *data,
                                                         const <link linkend="gnutls-datum-t">gnutls_datum_t</link> *signature);</programlisting>
<para>
This function will verify the given signed data, using the
parameters from the certificate.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>crt</parameter>&#160;:</term>
<listitem><simpara> Holds the certificate
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>flags</parameter>&#160;:</term>
<listitem><simpara> should be 0 for now
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>data</parameter>&#160;:</term>
<listitem><simpara> holds the data to be signed
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>signature</parameter>&#160;:</term>
<listitem><simpara> contains the signature
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> In case of a verification failure 0 is returned, and 1 on
success.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-x509-crt-verify-hash" role="function">
<title>gnutls_x509_crt_verify_hash ()</title>
<indexterm zone="gnutls-x509-crt-verify-hash"><primary sortas="gnutls_x509_crt_verify_hash">gnutls_x509_crt_verify_hash</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_x509_crt_verify_hash         (<link linkend="gnutls-x509-crt-t">gnutls_x509_crt_t</link> crt,
                                                         unsigned <link linkend="int">int</link> flags,
                                                         const <link linkend="gnutls-datum-t">gnutls_datum_t</link> *hash,
                                                         const <link linkend="gnutls-datum-t">gnutls_datum_t</link> *signature);</programlisting>
<para>
This function will verify the given signed digest, using the
parameters from the certificate.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>crt</parameter>&#160;:</term>
<listitem><simpara> Holds the certificate
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>flags</parameter>&#160;:</term>
<listitem><simpara> should be 0 for now
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>hash</parameter>&#160;:</term>
<listitem><simpara> holds the hash digest to be verified
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>signature</parameter>&#160;:</term>
<listitem><simpara> contains the signature
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> In case of a verification failure 0 is returned, and 1 on
success.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-x509-crt-get-verify-algorithm" role="function" condition="since:2.8.0">
<title>gnutls_x509_crt_get_verify_algorithm ()</title>
<indexterm zone="gnutls-x509-crt-get-verify-algorithm" role="2.8.0"><primary sortas="gnutls_x509_crt_get_verify_algorithm">gnutls_x509_crt_get_verify_algorithm</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_x509_crt_get_verify_algorithm
                                                        (<link linkend="gnutls-x509-crt-t">gnutls_x509_crt_t</link> crt,
                                                         const <link linkend="gnutls-datum-t">gnutls_datum_t</link> *signature,
                                                         <link linkend="gnutls-digest-algorithm-t">gnutls_digest_algorithm_t</link> *hash);</programlisting>
<para>
This function will read the certifcate and the signed data to
determine the hash algorithm used to generate the signature.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>crt</parameter>&#160;:</term>
<listitem><simpara> Holds the certificate
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>signature</parameter>&#160;:</term>
<listitem><simpara> contains the signature
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>hash</parameter>&#160;:</term>
<listitem><simpara> The result of the call with the hash algorithm used for signature
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> the 0 if the hash algorithm is found. A negative value is
returned on error.

</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 2.8.0</para></refsect2>
<refsect2 id="gnutls-x509-privkey-sign-hash" role="function">
<title>gnutls_x509_privkey_sign_hash ()</title>
<indexterm zone="gnutls-x509-privkey-sign-hash"><primary sortas="gnutls_x509_privkey_sign_hash">gnutls_x509_privkey_sign_hash</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_x509_privkey_sign_hash       (<link linkend="gnutls-x509-privkey-t">gnutls_x509_privkey_t</link> key,
                                                         const <link linkend="gnutls-datum-t">gnutls_datum_t</link> *hash,
                                                         <link linkend="gnutls-datum-t">gnutls_datum_t</link> *signature);</programlisting>
<para>
This function will sign the given hash using the private key. Do not
use this function directly unless you know what it is. Typical signing
requires the data to be hashed and stored in special formats 
(e.g. BER Digest-Info for RSA).</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>key</parameter>&#160;:</term>
<listitem><simpara> Holds the key
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>hash</parameter>&#160;:</term>
<listitem><simpara> holds the data to be signed
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>signature</parameter>&#160;:</term>
<listitem><simpara> will contain newly allocated signature
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> On success, <link linkend="GNUTLS-E-SUCCESS--CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> is returned, otherwise a
  negative error value.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-x509-crq-int" role="struct">
<title>struct gnutls_x509_crq_int</title>
<indexterm zone="gnutls-x509-crq-int"><primary sortas="gnutls_x509_crq_int">gnutls_x509_crq_int</primary></indexterm><programlisting>struct gnutls_x509_crq_int;</programlisting>
<para>
</para></refsect2>
<refsect2 id="gnutls-x509-crq-t" role="typedef">
<title>gnutls_x509_crq_t</title>
<indexterm zone="gnutls-x509-crq-t"><primary sortas="gnutls_x509_crq_t">gnutls_x509_crq_t</primary></indexterm><programlisting>  typedef struct gnutls_x509_crq_int *gnutls_x509_crq_t;
</programlisting>
<para>
</para></refsect2>
<refsect2 id="gnutls-x509-crq-print" role="function" condition="since:2.8.0">
<title>gnutls_x509_crq_print ()</title>
<indexterm zone="gnutls-x509-crq-print" role="2.8.0"><primary sortas="gnutls_x509_crq_print">gnutls_x509_crq_print</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_x509_crq_print               (<link linkend="gnutls-x509-crq-t">gnutls_x509_crq_t</link> crq,
                                                         <link linkend="gnutls-certificate-print-formats-t">gnutls_certificate_print_formats_t</link> format,
                                                         <link linkend="gnutls-datum-t">gnutls_datum_t</link> *out);</programlisting>
<para>
This function will pretty print a certificate request, suitable for
display to a human.
</para>
<para>
The output <parameter>out</parameter> needs to be deallocate using <link linkend="gnutls-free"><function>gnutls_free()</function></link>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>crq</parameter>&#160;:</term>
<listitem><simpara> The structure to be printed
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>format</parameter>&#160;:</term>
<listitem><simpara> Indicate the format to use
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>out</parameter>&#160;:</term>
<listitem><simpara> Newly allocated datum with zero terminated string.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> On success, <link linkend="GNUTLS-E-SUCCESS--CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> is returned, otherwise a
  negative error value.

</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 2.8.0</para></refsect2>
<refsect2 id="gnutls-x509-crq-init" role="function">
<title>gnutls_x509_crq_init ()</title>
<indexterm zone="gnutls-x509-crq-init"><primary sortas="gnutls_x509_crq_init">gnutls_x509_crq_init</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_x509_crq_init                (<link linkend="gnutls-x509-crq-t">gnutls_x509_crq_t</link> *crq);</programlisting>
<para>
This function will initialize a PKCS10 certificate request structure.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>crq</parameter>&#160;:</term>
<listitem><simpara> The structure to be initialized
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> On success, <link linkend="GNUTLS-E-SUCCESS--CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> is returned, otherwise a
  negative error value.

</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-x509-crq-deinit" role="function">
<title>gnutls_x509_crq_deinit ()</title>
<indexterm zone="gnutls-x509-crq-deinit"><primary sortas="gnutls_x509_crq_deinit">gnutls_x509_crq_deinit</primary></indexterm><programlisting><link linkend="void">void</link>                gnutls_x509_crq_deinit              (<link linkend="gnutls-x509-crq-t">gnutls_x509_crq_t</link> crq);</programlisting>
<para>
This function will deinitialize a CRL structure.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>crq</parameter>&#160;:</term>
<listitem><simpara> The structure to be initialized
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-x509-crq-import" role="function">
<title>gnutls_x509_crq_import ()</title>
<indexterm zone="gnutls-x509-crq-import"><primary sortas="gnutls_x509_crq_import">gnutls_x509_crq_import</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_x509_crq_import              (<link linkend="gnutls-x509-crq-t">gnutls_x509_crq_t</link> crq,
                                                         const <link linkend="gnutls-datum-t">gnutls_datum_t</link> *data,
                                                         <link linkend="gnutls-x509-crt-fmt-t">gnutls_x509_crt_fmt_t</link> format);</programlisting>
<para>
This function will convert the given DER or PEM encoded Certificate
to the native gnutls_x509_crq_t format. The output will be stored in <parameter>cert</parameter>.
</para>
<para>
If the Certificate is PEM encoded it should have a header of "NEW CERTIFICATE REQUEST".</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>crq</parameter>&#160;:</term>
<listitem><simpara> The structure to store the parsed certificate request.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>data</parameter>&#160;:</term>
<listitem><simpara> The DER or PEM encoded certificate.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>format</parameter>&#160;:</term>
<listitem><simpara> One of DER or PEM
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> On success, <link linkend="GNUTLS-E-SUCCESS--CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> is returned, otherwise a
  negative error value.

</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-x509-crq-get-dn" role="function">
<title>gnutls_x509_crq_get_dn ()</title>
<indexterm zone="gnutls-x509-crq-get-dn"><primary sortas="gnutls_x509_crq_get_dn">gnutls_x509_crq_get_dn</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_x509_crq_get_dn              (<link linkend="gnutls-x509-crq-t">gnutls_x509_crq_t</link> crq,
                                                         <link linkend="char">char</link> *buf,
                                                         <link linkend="size-t">size_t</link> *sizeof_buf);</programlisting>
<para>
This function will copy the name of the Certificate request
subject in the provided buffer. The name will be in the form
"C=xxxx,O=yyyy,CN=zzzz" as described in RFC2253. The output string
will be ASCII or UTF-8 encoded, depending on the certificate data.
</para>
<para>
If <parameter>buf</parameter> is null then only the size will be filled.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>crq</parameter>&#160;:</term>
<listitem><simpara> should contain a gnutls_x509_crq_t structure
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>buf</parameter>&#160;:</term>
<listitem><simpara> a pointer to a structure to hold the name (may be null)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>sizeof_buf</parameter>&#160;:</term>
<listitem><simpara> initially holds the size of <parameter>buf</parameter>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> GNUTLS_E_SHORT_MEMORY_BUFFER if the provided buffer is not
long enough, and in that case the *sizeof_buf will be updated with
the required size.  On success 0 is returned.

</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-x509-crq-get-dn-oid" role="function">
<title>gnutls_x509_crq_get_dn_oid ()</title>
<indexterm zone="gnutls-x509-crq-get-dn-oid"><primary sortas="gnutls_x509_crq_get_dn_oid">gnutls_x509_crq_get_dn_oid</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_x509_crq_get_dn_oid          (<link linkend="gnutls-x509-crq-t">gnutls_x509_crq_t</link> crq,
                                                         <link linkend="int">int</link> indx,
                                                         <link linkend="void">void</link> *oid,
                                                         <link linkend="size-t">size_t</link> *sizeof_oid);</programlisting>
<para>
This function will extract the requested OID of the name of the
Certificate request subject, specified by the given index.
</para>
<para>
If oid is null then only the size will be filled.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>crq</parameter>&#160;:</term>
<listitem><simpara> should contain a gnutls_x509_crq_t structure
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>indx</parameter>&#160;:</term>
<listitem><simpara> Specifies which DN OID to send. Use zero to get the first one.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>oid</parameter>&#160;:</term>
<listitem><simpara> a pointer to a structure to hold the name (may be null)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>sizeof_oid</parameter>&#160;:</term>
<listitem><simpara> initially holds the size of <parameter>oid</parameter>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> GNUTLS_E_SHORT_MEMORY_BUFFER if the provided buffer is not
long enough, and in that case the *sizeof_oid will be updated with
the required size.  On success 0 is returned.

</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-x509-crq-get-dn-by-oid" role="function">
<title>gnutls_x509_crq_get_dn_by_oid ()</title>
<indexterm zone="gnutls-x509-crq-get-dn-by-oid"><primary sortas="gnutls_x509_crq_get_dn_by_oid">gnutls_x509_crq_get_dn_by_oid</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_x509_crq_get_dn_by_oid       (<link linkend="gnutls-x509-crq-t">gnutls_x509_crq_t</link> crq,
                                                         const <link linkend="char">char</link> *oid,
                                                         <link linkend="int">int</link> indx,
                                                         unsigned <link linkend="int">int</link> raw_flag,
                                                         <link linkend="void">void</link> *buf,
                                                         <link linkend="size-t">size_t</link> *sizeof_buf);</programlisting>
<para>
This function will extract the part of the name of the Certificate
request subject, specified by the given OID. The output will be
encoded as described in RFC2253. The output string will be ASCII
or UTF-8 encoded, depending on the certificate data.
</para>
<para>
Some helper macros with popular OIDs can be found in gnutls/x509.h
If raw flag is zero, this function will only return known OIDs as
text. Other OIDs will be DER encoded, as described in RFC2253 --
in hex format with a '#' prefix.  You can check about known OIDs
using <link linkend="gnutls-x509-dn-oid-known"><function>gnutls_x509_dn_oid_known()</function></link>.
</para>
<para>
If <parameter>buf</parameter> is null then only the size will be filled.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>crq</parameter>&#160;:</term>
<listitem><simpara> should contain a gnutls_x509_crq_t structure
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>oid</parameter>&#160;:</term>
<listitem><simpara> holds an Object Identified in null terminated string
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>indx</parameter>&#160;:</term>
<listitem><simpara> In case multiple same OIDs exist in the RDN, this specifies
  which to send. Use zero to get the first one.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>raw_flag</parameter>&#160;:</term>
<listitem><simpara> If non zero returns the raw DER data of the DN part.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>buf</parameter>&#160;:</term>
<listitem><simpara> a pointer to a structure to hold the name (may be null)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>sizeof_buf</parameter>&#160;:</term>
<listitem><simpara> initially holds the size of <parameter>buf</parameter>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> GNUTLS_E_SHORT_MEMORY_BUFFER if the provided buffer is not
long enough, and in that case the *sizeof_buf will be updated with
the required size.  On success 0 is returned.

</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-x509-crq-set-dn-by-oid" role="function">
<title>gnutls_x509_crq_set_dn_by_oid ()</title>
<indexterm zone="gnutls-x509-crq-set-dn-by-oid"><primary sortas="gnutls_x509_crq_set_dn_by_oid">gnutls_x509_crq_set_dn_by_oid</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_x509_crq_set_dn_by_oid       (<link linkend="gnutls-x509-crq-t">gnutls_x509_crq_t</link> crq,
                                                         const <link linkend="char">char</link> *oid,
                                                         unsigned <link linkend="int">int</link> raw_flag,
                                                         const <link linkend="void">void</link> *data,
                                                         unsigned <link linkend="int">int</link> sizeof_data);</programlisting>
<para>
This function will set the part of the name of the Certificate
request subject, specified by the given OID. The input string
should be ASCII or UTF-8 encoded.
</para>
<para>
Some helper macros with popular OIDs can be found in gnutls/x509.h
With this function you can only set the known OIDs. You can test
for known OIDs using <link linkend="gnutls-x509-dn-oid-known"><function>gnutls_x509_dn_oid_known()</function></link>. For OIDs that are
not known (by gnutls) you should properly DER encode your data,
and call this function with raw_flag set.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>crq</parameter>&#160;:</term>
<listitem><simpara> should contain a gnutls_x509_crq_t structure
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>oid</parameter>&#160;:</term>
<listitem><simpara> holds an Object Identifier in a null terminated string
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>raw_flag</parameter>&#160;:</term>
<listitem><simpara> must be 0, or 1 if the data are DER encoded
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>data</parameter>&#160;:</term>
<listitem><simpara> a pointer to the input data
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>sizeof_data</parameter>&#160;:</term>
<listitem><simpara> holds the size of <parameter>data</parameter>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> On success, <link linkend="GNUTLS-E-SUCCESS--CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> is returned, otherwise a
  negative error value.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-x509-crq-set-version" role="function">
<title>gnutls_x509_crq_set_version ()</title>
<indexterm zone="gnutls-x509-crq-set-version"><primary sortas="gnutls_x509_crq_set_version">gnutls_x509_crq_set_version</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_x509_crq_set_version         (<link linkend="gnutls-x509-crq-t">gnutls_x509_crq_t</link> crq,
                                                         unsigned <link linkend="int">int</link> version);</programlisting>
<para>
This function will set the version of the certificate request. For
version 1 requests this must be one.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>crq</parameter>&#160;:</term>
<listitem><simpara> should contain a gnutls_x509_crq_t structure
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>version</parameter>&#160;:</term>
<listitem><simpara> holds the version number. For v1 Requests must be 1.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> On success, <link linkend="GNUTLS-E-SUCCESS--CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> is returned, otherwise a
  negative error value.

</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-x509-crq-get-version" role="function">
<title>gnutls_x509_crq_get_version ()</title>
<indexterm zone="gnutls-x509-crq-get-version"><primary sortas="gnutls_x509_crq_get_version">gnutls_x509_crq_get_version</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_x509_crq_get_version         (<link linkend="gnutls-x509-crq-t">gnutls_x509_crq_t</link> crq);</programlisting>
<para>
This function will return the version of the specified Certificate request.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>crq</parameter>&#160;:</term>
<listitem><simpara> should contain a gnutls_x509_crq_t structure
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> version of certificate request, or a negative value on
  error.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-x509-crq-set-key" role="function">
<title>gnutls_x509_crq_set_key ()</title>
<indexterm zone="gnutls-x509-crq-set-key"><primary sortas="gnutls_x509_crq_set_key">gnutls_x509_crq_set_key</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_x509_crq_set_key             (<link linkend="gnutls-x509-crq-t">gnutls_x509_crq_t</link> crq,
                                                         <link linkend="gnutls-x509-privkey-t">gnutls_x509_privkey_t</link> key);</programlisting>
<para>
This function will set the public parameters from the given private key to the
request. Only RSA keys are currently supported.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>crq</parameter>&#160;:</term>
<listitem><simpara> should contain a gnutls_x509_crq_t structure
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>key</parameter>&#160;:</term>
<listitem><simpara> holds a private key
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> On success, <link linkend="GNUTLS-E-SUCCESS--CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> is returned, otherwise a
  negative error value.

</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-x509-crq-sign2" role="function">
<title>gnutls_x509_crq_sign2 ()</title>
<indexterm zone="gnutls-x509-crq-sign2"><primary sortas="gnutls_x509_crq_sign2">gnutls_x509_crq_sign2</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_x509_crq_sign2               (<link linkend="gnutls-x509-crq-t">gnutls_x509_crq_t</link> crq,
                                                         <link linkend="gnutls-x509-privkey-t">gnutls_x509_privkey_t</link> key,
                                                         <link linkend="gnutls-digest-algorithm-t">gnutls_digest_algorithm_t</link> dig,
                                                         unsigned <link linkend="int">int</link> flags);</programlisting>
<para>
This function will sign the certificate request with a private key.
This must be the same key as the one used in
<link linkend="gnutls-x509-crt-set-key"><function>gnutls_x509_crt_set_key()</function></link> since a certificate request is self
signed.
</para>
<para>
This must be the last step in a certificate request generation
since all the previously set parameters are now signed.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>crq</parameter>&#160;:</term>
<listitem><simpara> should contain a <link linkend="gnutls-x509-crq-t"><type>gnutls_x509_crq_t</type></link> structure
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>key</parameter>&#160;:</term>
<listitem><simpara> holds a private key
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>dig</parameter>&#160;:</term>
<listitem><simpara> The message digest to use, <link linkend="GNUTLS-DIG-SHA1--CAPS"><literal>GNUTLS_DIG_SHA1</literal></link> is the safe choice unless you know what you're doing.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>flags</parameter>&#160;:</term>
<listitem><simpara> must be 0
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> <link linkend="GNUTLS-E-SUCCESS--CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> on success, otherwise an error.
<link linkend="GNUTLS-E-ASN1-VALUE-NOT-FOUND--CAPS"><literal>GNUTLS_E_ASN1_VALUE_NOT_FOUND</literal></link> is returned if you didn't set all
information in the certificate request (e.g., the version using
<link linkend="gnutls-x509-crq-set-version"><function>gnutls_x509_crq_set_version()</function></link>).

</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-x509-crq-sign" role="function">
<title>gnutls_x509_crq_sign ()</title>
<indexterm zone="gnutls-x509-crq-sign"><primary sortas="gnutls_x509_crq_sign">gnutls_x509_crq_sign</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_x509_crq_sign                (<link linkend="gnutls-x509-crq-t">gnutls_x509_crq_t</link> crq,
                                                         <link linkend="gnutls-x509-privkey-t">gnutls_x509_privkey_t</link> key);</programlisting>
<para>
This function is the same a <link linkend="gnutls-x509-crq-sign2"><function>gnutls_x509_crq_sign2()</function></link> with no flags, and
SHA1 as the hash algorithm.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>crq</parameter>&#160;:</term>
<listitem><simpara> should contain a gnutls_x509_crq_t structure
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>key</parameter>&#160;:</term>
<listitem><simpara> holds a private key
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> On success, <link linkend="GNUTLS-E-SUCCESS--CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> is returned, otherwise a
  negative error value.

</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-x509-crq-set-challenge-password" role="function">
<title>gnutls_x509_crq_set_challenge_password ()</title>
<indexterm zone="gnutls-x509-crq-set-challenge-password"><primary sortas="gnutls_x509_crq_set_challenge_password">gnutls_x509_crq_set_challenge_password</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_x509_crq_set_challenge_password
                                                        (<link linkend="gnutls-x509-crq-t">gnutls_x509_crq_t</link> crq,
                                                         const <link linkend="char">char</link> *pass);</programlisting>
<para>
This function will set a challenge password to be used when revoking the request.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>crq</parameter>&#160;:</term>
<listitem><simpara> should contain a gnutls_x509_crq_t structure
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>pass</parameter>&#160;:</term>
<listitem><simpara> holds a null terminated password
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> On success, <link linkend="GNUTLS-E-SUCCESS--CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> is returned, otherwise a
  negative error value.

</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-x509-crq-get-challenge-password" role="function">
<title>gnutls_x509_crq_get_challenge_password ()</title>
<indexterm zone="gnutls-x509-crq-get-challenge-password"><primary sortas="gnutls_x509_crq_get_challenge_password">gnutls_x509_crq_get_challenge_password</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_x509_crq_get_challenge_password
                                                        (<link linkend="gnutls-x509-crq-t">gnutls_x509_crq_t</link> crq,
                                                         <link linkend="char">char</link> *pass,
                                                         <link linkend="size-t">size_t</link> *sizeof_pass);</programlisting>
<para>
This function will return the challenge password in the
request.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>crq</parameter>&#160;:</term>
<listitem><simpara> should contain a gnutls_x509_crq_t structure
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>pass</parameter>&#160;:</term>
<listitem><simpara> will hold a null terminated password
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>sizeof_pass</parameter>&#160;:</term>
<listitem><simpara> Initially holds the size of <parameter>pass</parameter>.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> On success, <link linkend="GNUTLS-E-SUCCESS--CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> is returned, otherwise a
  negative error value.

</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-x509-crq-set-attribute-by-oid" role="function">
<title>gnutls_x509_crq_set_attribute_by_oid ()</title>
<indexterm zone="gnutls-x509-crq-set-attribute-by-oid"><primary sortas="gnutls_x509_crq_set_attribute_by_oid">gnutls_x509_crq_set_attribute_by_oid</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_x509_crq_set_attribute_by_oid
                                                        (<link linkend="gnutls-x509-crq-t">gnutls_x509_crq_t</link> crq,
                                                         const <link linkend="char">char</link> *oid,
                                                         <link linkend="void">void</link> *buf,
                                                         <link linkend="size-t">size_t</link> sizeof_buf);</programlisting>
<para>
This function will set the attribute in the certificate request specified
by the given Object ID. The attribute must be be DER encoded.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>crq</parameter>&#160;:</term>
<listitem><simpara> should contain a gnutls_x509_crq_t structure
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>oid</parameter>&#160;:</term>
<listitem><simpara> holds an Object Identified in null terminated string
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>buf</parameter>&#160;:</term>
<listitem><simpara> a pointer to a structure that holds the attribute data
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>sizeof_buf</parameter>&#160;:</term>
<listitem><simpara> holds the size of <parameter>buf</parameter>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> On success, <link linkend="GNUTLS-E-SUCCESS--CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> is returned, otherwise a
  negative error value.

</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-x509-crq-get-attribute-by-oid" role="function">
<title>gnutls_x509_crq_get_attribute_by_oid ()</title>
<indexterm zone="gnutls-x509-crq-get-attribute-by-oid"><primary sortas="gnutls_x509_crq_get_attribute_by_oid">gnutls_x509_crq_get_attribute_by_oid</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_x509_crq_get_attribute_by_oid
                                                        (<link linkend="gnutls-x509-crq-t">gnutls_x509_crq_t</link> crq,
                                                         const <link linkend="char">char</link> *oid,
                                                         <link linkend="int">int</link> indx,
                                                         <link linkend="void">void</link> *buf,
                                                         <link linkend="size-t">size_t</link> *sizeof_buf);</programlisting>
<para>
This function will return the attribute in the certificate request specified
by the given Object ID. The attribute will be DER encoded.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>crq</parameter>&#160;:</term>
<listitem><simpara> should contain a gnutls_x509_crq_t structure
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>oid</parameter>&#160;:</term>
<listitem><simpara> holds an Object Identified in null terminated string
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>indx</parameter>&#160;:</term>
<listitem><simpara> In case multiple same OIDs exist in the attribute list, this specifies
  which to send. Use zero to get the first one.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>buf</parameter>&#160;:</term>
<listitem><simpara> a pointer to a structure to hold the attribute data (may be null)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>sizeof_buf</parameter>&#160;:</term>
<listitem><simpara> initially holds the size of <parameter>buf</parameter>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> On success, <link linkend="GNUTLS-E-SUCCESS--CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> is returned, otherwise a
  negative error value.

</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-x509-crq-export" role="function">
<title>gnutls_x509_crq_export ()</title>
<indexterm zone="gnutls-x509-crq-export"><primary sortas="gnutls_x509_crq_export">gnutls_x509_crq_export</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_x509_crq_export              (<link linkend="gnutls-x509-crq-t">gnutls_x509_crq_t</link> crq,
                                                         <link linkend="gnutls-x509-crt-fmt-t">gnutls_x509_crt_fmt_t</link> format,
                                                         <link linkend="void">void</link> *output_data,
                                                         <link linkend="size-t">size_t</link> *output_data_size);</programlisting>
<para>
This function will export the certificate request to a PKCS10
</para>
<para>
If the buffer provided is not long enough to hold the output, then
GNUTLS_E_SHORT_MEMORY_BUFFER will be returned and
*output_data_size will be updated.
</para>
<para>
If the structure is PEM encoded, it will have a header of "BEGIN
NEW CERTIFICATE REQUEST".</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>crq</parameter>&#160;:</term>
<listitem><simpara> Holds the request
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>format</parameter>&#160;:</term>
<listitem><simpara> the format of output params. One of PEM or DER.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>output_data</parameter>&#160;:</term>
<listitem><simpara> will contain a certificate request PEM or DER encoded
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>output_data_size</parameter>&#160;:</term>
<listitem><simpara> holds the size of output_data (and will be
  replaced by the actual size of parameters)
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> In case of failure a negative value will be
  returned, and 0 on success.

</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-x509-crt-set-crq" role="function">
<title>gnutls_x509_crt_set_crq ()</title>
<indexterm zone="gnutls-x509-crt-set-crq"><primary sortas="gnutls_x509_crt_set_crq">gnutls_x509_crt_set_crq</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_x509_crt_set_crq             (<link linkend="gnutls-x509-crt-t">gnutls_x509_crt_t</link> crt,
                                                         <link linkend="gnutls-x509-crq-t">gnutls_x509_crq_t</link> crq);</programlisting>
<para>
This function will set the name and public parameters as well as
the extensions from the given certificate request to the certificate. 
Only RSA keys are currently supported.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>crt</parameter>&#160;:</term>
<listitem><simpara> a certificate of type <link linkend="gnutls-x509-crt-t"><type>gnutls_x509_crt_t</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>crq</parameter>&#160;:</term>
<listitem><simpara> holds a certificate request
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> On success, <link linkend="GNUTLS-E-SUCCESS--CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> is returned, otherwise a
  negative error value.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-x509-crt-set-crq-extensions" role="function" condition="since:2.8.0">
<title>gnutls_x509_crt_set_crq_extensions ()</title>
<indexterm zone="gnutls-x509-crt-set-crq-extensions" role="2.8.0"><primary sortas="gnutls_x509_crt_set_crq_extensions">gnutls_x509_crt_set_crq_extensions</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_x509_crt_set_crq_extensions  (<link linkend="gnutls-x509-crt-t">gnutls_x509_crt_t</link> crt,
                                                         <link linkend="gnutls-x509-crq-t">gnutls_x509_crq_t</link> crq);</programlisting>
<para>
This function will set extensions from the given request to the
certificate.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>crt</parameter>&#160;:</term>
<listitem><simpara> a certificate of type <link linkend="gnutls-x509-crt-t"><type>gnutls_x509_crt_t</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>crq</parameter>&#160;:</term>
<listitem><simpara> holds a certificate request
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> On success, <link linkend="GNUTLS-E-SUCCESS--CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> is returned, otherwise a
  negative error value.

</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 2.8.0</para></refsect2>
<refsect2 id="gnutls-x509-crq-set-key-rsa-raw" role="function" condition="since:2.6.0">
<title>gnutls_x509_crq_set_key_rsa_raw ()</title>
<indexterm zone="gnutls-x509-crq-set-key-rsa-raw" role="2.6.0"><primary sortas="gnutls_x509_crq_set_key_rsa_raw">gnutls_x509_crq_set_key_rsa_raw</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_x509_crq_set_key_rsa_raw     (<link linkend="gnutls-x509-crq-t">gnutls_x509_crq_t</link> crq,
                                                         const <link linkend="gnutls-datum-t">gnutls_datum_t</link> *m,
                                                         const <link linkend="gnutls-datum-t">gnutls_datum_t</link> *e);</programlisting>
<para>
This function will set the public parameters from the given private
key to the request. Only RSA keys are currently supported.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>crq</parameter>&#160;:</term>
<listitem><simpara> should contain a <link linkend="gnutls-x509-crq-t"><type>gnutls_x509_crq_t</type></link> structure
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>m</parameter>&#160;:</term>
<listitem><simpara> holds the modulus
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>e</parameter>&#160;:</term>
<listitem><simpara> holds the public exponent
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> On success, <link linkend="GNUTLS-E-SUCCESS--CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> is returned, otherwise a
  negative error value.

</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 2.6.0</para></refsect2>
<refsect2 id="gnutls-x509-crq-set-subject-alt-name" role="function" condition="since:2.8.0">
<title>gnutls_x509_crq_set_subject_alt_name ()</title>
<indexterm zone="gnutls-x509-crq-set-subject-alt-name" role="2.8.0"><primary sortas="gnutls_x509_crq_set_subject_alt_name">gnutls_x509_crq_set_subject_alt_name</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_x509_crq_set_subject_alt_name
                                                        (<link linkend="gnutls-x509-crq-t">gnutls_x509_crq_t</link> crq,
                                                         <link linkend="gnutls-x509-subject-alt-name-t">gnutls_x509_subject_alt_name_t</link> nt,
                                                         const <link linkend="void">void</link> *data,
                                                         unsigned <link linkend="int">int</link> data_size,
                                                         unsigned <link linkend="int">int</link> flags);</programlisting>
<para>
This function will set the subject alternative name certificate
extension. It can set the following types:
</para>
<para>
&amp;GNUTLS_SAN_DNSNAME: as a text string
</para>
<para>
&amp;GNUTLS_SAN_RFC822NAME: as a text string
</para>
<para>
&amp;GNUTLS_SAN_URI: as a text string
</para>
<para>
&amp;GNUTLS_SAN_IPADDRESS: as a binary IP address (4 or 16 bytes)
</para>
<para>
Other values can be set as binary values with the proper DER encoding.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>crq</parameter>&#160;:</term>
<listitem><simpara> a certificate of type <link linkend="gnutls-x509-crq-t"><type>gnutls_x509_crq_t</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>nt</parameter>&#160;:</term>
<listitem><simpara> is one of the <link linkend="gnutls-x509-subject-alt-name-t"><type>gnutls_x509_subject_alt_name_t</type></link> enumerations
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>data</parameter>&#160;:</term>
<listitem><simpara> The data to be set
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>data_size</parameter>&#160;:</term>
<listitem><simpara> The size of data to be set
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>flags</parameter>&#160;:</term>
<listitem><simpara> <link linkend="GNUTLS-FSAN-SET--CAPS"><literal>GNUTLS_FSAN_SET</literal></link> to clear previous data or
  <link linkend="GNUTLS-FSAN-APPEND--CAPS"><literal>GNUTLS_FSAN_APPEND</literal></link> to append.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> On success, <link linkend="GNUTLS-E-SUCCESS--CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> is returned, otherwise a
  negative error value.

</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 2.8.0</para></refsect2>
<refsect2 id="gnutls-x509-crq-set-key-usage" role="function" condition="since:2.8.0">
<title>gnutls_x509_crq_set_key_usage ()</title>
<indexterm zone="gnutls-x509-crq-set-key-usage" role="2.8.0"><primary sortas="gnutls_x509_crq_set_key_usage">gnutls_x509_crq_set_key_usage</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_x509_crq_set_key_usage       (<link linkend="gnutls-x509-crq-t">gnutls_x509_crq_t</link> crq,
                                                         unsigned <link linkend="int">int</link> usage);</programlisting>
<para>
This function will set the keyUsage certificate extension.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>crq</parameter>&#160;:</term>
<listitem><simpara> a certificate of type <link linkend="gnutls-x509-crq-t"><type>gnutls_x509_crq_t</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>usage</parameter>&#160;:</term>
<listitem><simpara> an ORed sequence of the GNUTLS_KEY_* elements.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> On success, <link linkend="GNUTLS-E-SUCCESS--CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> is returned, otherwise a
  negative error value.

</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 2.8.0</para></refsect2>
<refsect2 id="gnutls-x509-crq-set-basic-constraints" role="function" condition="since:2.8.0">
<title>gnutls_x509_crq_set_basic_constraints ()</title>
<indexterm zone="gnutls-x509-crq-set-basic-constraints" role="2.8.0"><primary sortas="gnutls_x509_crq_set_basic_constraints">gnutls_x509_crq_set_basic_constraints</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_x509_crq_set_basic_constraints
                                                        (<link linkend="gnutls-x509-crq-t">gnutls_x509_crq_t</link> crq,
                                                         unsigned <link linkend="int">int</link> ca,
                                                         <link linkend="int">int</link> pathLenConstraint);</programlisting>
<para>
This function will set the basicConstraints certificate extension.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>crq</parameter>&#160;:</term>
<listitem><simpara> a certificate of type <link linkend="gnutls-x509-crq-t"><type>gnutls_x509_crq_t</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ca</parameter>&#160;:</term>
<listitem><simpara> true(1) or false(0). Depending on the Certificate authority status.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>pathLenConstraint</parameter>&#160;:</term>
<listitem><simpara> non-negative values indicate maximum length of path,
  and negative values indicate that the pathLenConstraints field should
  not be present.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> On success, <link linkend="GNUTLS-E-SUCCESS--CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> is returned, otherwise a
  negative error value.

</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 2.8.0</para></refsect2>
<refsect2 id="gnutls-x509-crq-set-key-purpose-oid" role="function" condition="since:2.8.0">
<title>gnutls_x509_crq_set_key_purpose_oid ()</title>
<indexterm zone="gnutls-x509-crq-set-key-purpose-oid" role="2.8.0"><primary sortas="gnutls_x509_crq_set_key_purpose_oid">gnutls_x509_crq_set_key_purpose_oid</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_x509_crq_set_key_purpose_oid (<link linkend="gnutls-x509-crq-t">gnutls_x509_crq_t</link> cert,
                                                         const <link linkend="void">void</link> *oid,
                                                         unsigned <link linkend="int">int</link> critical);</programlisting>
<para>
This function will set the key purpose OIDs of the Certificate.
These are stored in the Extended Key Usage extension (2.5.29.37)
See the GNUTLS_KP_* definitions for human readable names.
</para>
<para>
Subsequent calls to this function will append OIDs to the OID list.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>cert</parameter>&#160;:</term>
<listitem><simpara> a certificate of type <link linkend="gnutls-x509-crq-t"><type>gnutls_x509_crq_t</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>oid</parameter>&#160;:</term>
<listitem><simpara> a pointer to a null terminated string that holds the OID
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>critical</parameter>&#160;:</term>
<listitem><simpara> Whether this extension will be critical or not
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> On success, <link linkend="GNUTLS-E-SUCCESS--CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> is returned, otherwise a
  negative error value.

</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 2.8.0</para></refsect2>
<refsect2 id="gnutls-x509-crq-get-key-purpose-oid" role="function" condition="since:2.8.0">
<title>gnutls_x509_crq_get_key_purpose_oid ()</title>
<indexterm zone="gnutls-x509-crq-get-key-purpose-oid" role="2.8.0"><primary sortas="gnutls_x509_crq_get_key_purpose_oid">gnutls_x509_crq_get_key_purpose_oid</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_x509_crq_get_key_purpose_oid (<link linkend="gnutls-x509-crq-t">gnutls_x509_crq_t</link> cert,
                                                         <link linkend="int">int</link> indx,
                                                         <link linkend="void">void</link> *oid,
                                                         <link linkend="size-t">size_t</link> *sizeof_oid,
                                                         unsigned <link linkend="int">int</link> *critical);</programlisting>
<para>
This function will extract the key purpose OIDs of the Certificate
specified by the given index.  These are stored in the Extended
Key Usage extension (2.5.29.37).  See the GNUTLS_KP_* definitions
for human readable names.
</para>
<para>
If <parameter>oid</parameter> is null then only the size will be filled.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>cert</parameter>&#160;:</term>
<listitem><simpara> should contain a <link linkend="gnutls-x509-crq-t"><type>gnutls_x509_crq_t</type></link> structure
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>indx</parameter>&#160;:</term>
<listitem><simpara> This specifies which OID to return. Use zero to get the first one.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>oid</parameter>&#160;:</term>
<listitem><simpara> a pointer to a buffer to hold the OID (may be null)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>sizeof_oid</parameter>&#160;:</term>
<listitem><simpara> initially holds the size of <parameter>oid</parameter>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>critical</parameter>&#160;:</term>
<listitem><simpara> output variable with critical flag, may be NULL.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> <link linkend="GNUTLS-E-SHORT-MEMORY-BUFFER--CAPS"><literal>GNUTLS_E_SHORT_MEMORY_BUFFER</literal></link> if the provided buffer is
  not long enough, and in that case the *sizeof_oid will be
  updated with the required size.  On success 0 is returned.

</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 2.8.0</para></refsect2>
<refsect2 id="gnutls-x509-crq-get-extension-data" role="function" condition="since:2.8.0">
<title>gnutls_x509_crq_get_extension_data ()</title>
<indexterm zone="gnutls-x509-crq-get-extension-data" role="2.8.0"><primary sortas="gnutls_x509_crq_get_extension_data">gnutls_x509_crq_get_extension_data</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_x509_crq_get_extension_data  (<link linkend="gnutls-x509-crq-t">gnutls_x509_crq_t</link> cert,
                                                         <link linkend="int">int</link> indx,
                                                         <link linkend="void">void</link> *data,
                                                         <link linkend="size-t">size_t</link> *sizeof_data);</programlisting>
<para>
This function will return the requested extension data in the
certificate.  The extension data will be stored as a string in the
provided buffer.
</para>
<para>
Use <link linkend="gnutls-x509-crq-get-extension-info"><function>gnutls_x509_crq_get_extension_info()</function></link> to extract the OID and
critical flag.  Use <link linkend="gnutls-x509-crq-get-extension-by-oid"><function>gnutls_x509_crq_get_extension_by_oid()</function></link> instead,
if you want to get data indexed by the extension OID rather than
sequence.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>cert</parameter>&#160;:</term>
<listitem><simpara> should contain a <link linkend="gnutls-x509-crq-t"><type>gnutls_x509_crq_t</type></link> structure
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>indx</parameter>&#160;:</term>
<listitem><simpara> Specifies which extension OID to send. Use zero to get the first one.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>data</parameter>&#160;:</term>
<listitem><simpara> a pointer to a structure to hold the data (may be null)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>sizeof_data</parameter>&#160;:</term>
<listitem><simpara> initially holds the size of <parameter>oid</parameter>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> On success, <link linkend="GNUTLS-E-SUCCESS--CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> is returned, otherwise a
  negative value in case of an error.  If your have reached the
  last extension available <link linkend="GNUTLS-E-REQUESTED-DATA-NOT-AVAILABLE--CAPS"><literal>GNUTLS_E_REQUESTED_DATA_NOT_AVAILABLE</literal></link>
  will be returned.

</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 2.8.0</para></refsect2>
<refsect2 id="gnutls-x509-crq-get-extension-info" role="function" condition="since:2.8.0">
<title>gnutls_x509_crq_get_extension_info ()</title>
<indexterm zone="gnutls-x509-crq-get-extension-info" role="2.8.0"><primary sortas="gnutls_x509_crq_get_extension_info">gnutls_x509_crq_get_extension_info</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_x509_crq_get_extension_info  (<link linkend="gnutls-x509-crq-t">gnutls_x509_crq_t</link> cert,
                                                         <link linkend="int">int</link> indx,
                                                         <link linkend="void">void</link> *oid,
                                                         <link linkend="size-t">size_t</link> *sizeof_oid,
                                                         <link linkend="int">int</link> *critical);</programlisting>
<para>
This function will return the requested extension OID in the
certificate, and the critical flag for it.  The extension OID will
be stored as a string in the provided buffer.  Use
<link linkend="gnutls-x509-crq-get-extension-data"><function>gnutls_x509_crq_get_extension_data()</function></link> to extract the data.
</para>
<para>
If the buffer provided is not long enough to hold the output, then
*<parameter>sizeof_oid</parameter> is updated and <link linkend="GNUTLS-E-SHORT-MEMORY-BUFFER--CAPS"><literal>GNUTLS_E_SHORT_MEMORY_BUFFER</literal></link> will be
returned.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>cert</parameter>&#160;:</term>
<listitem><simpara> should contain a <link linkend="gnutls-x509-crq-t"><type>gnutls_x509_crq_t</type></link> structure
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>indx</parameter>&#160;:</term>
<listitem><simpara> Specifies which extension OID to send. Use zero to get the first one.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>oid</parameter>&#160;:</term>
<listitem><simpara> a pointer to a structure to hold the OID
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>sizeof_oid</parameter>&#160;:</term>
<listitem><simpara> initially holds the maximum size of <parameter>oid</parameter>, on return
  holds actual size of <parameter>oid</parameter>.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>critical</parameter>&#160;:</term>
<listitem><simpara> output variable with critical flag, may be NULL.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> On success, <link linkend="GNUTLS-E-SUCCESS--CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> is returned, otherwise a
  negative value in case of an error.  If your have reached the
  last extension available <link linkend="GNUTLS-E-REQUESTED-DATA-NOT-AVAILABLE--CAPS"><literal>GNUTLS_E_REQUESTED_DATA_NOT_AVAILABLE</literal></link>
  will be returned.

</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 2.8.0</para></refsect2>
<refsect2 id="gnutls-x509-crq-get-attribute-data" role="function" condition="since:2.8.0">
<title>gnutls_x509_crq_get_attribute_data ()</title>
<indexterm zone="gnutls-x509-crq-get-attribute-data" role="2.8.0"><primary sortas="gnutls_x509_crq_get_attribute_data">gnutls_x509_crq_get_attribute_data</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_x509_crq_get_attribute_data  (<link linkend="gnutls-x509-crq-t">gnutls_x509_crq_t</link> cert,
                                                         <link linkend="int">int</link> indx,
                                                         <link linkend="void">void</link> *data,
                                                         <link linkend="size-t">size_t</link> *sizeof_data);</programlisting>
<para>
This function will return the requested attribute data in the
certificate request.  The attribute data will be stored as a string in the
provided buffer.
</para>
<para>
Use <link linkend="gnutls-x509-crq-get-attribute-info"><function>gnutls_x509_crq_get_attribute_info()</function></link> to extract the OID.
Use <link linkend="gnutls-x509-crq-get-attribute-by-oid"><function>gnutls_x509_crq_get_attribute_by_oid()</function></link> instead,
if you want to get data indexed by the attribute OID rather than
sequence.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>cert</parameter>&#160;:</term>
<listitem><simpara> should contain a <link linkend="gnutls-x509-crq-t"><type>gnutls_x509_crq_t</type></link> structure
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>indx</parameter>&#160;:</term>
<listitem><simpara> Specifies which attribute OID to send. Use zero to get the first one.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>data</parameter>&#160;:</term>
<listitem><simpara> a pointer to a structure to hold the data (may be null)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>sizeof_data</parameter>&#160;:</term>
<listitem><simpara> initially holds the size of <parameter>oid</parameter>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> On success, <link linkend="GNUTLS-E-SUCCESS--CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> is returned, otherwise a
  negative value in case of an error.  If your have reached the
  last extension available <link linkend="GNUTLS-E-REQUESTED-DATA-NOT-AVAILABLE--CAPS"><literal>GNUTLS_E_REQUESTED_DATA_NOT_AVAILABLE</literal></link>
  will be returned.

</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 2.8.0</para></refsect2>
<refsect2 id="gnutls-x509-crq-get-attribute-info" role="function" condition="since:2.8.0">
<title>gnutls_x509_crq_get_attribute_info ()</title>
<indexterm zone="gnutls-x509-crq-get-attribute-info" role="2.8.0"><primary sortas="gnutls_x509_crq_get_attribute_info">gnutls_x509_crq_get_attribute_info</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_x509_crq_get_attribute_info  (<link linkend="gnutls-x509-crq-t">gnutls_x509_crq_t</link> cert,
                                                         <link linkend="int">int</link> indx,
                                                         <link linkend="void">void</link> *oid,
                                                         <link linkend="size-t">size_t</link> *sizeof_oid);</programlisting>
<para>
This function will return the requested attribute OID in the
certificate, and the critical flag for it.  The attribute OID will
be stored as a string in the provided buffer.  Use
<link linkend="gnutls-x509-crq-get-attribute-data"><function>gnutls_x509_crq_get_attribute_data()</function></link> to extract the data.
</para>
<para>
If the buffer provided is not long enough to hold the output, then
*<parameter>sizeof_oid</parameter> is updated and <link linkend="GNUTLS-E-SHORT-MEMORY-BUFFER--CAPS"><literal>GNUTLS_E_SHORT_MEMORY_BUFFER</literal></link> will be
returned.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>cert</parameter>&#160;:</term>
<listitem><simpara> should contain a <link linkend="gnutls-x509-crq-t"><type>gnutls_x509_crq_t</type></link> structure
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>indx</parameter>&#160;:</term>
<listitem><simpara> Specifies which attribute OID to send. Use zero to get the first one.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>oid</parameter>&#160;:</term>
<listitem><simpara> a pointer to a structure to hold the OID
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>sizeof_oid</parameter>&#160;:</term>
<listitem><simpara> initially holds the maximum size of <parameter>oid</parameter>, on return
  holds actual size of <parameter>oid</parameter>.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> On success, <link linkend="GNUTLS-E-SUCCESS--CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> is returned, otherwise a
  negative value in case of an error.  If your have reached the
  last extension available <link linkend="GNUTLS-E-REQUESTED-DATA-NOT-AVAILABLE--CAPS"><literal>GNUTLS_E_REQUESTED_DATA_NOT_AVAILABLE</literal></link>
  will be returned.

</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 2.8.0</para></refsect2>
<refsect2 id="gnutls-x509-crq-get-pk-algorithm" role="function">
<title>gnutls_x509_crq_get_pk_algorithm ()</title>
<indexterm zone="gnutls-x509-crq-get-pk-algorithm"><primary sortas="gnutls_x509_crq_get_pk_algorithm">gnutls_x509_crq_get_pk_algorithm</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_x509_crq_get_pk_algorithm    (<link linkend="gnutls-x509-crq-t">gnutls_x509_crq_t</link> crq,
                                                         unsigned <link linkend="int">int</link> *bits);</programlisting>
<para>
This function will return the public key algorithm of a PKCS #10 
certificate request.
</para>
<para>
If bits is non null, it should have enough size to hold the parameters
size in bits. For RSA the bits returned is the modulus. 
For DSA the bits returned are of the public
exponent.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>crq</parameter>&#160;:</term>
<listitem><simpara> should contain a gnutls_x509_crq_t structure
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>bits</parameter>&#160;:</term>
<listitem><simpara> if bits is non null it will hold the size of the parameters' in bits
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a member of the <link linkend="gnutls-pk-algorithm-t"><type>gnutls_pk_algorithm_t</type></link> enumeration on
  success, or a negative value on error.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-x509-crq-get-key-id" role="function" condition="since:2.8.0">
<title>gnutls_x509_crq_get_key_id ()</title>
<indexterm zone="gnutls-x509-crq-get-key-id" role="2.8.0"><primary sortas="gnutls_x509_crq_get_key_id">gnutls_x509_crq_get_key_id</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_x509_crq_get_key_id          (<link linkend="gnutls-x509-crq-t">gnutls_x509_crq_t</link> crq,
                                                         unsigned <link linkend="int">int</link> flags,
                                                         unsigned <link linkend="char">char</link> *output_data,
                                                         <link linkend="size-t">size_t</link> *output_data_size);</programlisting>
<para>
This function will return a unique ID the depends on the public
key parameters. This ID can be used in checking whether a
certificate corresponds to the given private key.
</para>
<para>
If the buffer provided is not long enough to hold the output, then
*output_data_size is updated and GNUTLS_E_SHORT_MEMORY_BUFFER will
be returned.  The output will normally be a SHA-1 hash output,
which is 20 bytes.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>crq</parameter>&#160;:</term>
<listitem><simpara> Holds the certificate signing request
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>flags</parameter>&#160;:</term>
<listitem><simpara> should be 0 for now
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>output_data</parameter>&#160;:</term>
<listitem><simpara> will contain the key ID
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>output_data_size</parameter>&#160;:</term>
<listitem><simpara> holds the size of output_data (and will be
  replaced by the actual size of parameters)
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> In case of failure a negative value will be
  returned, and 0 on success.

</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 2.8.0</para></refsect2>
<refsect2 id="gnutls-x509-crq-get-key-rsa-raw" role="function" condition="since:2.8.0">
<title>gnutls_x509_crq_get_key_rsa_raw ()</title>
<indexterm zone="gnutls-x509-crq-get-key-rsa-raw" role="2.8.0"><primary sortas="gnutls_x509_crq_get_key_rsa_raw">gnutls_x509_crq_get_key_rsa_raw</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_x509_crq_get_key_rsa_raw     (<link linkend="gnutls-x509-crq-t">gnutls_x509_crq_t</link> crq,
                                                         <link linkend="gnutls-datum-t">gnutls_datum_t</link> *m,
                                                         <link linkend="gnutls-datum-t">gnutls_datum_t</link> *e);</programlisting>
<para>
This function will export the RSA public key's parameters found in
the given structure.  The new parameters will be allocated using
<link linkend="gnutls-malloc"><function>gnutls_malloc()</function></link> and will be stored in the appropriate datum.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>crq</parameter>&#160;:</term>
<listitem><simpara> Holds the certificate
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>m</parameter>&#160;:</term>
<listitem><simpara> will hold the modulus
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>e</parameter>&#160;:</term>
<listitem><simpara> will hold the public exponent
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> On success, <link linkend="GNUTLS-E-SUCCESS--CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> is returned, otherwise a
  negative error value.

</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 2.8.0</para></refsect2>
<refsect2 id="gnutls-x509-crq-get-key-usage" role="function" condition="since:2.8.0">
<title>gnutls_x509_crq_get_key_usage ()</title>
<indexterm zone="gnutls-x509-crq-get-key-usage" role="2.8.0"><primary sortas="gnutls_x509_crq_get_key_usage">gnutls_x509_crq_get_key_usage</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_x509_crq_get_key_usage       (<link linkend="gnutls-x509-crq-t">gnutls_x509_crq_t</link> cert,
                                                         unsigned <link linkend="int">int</link> *key_usage,
                                                         unsigned <link linkend="int">int</link> *critical);</programlisting>
<para>
This function will return certificate's key usage, by reading the
keyUsage X.509 extension (2.5.29.15).  The key usage value will
ORed values of the: <link linkend="GNUTLS-KEY-DIGITAL-SIGNATURE--CAPS"><literal>GNUTLS_KEY_DIGITAL_SIGNATURE</literal></link>,
<link linkend="GNUTLS-KEY-NON-REPUDIATION--CAPS"><literal>GNUTLS_KEY_NON_REPUDIATION</literal></link>, <link linkend="GNUTLS-KEY-KEY-ENCIPHERMENT--CAPS"><literal>GNUTLS_KEY_KEY_ENCIPHERMENT</literal></link>,
<link linkend="GNUTLS-KEY-DATA-ENCIPHERMENT--CAPS"><literal>GNUTLS_KEY_DATA_ENCIPHERMENT</literal></link>, <link linkend="GNUTLS-KEY-KEY-AGREEMENT--CAPS"><literal>GNUTLS_KEY_KEY_AGREEMENT</literal></link>,
<link linkend="GNUTLS-KEY-KEY-CERT-SIGN--CAPS"><literal>GNUTLS_KEY_KEY_CERT_SIGN</literal></link>, <link linkend="GNUTLS-KEY-CRL-SIGN--CAPS"><literal>GNUTLS_KEY_CRL_SIGN</literal></link>,
<link linkend="GNUTLS-KEY-ENCIPHER-ONLY--CAPS"><literal>GNUTLS_KEY_ENCIPHER_ONLY</literal></link>, <link linkend="GNUTLS-KEY-DECIPHER-ONLY--CAPS"><literal>GNUTLS_KEY_DECIPHER_ONLY</literal></link>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>cert</parameter>&#160;:</term>
<listitem><simpara> should contain a <link linkend="gnutls-x509-crq-t"><type>gnutls_x509_crq_t</type></link> structure
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>key_usage</parameter>&#160;:</term>
<listitem><simpara> where the key usage bits will be stored
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>critical</parameter>&#160;:</term>
<listitem><simpara> will be non zero if the extension is marked as critical
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> the certificate key usage, or a negative value in case of
  parsing error.  If the certificate does not contain the keyUsage
  extension <link linkend="GNUTLS-E-REQUESTED-DATA-NOT-AVAILABLE--CAPS"><literal>GNUTLS_E_REQUESTED_DATA_NOT_AVAILABLE</literal></link> will be
  returned.

</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 2.8.0</para></refsect2>
<refsect2 id="gnutls-x509-crq-get-basic-constraints" role="function" condition="since:2.8.0">
<title>gnutls_x509_crq_get_basic_constraints ()</title>
<indexterm zone="gnutls-x509-crq-get-basic-constraints" role="2.8.0"><primary sortas="gnutls_x509_crq_get_basic_constraints">gnutls_x509_crq_get_basic_constraints</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_x509_crq_get_basic_constraints
                                                        (<link linkend="gnutls-x509-crq-t">gnutls_x509_crq_t</link> cert,
                                                         unsigned <link linkend="int">int</link> *critical,
                                                         <link linkend="int">int</link> *ca,
                                                         <link linkend="int">int</link> *pathlen);</programlisting>
<para>
This function will read the certificate's basic constraints, and
return the certificates CA status.  It reads the basicConstraints
X.509 extension (2.5.29.19).</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>cert</parameter>&#160;:</term>
<listitem><simpara> should contain a <link linkend="gnutls-x509-crq-t"><type>gnutls_x509_crq_t</type></link> structure
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>critical</parameter>&#160;:</term>
<listitem><simpara> will be non zero if the extension is marked as critical
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ca</parameter>&#160;:</term>
<listitem><simpara> pointer to output integer indicating CA status, may be NULL,
  value is 1 if the certificate CA flag is set, 0 otherwise.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>pathlen</parameter>&#160;:</term>
<listitem><simpara> pointer to output integer indicating path length (may be
  NULL), non-negative values indicate a present pathLenConstraint
  field and the actual value, -1 indicate that the field is absent.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> If the certificate is a CA a positive value will be
  returned, or zero if the certificate does not have CA flag set.
  A negative value may be returned in case of errors.  If the
  certificate does not contain the basicConstraints extension
  <link linkend="GNUTLS-E-REQUESTED-DATA-NOT-AVAILABLE--CAPS"><literal>GNUTLS_E_REQUESTED_DATA_NOT_AVAILABLE</literal></link> will be returned.

</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 2.8.0</para></refsect2>
<refsect2 id="gnutls-x509-crq-get-subject-alt-name" role="function" condition="since:2.8.0">
<title>gnutls_x509_crq_get_subject_alt_name ()</title>
<indexterm zone="gnutls-x509-crq-get-subject-alt-name" role="2.8.0"><primary sortas="gnutls_x509_crq_get_subject_alt_name">gnutls_x509_crq_get_subject_alt_name</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_x509_crq_get_subject_alt_name
                                                        (<link linkend="gnutls-x509-crq-t">gnutls_x509_crq_t</link> cert,
                                                         unsigned <link linkend="int">int</link> seq,
                                                         <link linkend="void">void</link> *ret,
                                                         <link linkend="size-t">size_t</link> *ret_size,
                                                         unsigned <link linkend="int">int</link> *ret_type,
                                                         unsigned <link linkend="int">int</link> *critical);</programlisting>
<para>
This function will return the alternative names, contained in the
given certificate.  It is the same as
<link linkend="gnutls-x509-crq-get-subject-alt-name"><function>gnutls_x509_crq_get_subject_alt_name()</function></link> except for the fact that it
will return the type of the alternative name in <parameter>ret_type</parameter> even if
the function fails for some reason (i.e.  the buffer provided is
not enough).</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>cert</parameter>&#160;:</term>
<listitem><simpara> should contain a <link linkend="gnutls-x509-crq-t"><type>gnutls_x509_crq_t</type></link> structure
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>seq</parameter>&#160;:</term>
<listitem><simpara> specifies the sequence number of the alt name, 0 for the
  first one, 1 for the second etc.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ret</parameter>&#160;:</term>
<listitem><simpara> is the place where the alternative name will be copied to
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ret_size</parameter>&#160;:</term>
<listitem><simpara> holds the size of ret.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ret_type</parameter>&#160;:</term>
<listitem><simpara> holds the <link linkend="gnutls-x509-subject-alt-name-t"><type>gnutls_x509_subject_alt_name_t</type></link> name type
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>critical</parameter>&#160;:</term>
<listitem><simpara> will be non zero if the extension is marked as critical
  (may be null)
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> the alternative subject name type on success, one of the
  enumerated <link linkend="gnutls-x509-subject-alt-name-t"><type>gnutls_x509_subject_alt_name_t</type></link>.  It will return
  <link linkend="GNUTLS-E-SHORT-MEMORY-BUFFER--CAPS"><literal>GNUTLS_E_SHORT_MEMORY_BUFFER</literal></link> if <parameter>ret_size</parameter> is not large enough to
  hold the value.  In that case <parameter>ret_size</parameter> will be updated with the
  required size.  If the certificate request does not have an
  Alternative name with the specified sequence number then
  <link linkend="GNUTLS-E-REQUESTED-DATA-NOT-AVAILABLE--CAPS"><literal>GNUTLS_E_REQUESTED_DATA_NOT_AVAILABLE</literal></link> is returned.

</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 2.8.0</para></refsect2>
<refsect2 id="gnutls-x509-crq-get-subject-alt-othername-oid" role="function" condition="since:2.8.0">
<title>gnutls_x509_crq_get_subject_alt_othername_oid ()</title>
<indexterm zone="gnutls-x509-crq-get-subject-alt-othername-oid" role="2.8.0"><primary sortas="gnutls_x509_crq_get_subject_alt_othername_oid">gnutls_x509_crq_get_subject_alt_othername_oid</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_x509_crq_get_subject_alt_othername_oid
                                                        (<link linkend="gnutls-x509-crq-t">gnutls_x509_crq_t</link> cert,
                                                         unsigned <link linkend="int">int</link> seq,
                                                         <link linkend="void">void</link> *ret,
                                                         <link linkend="size-t">size_t</link> *ret_size);</programlisting>
<para>
This function will extract the type OID of an otherName Subject
Alternative Name, contained in the given certificate, and return
the type as an enumerated element.
</para>
<para>
This function is only useful if
<link linkend="gnutls-x509-crq-get-subject-alt-name"><function>gnutls_x509_crq_get_subject_alt_name()</function></link> returned
<link linkend="GNUTLS-SAN-OTHERNAME--CAPS"><literal>GNUTLS_SAN_OTHERNAME</literal></link>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>cert</parameter>&#160;:</term>
<listitem><simpara> should contain a <link linkend="gnutls-x509-crq-t"><type>gnutls_x509_crq_t</type></link> structure
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>seq</parameter>&#160;:</term>
<listitem><simpara> specifies the sequence number of the alt name (0 for the first one, 1 for the second etc.)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ret</parameter>&#160;:</term>
<listitem><simpara> is the place where the otherName OID will be copied to
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ret_size</parameter>&#160;:</term>
<listitem><simpara> holds the size of ret.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> the alternative subject name type on success, one of the
  enumerated gnutls_x509_subject_alt_name_t.  For supported OIDs,
  it will return one of the virtual (GNUTLS_SAN_OTHERNAME_*) types,
  e.g. <link linkend="GNUTLS-SAN-OTHERNAME-XMPP--CAPS"><literal>GNUTLS_SAN_OTHERNAME_XMPP</literal></link>, and <link linkend="GNUTLS-SAN-OTHERNAME--CAPS"><literal>GNUTLS_SAN_OTHERNAME</literal></link> for
  unknown OIDs.  It will return <link linkend="GNUTLS-E-SHORT-MEMORY-BUFFER--CAPS"><literal>GNUTLS_E_SHORT_MEMORY_BUFFER</literal></link> if
  <parameter>ret_size</parameter> is not large enough to hold the value.  In that case
  <parameter>ret_size</parameter> will be updated with the required size.  If the
  certificate does not have an Alternative name with the specified
  sequence number and with the otherName type then
  <link linkend="GNUTLS-E-REQUESTED-DATA-NOT-AVAILABLE--CAPS"><literal>GNUTLS_E_REQUESTED_DATA_NOT_AVAILABLE</literal></link> is returned.

</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 2.8.0</para></refsect2>
<refsect2 id="gnutls-x509-crq-get-extension-by-oid" role="function" condition="since:2.8.0">
<title>gnutls_x509_crq_get_extension_by_oid ()</title>
<indexterm zone="gnutls-x509-crq-get-extension-by-oid" role="2.8.0"><primary sortas="gnutls_x509_crq_get_extension_by_oid">gnutls_x509_crq_get_extension_by_oid</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_x509_crq_get_extension_by_oid
                                                        (<link linkend="gnutls-x509-crq-t">gnutls_x509_crq_t</link> cert,
                                                         const <link linkend="char">char</link> *oid,
                                                         <link linkend="int">int</link> indx,
                                                         <link linkend="void">void</link> *buf,
                                                         <link linkend="size-t">size_t</link> *sizeof_buf,
                                                         unsigned <link linkend="int">int</link> *critical);</programlisting>
<para>
This function will return the extension specified by the OID in
the certificate.  The extensions will be returned as binary data
DER encoded, in the provided buffer.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>cert</parameter>&#160;:</term>
<listitem><simpara> should contain a <link linkend="gnutls-x509-crq-t"><type>gnutls_x509_crq_t</type></link> structure
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>oid</parameter>&#160;:</term>
<listitem><simpara> holds an Object Identified in null terminated string
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>indx</parameter>&#160;:</term>
<listitem><simpara> In case multiple same OIDs exist in the extensions, this
  specifies which to send. Use zero to get the first one.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>buf</parameter>&#160;:</term>
<listitem><simpara> a pointer to a structure to hold the name (may be null)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>sizeof_buf</parameter>&#160;:</term>
<listitem><simpara> initially holds the size of <parameter>buf</parameter>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>critical</parameter>&#160;:</term>
<listitem><simpara> will be non zero if the extension is marked as critical
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> On success, <link linkend="GNUTLS-E-SUCCESS--CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> is returned, otherwise a
  negative value in case of an error.  If the certificate does not
  contain the specified extension
  <link linkend="GNUTLS-E-REQUESTED-DATA-NOT-AVAILABLE--CAPS"><literal>GNUTLS_E_REQUESTED_DATA_NOT_AVAILABLE</literal></link> will be returned.

</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 2.8.0</para></refsect2>

</refsect1>




</refentry>
