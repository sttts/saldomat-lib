<?xml version="1.0"?>
<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN" 
               "http://www.oasis-open.org/docbook/xml/4.1.2/docbookx.dtd">
<refentry id="gnutls-openpgp">
<refmeta>
<refentrytitle role="top_of_page" id="gnutls-openpgp.top_of_page">openpgp</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>GNUTLS Library</refmiscinfo>
</refmeta>

<refnamediv>
<refname>openpgp</refname>
<refpurpose></refpurpose>
</refnamediv>

<refsynopsisdiv id="gnutls-openpgp.synopsis" role="synopsis">
<title role="synopsis.title">Synopsis</title>

<synopsis>
enum                <link linkend="gnutls-openpgp-crt-fmt-t">gnutls_openpgp_crt_fmt_t</link>;
typedef             <link linkend="gnutls-openpgp-keyid-t">gnutls_openpgp_keyid_t</link>;
<link linkend="int">int</link>                 <link linkend="gnutls-openpgp-crt-init">gnutls_openpgp_crt_init</link>             (<link linkend="gnutls-openpgp-crt-t">gnutls_openpgp_crt_t</link> *key);
<link linkend="void">void</link>                <link linkend="gnutls-openpgp-crt-deinit">gnutls_openpgp_crt_deinit</link>           (<link linkend="gnutls-openpgp-crt-t">gnutls_openpgp_crt_t</link> key);
<link linkend="int">int</link>                 <link linkend="gnutls-openpgp-crt-import">gnutls_openpgp_crt_import</link>           (<link linkend="gnutls-openpgp-crt-t">gnutls_openpgp_crt_t</link> key,
                                                         const <link linkend="gnutls-datum-t">gnutls_datum_t</link> *data,
                                                         <link linkend="gnutls-openpgp-crt-fmt-t">gnutls_openpgp_crt_fmt_t</link> format);
<link linkend="int">int</link>                 <link linkend="gnutls-openpgp-crt-export">gnutls_openpgp_crt_export</link>           (<link linkend="gnutls-openpgp-crt-t">gnutls_openpgp_crt_t</link> key,
                                                         <link linkend="gnutls-openpgp-crt-fmt-t">gnutls_openpgp_crt_fmt_t</link> format,
                                                         <link linkend="void">void</link> *output_data,
                                                         <link linkend="size-t">size_t</link> *output_data_size);
<link linkend="int">int</link>                 <link linkend="gnutls-openpgp-crt-print">gnutls_openpgp_crt_print</link>            (<link linkend="gnutls-openpgp-crt-t">gnutls_openpgp_crt_t</link> cert,
                                                         <link linkend="gnutls-certificate-print-formats-t">gnutls_certificate_print_formats_t</link> format,
                                                         <link linkend="gnutls-datum-t">gnutls_datum_t</link> *out);
<link linkend="int">int</link>                 <link linkend="gnutls-openpgp-crt-get-key-usage">gnutls_openpgp_crt_get_key_usage</link>    (<link linkend="gnutls-openpgp-crt-t">gnutls_openpgp_crt_t</link> key,
                                                         unsigned <link linkend="int">int</link> *key_usage);
<link linkend="int">int</link>                 <link linkend="gnutls-openpgp-crt-get-fingerprint">gnutls_openpgp_crt_get_fingerprint</link>  (<link linkend="gnutls-openpgp-crt-t">gnutls_openpgp_crt_t</link> key,
                                                         <link linkend="void">void</link> *fpr,
                                                         <link linkend="size-t">size_t</link> *fprlen);
<link linkend="int">int</link>                 <link linkend="gnutls-openpgp-crt-get-subkey-fingerprint">gnutls_openpgp_crt_get_subkey_fingerprint</link>
                                                        (<link linkend="gnutls-openpgp-crt-t">gnutls_openpgp_crt_t</link> key,
                                                         unsigned <link linkend="int">int</link> idx,
                                                         <link linkend="void">void</link> *fpr,
                                                         <link linkend="size-t">size_t</link> *fprlen);
<link linkend="int">int</link>                 <link linkend="gnutls-openpgp-crt-get-name">gnutls_openpgp_crt_get_name</link>         (<link linkend="gnutls-openpgp-crt-t">gnutls_openpgp_crt_t</link> key,
                                                         <link linkend="int">int</link> idx,
                                                         <link linkend="char">char</link> *buf,
                                                         <link linkend="size-t">size_t</link> *sizeof_buf);
<link linkend="gnutls-pk-algorithm-t">gnutls_pk_algorithm_t</link>  <link linkend="gnutls-openpgp-crt-get-pk-algorithm">gnutls_openpgp_crt_get_pk_algorithm</link>
                                                        (<link linkend="gnutls-openpgp-crt-t">gnutls_openpgp_crt_t</link> key,
                                                         unsigned <link linkend="int">int</link> *bits);
<link linkend="int">int</link>                 <link linkend="gnutls-openpgp-crt-get-version">gnutls_openpgp_crt_get_version</link>      (<link linkend="gnutls-openpgp-crt-t">gnutls_openpgp_crt_t</link> key);
<link linkend="time-t">time_t</link>              <link linkend="gnutls-openpgp-crt-get-creation-time">gnutls_openpgp_crt_get_creation_time</link>
                                                        (<link linkend="gnutls-openpgp-crt-t">gnutls_openpgp_crt_t</link> key);
<link linkend="time-t">time_t</link>              <link linkend="gnutls-openpgp-crt-get-expiration-time">gnutls_openpgp_crt_get_expiration_time</link>
                                                        (<link linkend="gnutls-openpgp-crt-t">gnutls_openpgp_crt_t</link> key);
<link linkend="int">int</link>                 <link linkend="gnutls-openpgp-crt-get-key-id">gnutls_openpgp_crt_get_key_id</link>       (<link linkend="gnutls-openpgp-crt-t">gnutls_openpgp_crt_t</link> key,
                                                         <link linkend="gnutls-openpgp-keyid-t">gnutls_openpgp_keyid_t</link> keyid);
<link linkend="int">int</link>                 <link linkend="gnutls-openpgp-crt-check-hostname">gnutls_openpgp_crt_check_hostname</link>   (<link linkend="gnutls-openpgp-crt-t">gnutls_openpgp_crt_t</link> key,
                                                         const <link linkend="char">char</link> *hostname);
<link linkend="int">int</link>                 <link linkend="gnutls-openpgp-crt-get-revoked-status">gnutls_openpgp_crt_get_revoked_status</link>
                                                        (<link linkend="gnutls-openpgp-crt-t">gnutls_openpgp_crt_t</link> key);
<link linkend="int">int</link>                 <link linkend="gnutls-openpgp-crt-get-subkey-count">gnutls_openpgp_crt_get_subkey_count</link> (<link linkend="gnutls-openpgp-crt-t">gnutls_openpgp_crt_t</link> key);
<link linkend="int">int</link>                 <link linkend="gnutls-openpgp-crt-get-subkey-idx">gnutls_openpgp_crt_get_subkey_idx</link>   (<link linkend="gnutls-openpgp-crt-t">gnutls_openpgp_crt_t</link> key,
                                                         const <link linkend="gnutls-openpgp-keyid-t">gnutls_openpgp_keyid_t</link> keyid);
<link linkend="int">int</link>                 <link linkend="gnutls-openpgp-crt-get-subkey-revoked-status">gnutls_openpgp_crt_get_subkey_revoked_status</link>
                                                        (<link linkend="gnutls-openpgp-crt-t">gnutls_openpgp_crt_t</link> key,
                                                         unsigned <link linkend="int">int</link> idx);
<link linkend="gnutls-pk-algorithm-t">gnutls_pk_algorithm_t</link>  <link linkend="gnutls-openpgp-crt-get-subkey-pk-algorithm">gnutls_openpgp_crt_get_subkey_pk_algorithm</link>
                                                        (<link linkend="gnutls-openpgp-crt-t">gnutls_openpgp_crt_t</link> key,
                                                         unsigned <link linkend="int">int</link> idx,
                                                         unsigned <link linkend="int">int</link> *bits);
<link linkend="time-t">time_t</link>              <link linkend="gnutls-openpgp-crt-get-subkey-creation-time">gnutls_openpgp_crt_get_subkey_creation_time</link>
                                                        (<link linkend="gnutls-openpgp-crt-t">gnutls_openpgp_crt_t</link> key,
                                                         unsigned <link linkend="int">int</link> idx);
<link linkend="time-t">time_t</link>              <link linkend="gnutls-openpgp-crt-get-subkey-expiration-time">gnutls_openpgp_crt_get_subkey_expiration_time</link>
                                                        (<link linkend="gnutls-openpgp-crt-t">gnutls_openpgp_crt_t</link> key,
                                                         unsigned <link linkend="int">int</link> idx);
<link linkend="int">int</link>                 <link linkend="gnutls-openpgp-crt-get-subkey-id">gnutls_openpgp_crt_get_subkey_id</link>    (<link linkend="gnutls-openpgp-crt-t">gnutls_openpgp_crt_t</link> key,
                                                         unsigned <link linkend="int">int</link> idx,
                                                         <link linkend="gnutls-openpgp-keyid-t">gnutls_openpgp_keyid_t</link> keyid);
<link linkend="int">int</link>                 <link linkend="gnutls-openpgp-crt-get-subkey-usage">gnutls_openpgp_crt_get_subkey_usage</link> (<link linkend="gnutls-openpgp-crt-t">gnutls_openpgp_crt_t</link> key,
                                                         unsigned <link linkend="int">int</link> idx,
                                                         unsigned <link linkend="int">int</link> *key_usage);
<link linkend="int">int</link>                 <link linkend="gnutls-openpgp-crt-get-subkey-pk-dsa-raw">gnutls_openpgp_crt_get_subkey_pk_dsa_raw</link>
                                                        (<link linkend="gnutls-openpgp-crt-t">gnutls_openpgp_crt_t</link> crt,
                                                         unsigned <link linkend="int">int</link> idx,
                                                         <link linkend="gnutls-datum-t">gnutls_datum_t</link> *p,
                                                         <link linkend="gnutls-datum-t">gnutls_datum_t</link> *q,
                                                         <link linkend="gnutls-datum-t">gnutls_datum_t</link> *g,
                                                         <link linkend="gnutls-datum-t">gnutls_datum_t</link> *y);
<link linkend="int">int</link>                 <link linkend="gnutls-openpgp-crt-get-subkey-pk-rsa-raw">gnutls_openpgp_crt_get_subkey_pk_rsa_raw</link>
                                                        (<link linkend="gnutls-openpgp-crt-t">gnutls_openpgp_crt_t</link> crt,
                                                         unsigned <link linkend="int">int</link> idx,
                                                         <link linkend="gnutls-datum-t">gnutls_datum_t</link> *m,
                                                         <link linkend="gnutls-datum-t">gnutls_datum_t</link> *e);
<link linkend="int">int</link>                 <link linkend="gnutls-openpgp-crt-get-pk-dsa-raw">gnutls_openpgp_crt_get_pk_dsa_raw</link>   (<link linkend="gnutls-openpgp-crt-t">gnutls_openpgp_crt_t</link> crt,
                                                         <link linkend="gnutls-datum-t">gnutls_datum_t</link> *p,
                                                         <link linkend="gnutls-datum-t">gnutls_datum_t</link> *q,
                                                         <link linkend="gnutls-datum-t">gnutls_datum_t</link> *g,
                                                         <link linkend="gnutls-datum-t">gnutls_datum_t</link> *y);
<link linkend="int">int</link>                 <link linkend="gnutls-openpgp-crt-get-pk-rsa-raw">gnutls_openpgp_crt_get_pk_rsa_raw</link>   (<link linkend="gnutls-openpgp-crt-t">gnutls_openpgp_crt_t</link> crt,
                                                         <link linkend="gnutls-datum-t">gnutls_datum_t</link> *m,
                                                         <link linkend="gnutls-datum-t">gnutls_datum_t</link> *e);
<link linkend="int">int</link>                 <link linkend="gnutls-openpgp-crt-get-preferred-key-id">gnutls_openpgp_crt_get_preferred_key_id</link>
                                                        (<link linkend="gnutls-openpgp-crt-t">gnutls_openpgp_crt_t</link> key,
                                                         <link linkend="gnutls-openpgp-keyid-t">gnutls_openpgp_keyid_t</link> keyid);
<link linkend="int">int</link>                 <link linkend="gnutls-openpgp-crt-set-preferred-key-id">gnutls_openpgp_crt_set_preferred_key_id</link>
                                                        (<link linkend="gnutls-openpgp-crt-t">gnutls_openpgp_crt_t</link> key,
                                                         const <link linkend="gnutls-openpgp-keyid-t">gnutls_openpgp_keyid_t</link> keyid);
<link linkend="int">int</link>                 <link linkend="gnutls-openpgp-privkey-init">gnutls_openpgp_privkey_init</link>         (<link linkend="gnutls-openpgp-privkey-t">gnutls_openpgp_privkey_t</link> *key);
<link linkend="void">void</link>                <link linkend="gnutls-openpgp-privkey-deinit">gnutls_openpgp_privkey_deinit</link>       (<link linkend="gnutls-openpgp-privkey-t">gnutls_openpgp_privkey_t</link> key);
<link linkend="gnutls-pk-algorithm-t">gnutls_pk_algorithm_t</link>  <link linkend="gnutls-openpgp-privkey-get-pk-algorithm">gnutls_openpgp_privkey_get_pk_algorithm</link>
                                                        (<link linkend="gnutls-openpgp-privkey-t">gnutls_openpgp_privkey_t</link> key,
                                                         unsigned <link linkend="int">int</link> *bits);
<link linkend="int">int</link>                 <link linkend="gnutls-openpgp-privkey-import">gnutls_openpgp_privkey_import</link>       (<link linkend="gnutls-openpgp-privkey-t">gnutls_openpgp_privkey_t</link> key,
                                                         const <link linkend="gnutls-datum-t">gnutls_datum_t</link> *data,
                                                         <link linkend="gnutls-openpgp-crt-fmt-t">gnutls_openpgp_crt_fmt_t</link> format,
                                                         const <link linkend="char">char</link> *password,
                                                         unsigned <link linkend="int">int</link> flags);
<link linkend="int">int</link>                 <link linkend="gnutls-openpgp-privkey-sign-hash">gnutls_openpgp_privkey_sign_hash</link>    (<link linkend="gnutls-openpgp-privkey-t">gnutls_openpgp_privkey_t</link> key,
                                                         const <link linkend="gnutls-datum-t">gnutls_datum_t</link> *hash,
                                                         <link linkend="gnutls-datum-t">gnutls_datum_t</link> *signature);
<link linkend="int">int</link>                 <link linkend="gnutls-openpgp-privkey-get-fingerprint">gnutls_openpgp_privkey_get_fingerprint</link>
                                                        (<link linkend="gnutls-openpgp-privkey-t">gnutls_openpgp_privkey_t</link> key,
                                                         <link linkend="void">void</link> *fpr,
                                                         <link linkend="size-t">size_t</link> *fprlen);
<link linkend="int">int</link>                 <link linkend="gnutls-openpgp-privkey-get-subkey-fingerprint">gnutls_openpgp_privkey_get_subkey_fingerprint</link>
                                                        (<link linkend="gnutls-openpgp-privkey-t">gnutls_openpgp_privkey_t</link> key,
                                                         unsigned <link linkend="int">int</link> idx,
                                                         <link linkend="void">void</link> *fpr,
                                                         <link linkend="size-t">size_t</link> *fprlen);
<link linkend="int">int</link>                 <link linkend="gnutls-openpgp-privkey-get-key-id">gnutls_openpgp_privkey_get_key_id</link>   (<link linkend="gnutls-openpgp-privkey-t">gnutls_openpgp_privkey_t</link> key,
                                                         <link linkend="gnutls-openpgp-keyid-t">gnutls_openpgp_keyid_t</link> keyid);
<link linkend="int">int</link>                 <link linkend="gnutls-openpgp-privkey-get-subkey-count">gnutls_openpgp_privkey_get_subkey_count</link>
                                                        (<link linkend="gnutls-openpgp-privkey-t">gnutls_openpgp_privkey_t</link> key);
<link linkend="int">int</link>                 <link linkend="gnutls-openpgp-privkey-get-subkey-idx">gnutls_openpgp_privkey_get_subkey_idx</link>
                                                        (<link linkend="gnutls-openpgp-privkey-t">gnutls_openpgp_privkey_t</link> key,
                                                         const <link linkend="gnutls-openpgp-keyid-t">gnutls_openpgp_keyid_t</link> keyid);
<link linkend="int">int</link>                 <link linkend="gnutls-openpgp-privkey-get-subkey-revoked-status">gnutls_openpgp_privkey_get_subkey_revoked_status</link>
                                                        (<link linkend="gnutls-openpgp-privkey-t">gnutls_openpgp_privkey_t</link> key,
                                                         unsigned <link linkend="int">int</link> idx);
<link linkend="int">int</link>                 <link linkend="gnutls-openpgp-privkey-get-revoked-status">gnutls_openpgp_privkey_get_revoked_status</link>
                                                        (<link linkend="gnutls-openpgp-privkey-t">gnutls_openpgp_privkey_t</link> key);
<link linkend="gnutls-pk-algorithm-t">gnutls_pk_algorithm_t</link>  <link linkend="gnutls-openpgp-privkey-get-subkey-pk-algorithm">gnutls_openpgp_privkey_get_subkey_pk_algorithm</link>
                                                        (<link linkend="gnutls-openpgp-privkey-t">gnutls_openpgp_privkey_t</link> key,
                                                         unsigned <link linkend="int">int</link> idx,
                                                         unsigned <link linkend="int">int</link> *bits);
<link linkend="time-t">time_t</link>              <link linkend="gnutls-openpgp-privkey-get-subkey-expiration-time">gnutls_openpgp_privkey_get_subkey_expiration_time</link>
                                                        (<link linkend="gnutls-openpgp-privkey-t">gnutls_openpgp_privkey_t</link> key,
                                                         unsigned <link linkend="int">int</link> idx);
<link linkend="int">int</link>                 <link linkend="gnutls-openpgp-privkey-get-subkey-id">gnutls_openpgp_privkey_get_subkey_id</link>
                                                        (<link linkend="gnutls-openpgp-privkey-t">gnutls_openpgp_privkey_t</link> key,
                                                         unsigned <link linkend="int">int</link> idx,
                                                         <link linkend="gnutls-openpgp-keyid-t">gnutls_openpgp_keyid_t</link> keyid);
<link linkend="time-t">time_t</link>              <link linkend="gnutls-openpgp-privkey-get-subkey-creation-time">gnutls_openpgp_privkey_get_subkey_creation_time</link>
                                                        (<link linkend="gnutls-openpgp-privkey-t">gnutls_openpgp_privkey_t</link> key,
                                                         unsigned <link linkend="int">int</link> idx);
<link linkend="int">int</link>                 <link linkend="gnutls-openpgp-privkey-export-subkey-dsa-raw">gnutls_openpgp_privkey_export_subkey_dsa_raw</link>
                                                        (<link linkend="gnutls-openpgp-privkey-t">gnutls_openpgp_privkey_t</link> pkey,
                                                         unsigned <link linkend="int">int</link> idx,
                                                         <link linkend="gnutls-datum-t">gnutls_datum_t</link> *p,
                                                         <link linkend="gnutls-datum-t">gnutls_datum_t</link> *q,
                                                         <link linkend="gnutls-datum-t">gnutls_datum_t</link> *g,
                                                         <link linkend="gnutls-datum-t">gnutls_datum_t</link> *y,
                                                         <link linkend="gnutls-datum-t">gnutls_datum_t</link> *x);
<link linkend="int">int</link>                 <link linkend="gnutls-openpgp-privkey-export-subkey-rsa-raw">gnutls_openpgp_privkey_export_subkey_rsa_raw</link>
                                                        (<link linkend="gnutls-openpgp-privkey-t">gnutls_openpgp_privkey_t</link> pkey,
                                                         unsigned <link linkend="int">int</link> idx,
                                                         <link linkend="gnutls-datum-t">gnutls_datum_t</link> *m,
                                                         <link linkend="gnutls-datum-t">gnutls_datum_t</link> *e,
                                                         <link linkend="gnutls-datum-t">gnutls_datum_t</link> *d,
                                                         <link linkend="gnutls-datum-t">gnutls_datum_t</link> *p,
                                                         <link linkend="gnutls-datum-t">gnutls_datum_t</link> *q,
                                                         <link linkend="gnutls-datum-t">gnutls_datum_t</link> *u);
<link linkend="int">int</link>                 <link linkend="gnutls-openpgp-privkey-export-dsa-raw">gnutls_openpgp_privkey_export_dsa_raw</link>
                                                        (<link linkend="gnutls-openpgp-privkey-t">gnutls_openpgp_privkey_t</link> pkey,
                                                         <link linkend="gnutls-datum-t">gnutls_datum_t</link> *p,
                                                         <link linkend="gnutls-datum-t">gnutls_datum_t</link> *q,
                                                         <link linkend="gnutls-datum-t">gnutls_datum_t</link> *g,
                                                         <link linkend="gnutls-datum-t">gnutls_datum_t</link> *y,
                                                         <link linkend="gnutls-datum-t">gnutls_datum_t</link> *x);
<link linkend="int">int</link>                 <link linkend="gnutls-openpgp-privkey-export-rsa-raw">gnutls_openpgp_privkey_export_rsa_raw</link>
                                                        (<link linkend="gnutls-openpgp-privkey-t">gnutls_openpgp_privkey_t</link> pkey,
                                                         <link linkend="gnutls-datum-t">gnutls_datum_t</link> *m,
                                                         <link linkend="gnutls-datum-t">gnutls_datum_t</link> *e,
                                                         <link linkend="gnutls-datum-t">gnutls_datum_t</link> *d,
                                                         <link linkend="gnutls-datum-t">gnutls_datum_t</link> *p,
                                                         <link linkend="gnutls-datum-t">gnutls_datum_t</link> *q,
                                                         <link linkend="gnutls-datum-t">gnutls_datum_t</link> *u);
<link linkend="int">int</link>                 <link linkend="gnutls-openpgp-privkey-export">gnutls_openpgp_privkey_export</link>       (<link linkend="gnutls-openpgp-privkey-t">gnutls_openpgp_privkey_t</link> key,
                                                         <link linkend="gnutls-openpgp-crt-fmt-t">gnutls_openpgp_crt_fmt_t</link> format,
                                                         const <link linkend="char">char</link> *password,
                                                         unsigned <link linkend="int">int</link> flags,
                                                         <link linkend="void">void</link> *output_data,
                                                         <link linkend="size-t">size_t</link> *output_data_size);
<link linkend="int">int</link>                 <link linkend="gnutls-openpgp-privkey-set-preferred-key-id">gnutls_openpgp_privkey_set_preferred_key_id</link>
                                                        (<link linkend="gnutls-openpgp-privkey-t">gnutls_openpgp_privkey_t</link> key,
                                                         const <link linkend="gnutls-openpgp-keyid-t">gnutls_openpgp_keyid_t</link> keyid);
<link linkend="int">int</link>                 <link linkend="gnutls-openpgp-privkey-get-preferred-key-id">gnutls_openpgp_privkey_get_preferred_key_id</link>
                                                        (<link linkend="gnutls-openpgp-privkey-t">gnutls_openpgp_privkey_t</link> key,
                                                         <link linkend="gnutls-openpgp-keyid-t">gnutls_openpgp_keyid_t</link> keyid);
<link linkend="int">int</link>                 <link linkend="gnutls-openpgp-crt-get-auth-subkey">gnutls_openpgp_crt_get_auth_subkey</link>  (<link linkend="gnutls-openpgp-crt-t">gnutls_openpgp_crt_t</link> crt,
                                                         <link linkend="gnutls-openpgp-keyid-t">gnutls_openpgp_keyid_t</link> keyid,
                                                         unsigned <link linkend="int">int</link> flag);
<link linkend="int">int</link>                 <link linkend="gnutls-openpgp-keyring-init">gnutls_openpgp_keyring_init</link>         (<link linkend="gnutls-openpgp-keyring-t">gnutls_openpgp_keyring_t</link> *keyring);
<link linkend="void">void</link>                <link linkend="gnutls-openpgp-keyring-deinit">gnutls_openpgp_keyring_deinit</link>       (<link linkend="gnutls-openpgp-keyring-t">gnutls_openpgp_keyring_t</link> keyring);
<link linkend="int">int</link>                 <link linkend="gnutls-openpgp-keyring-import">gnutls_openpgp_keyring_import</link>       (<link linkend="gnutls-openpgp-keyring-t">gnutls_openpgp_keyring_t</link> keyring,
                                                         const <link linkend="gnutls-datum-t">gnutls_datum_t</link> *data,
                                                         <link linkend="gnutls-openpgp-crt-fmt-t">gnutls_openpgp_crt_fmt_t</link> format);
<link linkend="int">int</link>                 <link linkend="gnutls-openpgp-keyring-check-id">gnutls_openpgp_keyring_check_id</link>     (<link linkend="gnutls-openpgp-keyring-t">gnutls_openpgp_keyring_t</link> ring,
                                                         const <link linkend="gnutls-openpgp-keyid-t">gnutls_openpgp_keyid_t</link> keyid,
                                                         unsigned <link linkend="int">int</link> flags);
<link linkend="int">int</link>                 <link linkend="gnutls-openpgp-crt-verify-ring">gnutls_openpgp_crt_verify_ring</link>      (<link linkend="gnutls-openpgp-crt-t">gnutls_openpgp_crt_t</link> key,
                                                         <link linkend="gnutls-openpgp-keyring-t">gnutls_openpgp_keyring_t</link> keyring,
                                                         unsigned <link linkend="int">int</link> flags,
                                                         unsigned <link linkend="int">int</link> *verify);
<link linkend="int">int</link>                 <link linkend="gnutls-openpgp-crt-verify-self">gnutls_openpgp_crt_verify_self</link>      (<link linkend="gnutls-openpgp-crt-t">gnutls_openpgp_crt_t</link> key,
                                                         unsigned <link linkend="int">int</link> flags,
                                                         unsigned <link linkend="int">int</link> *verify);
<link linkend="int">int</link>                 <link linkend="gnutls-openpgp-keyring-get-crt">gnutls_openpgp_keyring_get_crt</link>      (<link linkend="gnutls-openpgp-keyring-t">gnutls_openpgp_keyring_t</link> ring,
                                                         unsigned <link linkend="int">int</link> idx,
                                                         <link linkend="gnutls-openpgp-crt-t">gnutls_openpgp_crt_t</link> *cert);
<link linkend="int">int</link>                 <link linkend="gnutls-openpgp-keyring-get-crt-count">gnutls_openpgp_keyring_get_crt_count</link>
                                                        (<link linkend="gnutls-openpgp-keyring-t">gnutls_openpgp_keyring_t</link> ring);
<link linkend="int">int</link>                 (<link linkend="gnutls-openpgp-recv-key-func">*gnutls_openpgp_recv_key_func</link>)     (<link linkend="gnutls-session-t">gnutls_session_t</link> session,
                                                         unsigned <link linkend="char">char</link> *keyfpr,
                                                         unsigned <link linkend="int">int</link> keyfpr_length,
                                                         <link linkend="gnutls-datum-t">gnutls_datum_t</link> *key);
<link linkend="void">void</link>                <link linkend="gnutls-openpgp-set-recv-key-function">gnutls_openpgp_set_recv_key_function</link>
                                                        (<link linkend="gnutls-session-t">gnutls_session_t</link> session,
                                                         <link linkend="gnutls-openpgp-recv-key-func">gnutls_openpgp_recv_key_func</link> func);
<link linkend="int">int</link>                 <link linkend="gnutls-certificate-set-openpgp-key">gnutls_certificate_set_openpgp_key</link>  (<link linkend="gnutls-certificate-credentials-t">gnutls_certificate_credentials_t</link> res,
                                                         <link linkend="gnutls-openpgp-crt-t">gnutls_openpgp_crt_t</link> key,
                                                         <link linkend="gnutls-openpgp-privkey-t">gnutls_openpgp_privkey_t</link> pkey);
<link linkend="int">int</link>                 <link linkend="gnutls-certificate-set-openpgp-key-file">gnutls_certificate_set_openpgp_key_file</link>
                                                        (<link linkend="gnutls-certificate-credentials-t">gnutls_certificate_credentials_t</link> res,
                                                         const <link linkend="char">char</link> *certfile,
                                                         const <link linkend="char">char</link> *keyfile,
                                                         <link linkend="gnutls-openpgp-crt-fmt-t">gnutls_openpgp_crt_fmt_t</link> format);
<link linkend="int">int</link>                 <link linkend="gnutls-certificate-set-openpgp-key-mem">gnutls_certificate_set_openpgp_key_mem</link>
                                                        (<link linkend="gnutls-certificate-credentials-t">gnutls_certificate_credentials_t</link> res,
                                                         const <link linkend="gnutls-datum-t">gnutls_datum_t</link> *cert,
                                                         const <link linkend="gnutls-datum-t">gnutls_datum_t</link> *key,
                                                         <link linkend="gnutls-openpgp-crt-fmt-t">gnutls_openpgp_crt_fmt_t</link> format);
<link linkend="int">int</link>                 <link linkend="gnutls-certificate-set-openpgp-key-file2">gnutls_certificate_set_openpgp_key_file2</link>
                                                        (<link linkend="gnutls-certificate-credentials-t">gnutls_certificate_credentials_t</link> res,
                                                         const <link linkend="char">char</link> *certfile,
                                                         const <link linkend="char">char</link> *keyfile,
                                                         const <link linkend="char">char</link> *subkey_id,
                                                         <link linkend="gnutls-openpgp-crt-fmt-t">gnutls_openpgp_crt_fmt_t</link> format);
<link linkend="int">int</link>                 <link linkend="gnutls-certificate-set-openpgp-key-mem2">gnutls_certificate_set_openpgp_key_mem2</link>
                                                        (<link linkend="gnutls-certificate-credentials-t">gnutls_certificate_credentials_t</link> res,
                                                         const <link linkend="gnutls-datum-t">gnutls_datum_t</link> *cert,
                                                         const <link linkend="gnutls-datum-t">gnutls_datum_t</link> *key,
                                                         const <link linkend="char">char</link> *subkey_id,
                                                         <link linkend="gnutls-openpgp-crt-fmt-t">gnutls_openpgp_crt_fmt_t</link> format);
<link linkend="int">int</link>                 <link linkend="gnutls-certificate-set-openpgp-keyring-mem">gnutls_certificate_set_openpgp_keyring_mem</link>
                                                        (<link linkend="gnutls-certificate-credentials-t">gnutls_certificate_credentials_t</link> c,
                                                         unsigned <link linkend="char">char</link> *data,
                                                         <link linkend="size-t">size_t</link> dlen,
                                                         <link linkend="gnutls-openpgp-crt-fmt-t">gnutls_openpgp_crt_fmt_t</link> format);
<link linkend="int">int</link>                 <link linkend="gnutls-certificate-set-openpgp-keyring-file">gnutls_certificate_set_openpgp_keyring_file</link>
                                                        (<link linkend="gnutls-certificate-credentials-t">gnutls_certificate_credentials_t</link> c,
                                                         const <link linkend="char">char</link> *file,
                                                         <link linkend="gnutls-openpgp-crt-fmt-t">gnutls_openpgp_crt_fmt_t</link> format);
</synopsis>
</refsynopsisdiv>









<refsect1 id="gnutls-openpgp.description" role="desc">
<title role="desc.title">Description</title>
<para>
</para>
</refsect1>

<refsect1 id="gnutls-openpgp.details" role="details">
<title role="details.title">Details</title>
<refsect2 id="gnutls-openpgp-crt-fmt-t" role="enum">
<title>enum gnutls_openpgp_crt_fmt_t</title>
<indexterm zone="gnutls-openpgp-crt-fmt-t"><primary sortas="gnutls_openpgp_crt_fmt_t">gnutls_openpgp_crt_fmt_t</primary></indexterm><programlisting>  typedef enum gnutls_openpgp_crt_fmt
  { GNUTLS_OPENPGP_FMT_RAW,
    GNUTLS_OPENPGP_FMT_BASE64
  } gnutls_openpgp_crt_fmt_t;
</programlisting>
<para>
</para></refsect2>
<refsect2 id="gnutls-openpgp-keyid-t" role="typedef">
<title>gnutls_openpgp_keyid_t</title>
<indexterm zone="gnutls-openpgp-keyid-t"><primary sortas="gnutls_openpgp_keyid_t">gnutls_openpgp_keyid_t</primary></indexterm><programlisting>  typedef unsigned char gnutls_openpgp_keyid_t[8];
</programlisting>
<para>
</para></refsect2>
<refsect2 id="gnutls-openpgp-crt-init" role="function">
<title>gnutls_openpgp_crt_init ()</title>
<indexterm zone="gnutls-openpgp-crt-init"><primary sortas="gnutls_openpgp_crt_init">gnutls_openpgp_crt_init</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_openpgp_crt_init             (<link linkend="gnutls-openpgp-crt-t">gnutls_openpgp_crt_t</link> *key);</programlisting>
<para>
This function will initialize an OpenPGP key structure.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>key</parameter>&#160;:</term>
<listitem><simpara> The structure to be initialized
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> <link linkend="GNUTLS-E-SUCCESS--CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> on success, or an error code.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-openpgp-crt-deinit" role="function">
<title>gnutls_openpgp_crt_deinit ()</title>
<indexterm zone="gnutls-openpgp-crt-deinit"><primary sortas="gnutls_openpgp_crt_deinit">gnutls_openpgp_crt_deinit</primary></indexterm><programlisting><link linkend="void">void</link>                gnutls_openpgp_crt_deinit           (<link linkend="gnutls-openpgp-crt-t">gnutls_openpgp_crt_t</link> key);</programlisting>
<para>
This function will deinitialize a key structure.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>key</parameter>&#160;:</term>
<listitem><simpara> The structure to be initialized
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-openpgp-crt-import" role="function">
<title>gnutls_openpgp_crt_import ()</title>
<indexterm zone="gnutls-openpgp-crt-import"><primary sortas="gnutls_openpgp_crt_import">gnutls_openpgp_crt_import</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_openpgp_crt_import           (<link linkend="gnutls-openpgp-crt-t">gnutls_openpgp_crt_t</link> key,
                                                         const <link linkend="gnutls-datum-t">gnutls_datum_t</link> *data,
                                                         <link linkend="gnutls-openpgp-crt-fmt-t">gnutls_openpgp_crt_fmt_t</link> format);</programlisting>
<para>
This function will convert the given RAW or Base64 encoded key to
the native <link linkend="gnutls-openpgp-crt-t"><type>gnutls_openpgp_crt_t</type></link> format. The output will be stored
in 'key'.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>key</parameter>&#160;:</term>
<listitem><simpara> The structure to store the parsed key.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>data</parameter>&#160;:</term>
<listitem><simpara> The RAW or BASE64 encoded key.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>format</parameter>&#160;:</term>
<listitem><simpara> One of gnutls_openpgp_crt_fmt_t elements.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> <link linkend="GNUTLS-E-SUCCESS--CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> on success, or an error code.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-openpgp-crt-export" role="function">
<title>gnutls_openpgp_crt_export ()</title>
<indexterm zone="gnutls-openpgp-crt-export"><primary sortas="gnutls_openpgp_crt_export">gnutls_openpgp_crt_export</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_openpgp_crt_export           (<link linkend="gnutls-openpgp-crt-t">gnutls_openpgp_crt_t</link> key,
                                                         <link linkend="gnutls-openpgp-crt-fmt-t">gnutls_openpgp_crt_fmt_t</link> format,
                                                         <link linkend="void">void</link> *output_data,
                                                         <link linkend="size-t">size_t</link> *output_data_size);</programlisting>
<para>
This function will convert the given key to RAW or Base64 format.
If the buffer provided is not long enough to hold the output, then
<link linkend="GNUTLS-E-SHORT-MEMORY-BUFFER--CAPS"><literal>GNUTLS_E_SHORT_MEMORY_BUFFER</literal></link> will be returned.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>key</parameter>&#160;:</term>
<listitem><simpara> Holds the key.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>format</parameter>&#160;:</term>
<listitem><simpara> One of gnutls_openpgp_crt_fmt_t elements.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>output_data</parameter>&#160;:</term>
<listitem><simpara> will contain the key base64 encoded or raw
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>output_data_size</parameter>&#160;:</term>
<listitem><simpara> holds the size of output_data (and will
  be replaced by the actual size of parameters)
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> <link linkend="GNUTLS-E-SUCCESS--CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> on success, or an error code.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-openpgp-crt-print" role="function">
<title>gnutls_openpgp_crt_print ()</title>
<indexterm zone="gnutls-openpgp-crt-print"><primary sortas="gnutls_openpgp_crt_print">gnutls_openpgp_crt_print</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_openpgp_crt_print            (<link linkend="gnutls-openpgp-crt-t">gnutls_openpgp_crt_t</link> cert,
                                                         <link linkend="gnutls-certificate-print-formats-t">gnutls_certificate_print_formats_t</link> format,
                                                         <link linkend="gnutls-datum-t">gnutls_datum_t</link> *out);</programlisting>
<para>
This function will pretty print an OpenPGP certificate, suitable
for display to a human.
</para>
<para>
The format should be zero for future compatibility.
</para>
<para>
The output <parameter>out</parameter> needs to be deallocate using <link linkend="gnutls-free"><function>gnutls_free()</function></link>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>cert</parameter>&#160;:</term>
<listitem><simpara> The structure to be printed
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>format</parameter>&#160;:</term>
<listitem><simpara> Indicate the format to use
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>out</parameter>&#160;:</term>
<listitem><simpara> Newly allocated datum with zero terminated string.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> <link linkend="GNUTLS-E-SUCCESS--CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> on success, or an error code.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-openpgp-crt-get-key-usage" role="function">
<title>gnutls_openpgp_crt_get_key_usage ()</title>
<indexterm zone="gnutls-openpgp-crt-get-key-usage"><primary sortas="gnutls_openpgp_crt_get_key_usage">gnutls_openpgp_crt_get_key_usage</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_openpgp_crt_get_key_usage    (<link linkend="gnutls-openpgp-crt-t">gnutls_openpgp_crt_t</link> key,
                                                         unsigned <link linkend="int">int</link> *key_usage);</programlisting>
<para>
This function will return certificate's key usage, by checking the
key algorithm. The key usage value will ORed values of the:
<link linkend="GNUTLS-KEY-DIGITAL-SIGNATURE--CAPS"><literal>GNUTLS_KEY_DIGITAL_SIGNATURE</literal></link>, <link linkend="GNUTLS-KEY-KEY-ENCIPHERMENT--CAPS"><literal>GNUTLS_KEY_KEY_ENCIPHERMENT</literal></link>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>key</parameter>&#160;:</term>
<listitem><simpara> should contain a gnutls_openpgp_crt_t structure
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>key_usage</parameter>&#160;:</term>
<listitem><simpara> where the key usage bits will be stored
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> <link linkend="GNUTLS-E-SUCCESS--CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> on success, or an error code.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-openpgp-crt-get-fingerprint" role="function">
<title>gnutls_openpgp_crt_get_fingerprint ()</title>
<indexterm zone="gnutls-openpgp-crt-get-fingerprint"><primary sortas="gnutls_openpgp_crt_get_fingerprint">gnutls_openpgp_crt_get_fingerprint</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_openpgp_crt_get_fingerprint  (<link linkend="gnutls-openpgp-crt-t">gnutls_openpgp_crt_t</link> key,
                                                         <link linkend="void">void</link> *fpr,
                                                         <link linkend="size-t">size_t</link> *fprlen);</programlisting>
<para>
Get key fingerprint.  Depending on the algorithm, the fingerprint
can be 16 or 20 bytes.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>key</parameter>&#160;:</term>
<listitem><simpara> the raw data that contains the OpenPGP public key.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>fpr</parameter>&#160;:</term>
<listitem><simpara> the buffer to save the fingerprint, must hold at least 20 bytes.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>fprlen</parameter>&#160;:</term>
<listitem><simpara> the integer to save the length of the fingerprint.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> On success, 0 is returned.  Otherwise, an error code.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-openpgp-crt-get-subkey-fingerprint" role="function" condition="since:2.4.0">
<title>gnutls_openpgp_crt_get_subkey_fingerprint ()</title>
<indexterm zone="gnutls-openpgp-crt-get-subkey-fingerprint" role="2.4.0"><primary sortas="gnutls_openpgp_crt_get_subkey_fingerprint">gnutls_openpgp_crt_get_subkey_fingerprint</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_openpgp_crt_get_subkey_fingerprint
                                                        (<link linkend="gnutls-openpgp-crt-t">gnutls_openpgp_crt_t</link> key,
                                                         unsigned <link linkend="int">int</link> idx,
                                                         <link linkend="void">void</link> *fpr,
                                                         <link linkend="size-t">size_t</link> *fprlen);</programlisting>
<para>
Get key fingerprint of a subkey.  Depending on the algorithm, the
fingerprint can be 16 or 20 bytes.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>key</parameter>&#160;:</term>
<listitem><simpara> the raw data that contains the OpenPGP public key.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>idx</parameter>&#160;:</term>
<listitem><simpara> the subkey index
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>fpr</parameter>&#160;:</term>
<listitem><simpara> the buffer to save the fingerprint, must hold at least 20 bytes.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>fprlen</parameter>&#160;:</term>
<listitem><simpara> the integer to save the length of the fingerprint.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> On success, 0 is returned.  Otherwise, an error code.

</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 2.4.0</para></refsect2>
<refsect2 id="gnutls-openpgp-crt-get-name" role="function">
<title>gnutls_openpgp_crt_get_name ()</title>
<indexterm zone="gnutls-openpgp-crt-get-name"><primary sortas="gnutls_openpgp_crt_get_name">gnutls_openpgp_crt_get_name</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_openpgp_crt_get_name         (<link linkend="gnutls-openpgp-crt-t">gnutls_openpgp_crt_t</link> key,
                                                         <link linkend="int">int</link> idx,
                                                         <link linkend="char">char</link> *buf,
                                                         <link linkend="size-t">size_t</link> *sizeof_buf);</programlisting>
<para>
Extracts the userID from the parsed OpenPGP key.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>key</parameter>&#160;:</term>
<listitem><simpara> the structure that contains the OpenPGP public key.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>idx</parameter>&#160;:</term>
<listitem><simpara> the index of the ID to extract
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>buf</parameter>&#160;:</term>
<listitem><simpara> a pointer to a structure to hold the name
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>sizeof_buf</parameter>&#160;:</term>
<listitem><simpara> holds the maximum size of <parameter>buf</parameter>, on return hold the
  actual/required size of <parameter>buf</parameter>.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> <link linkend="GNUTLS-E-SUCCESS--CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> on success, and if the index of the ID
  does not exist <link linkend="GNUTLS-E-REQUESTED-DATA-NOT-AVAILABLE--CAPS"><literal>GNUTLS_E_REQUESTED_DATA_NOT_AVAILABLE</literal></link>, or an
  error code.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-openpgp-crt-get-pk-algorithm" role="function">
<title>gnutls_openpgp_crt_get_pk_algorithm ()</title>
<indexterm zone="gnutls-openpgp-crt-get-pk-algorithm"><primary sortas="gnutls_openpgp_crt_get_pk_algorithm">gnutls_openpgp_crt_get_pk_algorithm</primary></indexterm><programlisting><link linkend="gnutls-pk-algorithm-t">gnutls_pk_algorithm_t</link>  gnutls_openpgp_crt_get_pk_algorithm
                                                        (<link linkend="gnutls-openpgp-crt-t">gnutls_openpgp_crt_t</link> key,
                                                         unsigned <link linkend="int">int</link> *bits);</programlisting>
<para>
This function will return the public key algorithm of an OpenPGP
certificate.
</para>
<para>
If bits is non null, it should have enough size to hold the parameters
size in bits. For RSA the bits returned is the modulus.
For DSA the bits returned are of the public exponent.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>key</parameter>&#160;:</term>
<listitem><simpara> is an OpenPGP key
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>bits</parameter>&#160;:</term>
<listitem><simpara> if bits is non null it will hold the size of the parameters' in bits
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a member of the <link linkend="gnutls-pk-algorithm-t"><type>gnutls_pk_algorithm_t</type></link> enumeration on
  success, or a negative value on error.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-openpgp-crt-get-version" role="function">
<title>gnutls_openpgp_crt_get_version ()</title>
<indexterm zone="gnutls-openpgp-crt-get-version"><primary sortas="gnutls_openpgp_crt_get_version">gnutls_openpgp_crt_get_version</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_openpgp_crt_get_version      (<link linkend="gnutls-openpgp-crt-t">gnutls_openpgp_crt_t</link> key);</programlisting>
<para>
Extract the version of the OpenPGP key.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>key</parameter>&#160;:</term>
<listitem><simpara> the structure that contains the OpenPGP public key.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> the version number is returned, or a negative value on errors.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-openpgp-crt-get-creation-time" role="function">
<title>gnutls_openpgp_crt_get_creation_time ()</title>
<indexterm zone="gnutls-openpgp-crt-get-creation-time"><primary sortas="gnutls_openpgp_crt_get_creation_time">gnutls_openpgp_crt_get_creation_time</primary></indexterm><programlisting><link linkend="time-t">time_t</link>              gnutls_openpgp_crt_get_creation_time
                                                        (<link linkend="gnutls-openpgp-crt-t">gnutls_openpgp_crt_t</link> key);</programlisting>
<para>
Get key creation time.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>key</parameter>&#160;:</term>
<listitem><simpara> the structure that contains the OpenPGP public key.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> the timestamp when the OpenPGP key was created.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-openpgp-crt-get-expiration-time" role="function">
<title>gnutls_openpgp_crt_get_expiration_time ()</title>
<indexterm zone="gnutls-openpgp-crt-get-expiration-time"><primary sortas="gnutls_openpgp_crt_get_expiration_time">gnutls_openpgp_crt_get_expiration_time</primary></indexterm><programlisting><link linkend="time-t">time_t</link>              gnutls_openpgp_crt_get_expiration_time
                                                        (<link linkend="gnutls-openpgp-crt-t">gnutls_openpgp_crt_t</link> key);</programlisting>
<para>
Get key expiration time.  A value of '0' means that the key doesn't
expire at all.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>key</parameter>&#160;:</term>
<listitem><simpara> the structure that contains the OpenPGP public key.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> the time when the OpenPGP key expires.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-openpgp-crt-get-key-id" role="function" condition="since:2.4.0">
<title>gnutls_openpgp_crt_get_key_id ()</title>
<indexterm zone="gnutls-openpgp-crt-get-key-id" role="2.4.0"><primary sortas="gnutls_openpgp_crt_get_key_id">gnutls_openpgp_crt_get_key_id</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_openpgp_crt_get_key_id       (<link linkend="gnutls-openpgp-crt-t">gnutls_openpgp_crt_t</link> key,
                                                         <link linkend="gnutls-openpgp-keyid-t">gnutls_openpgp_keyid_t</link> keyid);</programlisting>
<para>
Get key id string.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>key</parameter>&#160;:</term>
<listitem><simpara> the structure that contains the OpenPGP public key.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>keyid</parameter>&#160;:</term>
<listitem><simpara> the buffer to save the keyid.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> the 64-bit keyID of the OpenPGP key.

</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 2.4.0</para></refsect2>
<refsect2 id="gnutls-openpgp-crt-check-hostname" role="function">
<title>gnutls_openpgp_crt_check_hostname ()</title>
<indexterm zone="gnutls-openpgp-crt-check-hostname"><primary sortas="gnutls_openpgp_crt_check_hostname">gnutls_openpgp_crt_check_hostname</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_openpgp_crt_check_hostname   (<link linkend="gnutls-openpgp-crt-t">gnutls_openpgp_crt_t</link> key,
                                                         const <link linkend="char">char</link> *hostname);</programlisting>
<para>
This function will check if the given key's owner matches the
given hostname. This is a basic implementation of the matching
described in RFC2818 (HTTPS), which takes into account wildcards.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>key</parameter>&#160;:</term>
<listitem><simpara> should contain a <link linkend="gnutls-openpgp-crt-t"><type>gnutls_openpgp_crt_t</type></link> structure
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>hostname</parameter>&#160;:</term>
<listitem><simpara> A null terminated string that contains a DNS name
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> <link linkend="GNUTLS-E-SUCCESS--CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> on success, or an error code.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-openpgp-crt-get-revoked-status" role="function" condition="since:2.4.0">
<title>gnutls_openpgp_crt_get_revoked_status ()</title>
<indexterm zone="gnutls-openpgp-crt-get-revoked-status" role="2.4.0"><primary sortas="gnutls_openpgp_crt_get_revoked_status">gnutls_openpgp_crt_get_revoked_status</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_openpgp_crt_get_revoked_status
                                                        (<link linkend="gnutls-openpgp-crt-t">gnutls_openpgp_crt_t</link> key);</programlisting>
<para>
Get revocation status of key.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>key</parameter>&#160;:</term>
<listitem><simpara> the structure that contains the OpenPGP public key.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> true (1) if the key has been revoked, or false (0) if it
  has not.

</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 2.4.0</para></refsect2>
<refsect2 id="gnutls-openpgp-crt-get-subkey-count" role="function" condition="since:2.4.0">
<title>gnutls_openpgp_crt_get_subkey_count ()</title>
<indexterm zone="gnutls-openpgp-crt-get-subkey-count" role="2.4.0"><primary sortas="gnutls_openpgp_crt_get_subkey_count">gnutls_openpgp_crt_get_subkey_count</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_openpgp_crt_get_subkey_count (<link linkend="gnutls-openpgp-crt-t">gnutls_openpgp_crt_t</link> key);</programlisting>
<para>
This function will return the number of subkeys present in the
given OpenPGP certificate.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>key</parameter>&#160;:</term>
<listitem><simpara> is an OpenPGP key
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> the number of subkeys, or a negative value on error.

</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 2.4.0</para></refsect2>
<refsect2 id="gnutls-openpgp-crt-get-subkey-idx" role="function" condition="since:2.4.0">
<title>gnutls_openpgp_crt_get_subkey_idx ()</title>
<indexterm zone="gnutls-openpgp-crt-get-subkey-idx" role="2.4.0"><primary sortas="gnutls_openpgp_crt_get_subkey_idx">gnutls_openpgp_crt_get_subkey_idx</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_openpgp_crt_get_subkey_idx   (<link linkend="gnutls-openpgp-crt-t">gnutls_openpgp_crt_t</link> key,
                                                         const <link linkend="gnutls-openpgp-keyid-t">gnutls_openpgp_keyid_t</link> keyid);</programlisting>
<para>
Get subkey's index.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>key</parameter>&#160;:</term>
<listitem><simpara> the structure that contains the OpenPGP public key.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>keyid</parameter>&#160;:</term>
<listitem><simpara> the keyid.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> the index of the subkey or a negative error value.

</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 2.4.0</para></refsect2>
<refsect2 id="gnutls-openpgp-crt-get-subkey-revoked-status" role="function" condition="since:2.4.0">
<title>gnutls_openpgp_crt_get_subkey_revoked_status ()</title>
<indexterm zone="gnutls-openpgp-crt-get-subkey-revoked-status" role="2.4.0"><primary sortas="gnutls_openpgp_crt_get_subkey_revoked_status">gnutls_openpgp_crt_get_subkey_revoked_status</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_openpgp_crt_get_subkey_revoked_status
                                                        (<link linkend="gnutls-openpgp-crt-t">gnutls_openpgp_crt_t</link> key,
                                                         unsigned <link linkend="int">int</link> idx);</programlisting>
<para>
Get subkey revocation status.  A negative value indicates an error.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>key</parameter>&#160;:</term>
<listitem><simpara> the structure that contains the OpenPGP public key.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>idx</parameter>&#160;:</term>
<listitem><simpara> is the subkey index
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> true (1) if the key has been revoked, or false (0) if it
  has not.

</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 2.4.0</para></refsect2>
<refsect2 id="gnutls-openpgp-crt-get-subkey-pk-algorithm" role="function" condition="since:2.4.0">
<title>gnutls_openpgp_crt_get_subkey_pk_algorithm ()</title>
<indexterm zone="gnutls-openpgp-crt-get-subkey-pk-algorithm" role="2.4.0"><primary sortas="gnutls_openpgp_crt_get_subkey_pk_algorithm">gnutls_openpgp_crt_get_subkey_pk_algorithm</primary></indexterm><programlisting><link linkend="gnutls-pk-algorithm-t">gnutls_pk_algorithm_t</link>  gnutls_openpgp_crt_get_subkey_pk_algorithm
                                                        (<link linkend="gnutls-openpgp-crt-t">gnutls_openpgp_crt_t</link> key,
                                                         unsigned <link linkend="int">int</link> idx,
                                                         unsigned <link linkend="int">int</link> *bits);</programlisting>
<para>
This function will return the public key algorithm of a subkey of an OpenPGP
certificate.
</para>
<para>
If bits is non null, it should have enough size to hold the
parameters size in bits.  For RSA the bits returned is the modulus.
For DSA the bits returned are of the public exponent.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>key</parameter>&#160;:</term>
<listitem><simpara> is an OpenPGP key
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>idx</parameter>&#160;:</term>
<listitem><simpara> is the subkey index
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>bits</parameter>&#160;:</term>
<listitem><simpara> if bits is non null it will hold the size of the parameters' in bits
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a member of the <link linkend="gnutls-pk-algorithm-t"><type>gnutls_pk_algorithm_t</type></link> enumeration on
  success, or a negative value on error.

</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 2.4.0</para></refsect2>
<refsect2 id="gnutls-openpgp-crt-get-subkey-creation-time" role="function" condition="since:2.4.0">
<title>gnutls_openpgp_crt_get_subkey_creation_time ()</title>
<indexterm zone="gnutls-openpgp-crt-get-subkey-creation-time" role="2.4.0"><primary sortas="gnutls_openpgp_crt_get_subkey_creation_time">gnutls_openpgp_crt_get_subkey_creation_time</primary></indexterm><programlisting><link linkend="time-t">time_t</link>              gnutls_openpgp_crt_get_subkey_creation_time
                                                        (<link linkend="gnutls-openpgp-crt-t">gnutls_openpgp_crt_t</link> key,
                                                         unsigned <link linkend="int">int</link> idx);</programlisting>
<para>
Get subkey creation time.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>key</parameter>&#160;:</term>
<listitem><simpara> the structure that contains the OpenPGP public key.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>idx</parameter>&#160;:</term>
<listitem><simpara> the subkey index
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> the timestamp when the OpenPGP sub-key was created.

</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 2.4.0</para></refsect2>
<refsect2 id="gnutls-openpgp-crt-get-subkey-expiration-time" role="function" condition="since:2.4.0">
<title>gnutls_openpgp_crt_get_subkey_expiration_time ()</title>
<indexterm zone="gnutls-openpgp-crt-get-subkey-expiration-time" role="2.4.0"><primary sortas="gnutls_openpgp_crt_get_subkey_expiration_time">gnutls_openpgp_crt_get_subkey_expiration_time</primary></indexterm><programlisting><link linkend="time-t">time_t</link>              gnutls_openpgp_crt_get_subkey_expiration_time
                                                        (<link linkend="gnutls-openpgp-crt-t">gnutls_openpgp_crt_t</link> key,
                                                         unsigned <link linkend="int">int</link> idx);</programlisting>
<para>
Get subkey expiration time.  A value of '0' means that the key
doesn't expire at all.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>key</parameter>&#160;:</term>
<listitem><simpara> the structure that contains the OpenPGP public key.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>idx</parameter>&#160;:</term>
<listitem><simpara> the subkey index
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> the time when the OpenPGP key expires.

</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 2.4.0</para></refsect2>
<refsect2 id="gnutls-openpgp-crt-get-subkey-id" role="function">
<title>gnutls_openpgp_crt_get_subkey_id ()</title>
<indexterm zone="gnutls-openpgp-crt-get-subkey-id"><primary sortas="gnutls_openpgp_crt_get_subkey_id">gnutls_openpgp_crt_get_subkey_id</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_openpgp_crt_get_subkey_id    (<link linkend="gnutls-openpgp-crt-t">gnutls_openpgp_crt_t</link> key,
                                                         unsigned <link linkend="int">int</link> idx,
                                                         <link linkend="gnutls-openpgp-keyid-t">gnutls_openpgp_keyid_t</link> keyid);</programlisting>
<para>
Get the subkey's key-id.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>key</parameter>&#160;:</term>
<listitem><simpara> the structure that contains the OpenPGP public key.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>idx</parameter>&#160;:</term>
<listitem><simpara> the subkey index
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>keyid</parameter>&#160;:</term>
<listitem><simpara> the buffer to save the keyid.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> the 64-bit keyID of the OpenPGP key.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-openpgp-crt-get-subkey-usage" role="function" condition="since:2.4.0">
<title>gnutls_openpgp_crt_get_subkey_usage ()</title>
<indexterm zone="gnutls-openpgp-crt-get-subkey-usage" role="2.4.0"><primary sortas="gnutls_openpgp_crt_get_subkey_usage">gnutls_openpgp_crt_get_subkey_usage</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_openpgp_crt_get_subkey_usage (<link linkend="gnutls-openpgp-crt-t">gnutls_openpgp_crt_t</link> key,
                                                         unsigned <link linkend="int">int</link> idx,
                                                         unsigned <link linkend="int">int</link> *key_usage);</programlisting>
<para>
This function will return certificate's key usage, by checking the
key algorithm.  The key usage value will ORed values of
<link linkend="GNUTLS-KEY-DIGITAL-SIGNATURE--CAPS"><literal>GNUTLS_KEY_DIGITAL_SIGNATURE</literal></link> or <link linkend="GNUTLS-KEY-KEY-ENCIPHERMENT--CAPS"><literal>GNUTLS_KEY_KEY_ENCIPHERMENT</literal></link>.
</para>
<para>
A negative value may be returned in case of parsing error.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>key</parameter>&#160;:</term>
<listitem><simpara> should contain a gnutls_openpgp_crt_t structure
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>idx</parameter>&#160;:</term>
<listitem><simpara> the subkey index
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>key_usage</parameter>&#160;:</term>
<listitem><simpara> where the key usage bits will be stored
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> key usage value.

</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 2.4.0</para></refsect2>
<refsect2 id="gnutls-openpgp-crt-get-subkey-pk-dsa-raw" role="function" condition="since:2.4.0">
<title>gnutls_openpgp_crt_get_subkey_pk_dsa_raw ()</title>
<indexterm zone="gnutls-openpgp-crt-get-subkey-pk-dsa-raw" role="2.4.0"><primary sortas="gnutls_openpgp_crt_get_subkey_pk_dsa_raw">gnutls_openpgp_crt_get_subkey_pk_dsa_raw</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_openpgp_crt_get_subkey_pk_dsa_raw
                                                        (<link linkend="gnutls-openpgp-crt-t">gnutls_openpgp_crt_t</link> crt,
                                                         unsigned <link linkend="int">int</link> idx,
                                                         <link linkend="gnutls-datum-t">gnutls_datum_t</link> *p,
                                                         <link linkend="gnutls-datum-t">gnutls_datum_t</link> *q,
                                                         <link linkend="gnutls-datum-t">gnutls_datum_t</link> *g,
                                                         <link linkend="gnutls-datum-t">gnutls_datum_t</link> *y);</programlisting>
<para>
This function will export the DSA public key's parameters found in
the given certificate.  The new parameters will be allocated using
<link linkend="gnutls-malloc"><function>gnutls_malloc()</function></link> and will be stored in the appropriate datum.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>crt</parameter>&#160;:</term>
<listitem><simpara> Holds the certificate
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>idx</parameter>&#160;:</term>
<listitem><simpara> Is the subkey index
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>p</parameter>&#160;:</term>
<listitem><simpara> will hold the p
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>q</parameter>&#160;:</term>
<listitem><simpara> will hold the q
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>g</parameter>&#160;:</term>
<listitem><simpara> will hold the g
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>y</parameter>&#160;:</term>
<listitem><simpara> will hold the y
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> <link linkend="GNUTLS-E-SUCCESS--CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> on success, otherwise an error.

</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 2.4.0</para></refsect2>
<refsect2 id="gnutls-openpgp-crt-get-subkey-pk-rsa-raw" role="function" condition="since:2.4.0">
<title>gnutls_openpgp_crt_get_subkey_pk_rsa_raw ()</title>
<indexterm zone="gnutls-openpgp-crt-get-subkey-pk-rsa-raw" role="2.4.0"><primary sortas="gnutls_openpgp_crt_get_subkey_pk_rsa_raw">gnutls_openpgp_crt_get_subkey_pk_rsa_raw</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_openpgp_crt_get_subkey_pk_rsa_raw
                                                        (<link linkend="gnutls-openpgp-crt-t">gnutls_openpgp_crt_t</link> crt,
                                                         unsigned <link linkend="int">int</link> idx,
                                                         <link linkend="gnutls-datum-t">gnutls_datum_t</link> *m,
                                                         <link linkend="gnutls-datum-t">gnutls_datum_t</link> *e);</programlisting>
<para>
This function will export the RSA public key's parameters found in
the given structure.  The new parameters will be allocated using
<link linkend="gnutls-malloc"><function>gnutls_malloc()</function></link> and will be stored in the appropriate datum.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>crt</parameter>&#160;:</term>
<listitem><simpara> Holds the certificate
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>idx</parameter>&#160;:</term>
<listitem><simpara> Is the subkey index
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>m</parameter>&#160;:</term>
<listitem><simpara> will hold the modulus
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>e</parameter>&#160;:</term>
<listitem><simpara> will hold the public exponent
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> <link linkend="GNUTLS-E-SUCCESS--CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> on success, otherwise an error.

</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 2.4.0</para></refsect2>
<refsect2 id="gnutls-openpgp-crt-get-pk-dsa-raw" role="function" condition="since:2.4.0">
<title>gnutls_openpgp_crt_get_pk_dsa_raw ()</title>
<indexterm zone="gnutls-openpgp-crt-get-pk-dsa-raw" role="2.4.0"><primary sortas="gnutls_openpgp_crt_get_pk_dsa_raw">gnutls_openpgp_crt_get_pk_dsa_raw</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_openpgp_crt_get_pk_dsa_raw   (<link linkend="gnutls-openpgp-crt-t">gnutls_openpgp_crt_t</link> crt,
                                                         <link linkend="gnutls-datum-t">gnutls_datum_t</link> *p,
                                                         <link linkend="gnutls-datum-t">gnutls_datum_t</link> *q,
                                                         <link linkend="gnutls-datum-t">gnutls_datum_t</link> *g,
                                                         <link linkend="gnutls-datum-t">gnutls_datum_t</link> *y);</programlisting>
<para>
This function will export the DSA public key's parameters found in
the given certificate.  The new parameters will be allocated using
<link linkend="gnutls-malloc"><function>gnutls_malloc()</function></link> and will be stored in the appropriate datum.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>crt</parameter>&#160;:</term>
<listitem><simpara> Holds the certificate
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>p</parameter>&#160;:</term>
<listitem><simpara> will hold the p
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>q</parameter>&#160;:</term>
<listitem><simpara> will hold the q
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>g</parameter>&#160;:</term>
<listitem><simpara> will hold the g
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>y</parameter>&#160;:</term>
<listitem><simpara> will hold the y
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> <link linkend="GNUTLS-E-SUCCESS--CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> on success, otherwise an error.

</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 2.4.0</para></refsect2>
<refsect2 id="gnutls-openpgp-crt-get-pk-rsa-raw" role="function" condition="since:2.4.0">
<title>gnutls_openpgp_crt_get_pk_rsa_raw ()</title>
<indexterm zone="gnutls-openpgp-crt-get-pk-rsa-raw" role="2.4.0"><primary sortas="gnutls_openpgp_crt_get_pk_rsa_raw">gnutls_openpgp_crt_get_pk_rsa_raw</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_openpgp_crt_get_pk_rsa_raw   (<link linkend="gnutls-openpgp-crt-t">gnutls_openpgp_crt_t</link> crt,
                                                         <link linkend="gnutls-datum-t">gnutls_datum_t</link> *m,
                                                         <link linkend="gnutls-datum-t">gnutls_datum_t</link> *e);</programlisting>
<para>
This function will export the RSA public key's parameters found in
the given structure.  The new parameters will be allocated using
<link linkend="gnutls-malloc"><function>gnutls_malloc()</function></link> and will be stored in the appropriate datum.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>crt</parameter>&#160;:</term>
<listitem><simpara> Holds the certificate
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>m</parameter>&#160;:</term>
<listitem><simpara> will hold the modulus
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>e</parameter>&#160;:</term>
<listitem><simpara> will hold the public exponent
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> <link linkend="GNUTLS-E-SUCCESS--CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> on success, otherwise an error.

</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 2.4.0</para></refsect2>
<refsect2 id="gnutls-openpgp-crt-get-preferred-key-id" role="function">
<title>gnutls_openpgp_crt_get_preferred_key_id ()</title>
<indexterm zone="gnutls-openpgp-crt-get-preferred-key-id"><primary sortas="gnutls_openpgp_crt_get_preferred_key_id">gnutls_openpgp_crt_get_preferred_key_id</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_openpgp_crt_get_preferred_key_id
                                                        (<link linkend="gnutls-openpgp-crt-t">gnutls_openpgp_crt_t</link> key,
                                                         <link linkend="gnutls-openpgp-keyid-t">gnutls_openpgp_keyid_t</link> keyid);</programlisting>
<para>
Get preferred key id.  If it hasn't been set it returns
<link linkend="GNUTLS-E-INVALID-REQUEST--CAPS"><literal>GNUTLS_E_INVALID_REQUEST</literal></link>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>key</parameter>&#160;:</term>
<listitem><simpara> the structure that contains the OpenPGP public key.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>keyid</parameter>&#160;:</term>
<listitem><simpara> the struct to save the keyid.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> the 64-bit preferred keyID of the OpenPGP key.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-openpgp-crt-set-preferred-key-id" role="function">
<title>gnutls_openpgp_crt_set_preferred_key_id ()</title>
<indexterm zone="gnutls-openpgp-crt-set-preferred-key-id"><primary sortas="gnutls_openpgp_crt_set_preferred_key_id">gnutls_openpgp_crt_set_preferred_key_id</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_openpgp_crt_set_preferred_key_id
                                                        (<link linkend="gnutls-openpgp-crt-t">gnutls_openpgp_crt_t</link> key,
                                                         const <link linkend="gnutls-openpgp-keyid-t">gnutls_openpgp_keyid_t</link> keyid);</programlisting>
<para>
This allows setting a preferred key id for the given certificate.
This key will be used by functions that involve key handling.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>key</parameter>&#160;:</term>
<listitem><simpara> the structure that contains the OpenPGP public key.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>keyid</parameter>&#160;:</term>
<listitem><simpara> the selected keyid
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> On success, <link linkend="GNUTLS-E-SUCCESS--CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> (zero) is returned,
  otherwise an error code is returned.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-openpgp-privkey-init" role="function">
<title>gnutls_openpgp_privkey_init ()</title>
<indexterm zone="gnutls-openpgp-privkey-init"><primary sortas="gnutls_openpgp_privkey_init">gnutls_openpgp_privkey_init</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_openpgp_privkey_init         (<link linkend="gnutls-openpgp-privkey-t">gnutls_openpgp_privkey_t</link> *key);</programlisting>
<para>
This function will initialize an OpenPGP key structure.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>key</parameter>&#160;:</term>
<listitem><simpara> The structure to be initialized
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> <link linkend="GNUTLS-E-SUCCESS--CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> on success, or an error code.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-openpgp-privkey-deinit" role="function">
<title>gnutls_openpgp_privkey_deinit ()</title>
<indexterm zone="gnutls-openpgp-privkey-deinit"><primary sortas="gnutls_openpgp_privkey_deinit">gnutls_openpgp_privkey_deinit</primary></indexterm><programlisting><link linkend="void">void</link>                gnutls_openpgp_privkey_deinit       (<link linkend="gnutls-openpgp-privkey-t">gnutls_openpgp_privkey_t</link> key);</programlisting>
<para>
This function will deinitialize a key structure.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>key</parameter>&#160;:</term>
<listitem><simpara> The structure to be initialized
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-openpgp-privkey-get-pk-algorithm" role="function" condition="since:2.4.0">
<title>gnutls_openpgp_privkey_get_pk_algorithm ()</title>
<indexterm zone="gnutls-openpgp-privkey-get-pk-algorithm" role="2.4.0"><primary sortas="gnutls_openpgp_privkey_get_pk_algorithm">gnutls_openpgp_privkey_get_pk_algorithm</primary></indexterm><programlisting><link linkend="gnutls-pk-algorithm-t">gnutls_pk_algorithm_t</link>  gnutls_openpgp_privkey_get_pk_algorithm
                                                        (<link linkend="gnutls-openpgp-privkey-t">gnutls_openpgp_privkey_t</link> key,
                                                         unsigned <link linkend="int">int</link> *bits);</programlisting>
<para>
This function will return the public key algorithm of an OpenPGP
certificate.
</para>
<para>
If bits is non null, it should have enough size to hold the parameters
size in bits. For RSA the bits returned is the modulus.
For DSA the bits returned are of the public exponent.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>key</parameter>&#160;:</term>
<listitem><simpara> is an OpenPGP key
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>bits</parameter>&#160;:</term>
<listitem><simpara> if bits is non null it will hold the size of the parameters' in bits
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a member of the <link linkend="gnutls-pk-algorithm-t"><type>gnutls_pk_algorithm_t</type></link> enumeration on
  success, or a negative value on error.

</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 2.4.0</para></refsect2>
<refsect2 id="gnutls-openpgp-privkey-import" role="function">
<title>gnutls_openpgp_privkey_import ()</title>
<indexterm zone="gnutls-openpgp-privkey-import"><primary sortas="gnutls_openpgp_privkey_import">gnutls_openpgp_privkey_import</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_openpgp_privkey_import       (<link linkend="gnutls-openpgp-privkey-t">gnutls_openpgp_privkey_t</link> key,
                                                         const <link linkend="gnutls-datum-t">gnutls_datum_t</link> *data,
                                                         <link linkend="gnutls-openpgp-crt-fmt-t">gnutls_openpgp_crt_fmt_t</link> format,
                                                         const <link linkend="char">char</link> *password,
                                                         unsigned <link linkend="int">int</link> flags);</programlisting>
<para>
This function will convert the given RAW or Base64 encoded key to
the native gnutls_openpgp_privkey_t format.  The output will be
stored in 'key'.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>key</parameter>&#160;:</term>
<listitem><simpara> The structure to store the parsed key.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>data</parameter>&#160;:</term>
<listitem><simpara> The RAW or BASE64 encoded key.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>format</parameter>&#160;:</term>
<listitem><simpara> One of <link linkend="gnutls-openpgp-crt-fmt-t"><type>gnutls_openpgp_crt_fmt_t</type></link> elements.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>password</parameter>&#160;:</term>
<listitem><simpara> not used for now
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>flags</parameter>&#160;:</term>
<listitem><simpara> should be zero
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> <link linkend="GNUTLS-E-SUCCESS--CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> on success, or an error code.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-openpgp-privkey-sign-hash" role="function">
<title>gnutls_openpgp_privkey_sign_hash ()</title>
<indexterm zone="gnutls-openpgp-privkey-sign-hash"><primary sortas="gnutls_openpgp_privkey_sign_hash">gnutls_openpgp_privkey_sign_hash</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_openpgp_privkey_sign_hash    (<link linkend="gnutls-openpgp-privkey-t">gnutls_openpgp_privkey_t</link> key,
                                                         const <link linkend="gnutls-datum-t">gnutls_datum_t</link> *hash,
                                                         <link linkend="gnutls-datum-t">gnutls_datum_t</link> *signature);</programlisting>
<para>
This function will sign the given hash using the private key.  You
should use <link linkend="gnutls-openpgp-privkey-set-subkey"><function>gnutls_openpgp_privkey_set_subkey()</function></link> before calling this
function to set the subkey to use.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>key</parameter>&#160;:</term>
<listitem><simpara> Holds the key
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>hash</parameter>&#160;:</term>
<listitem><simpara> holds the data to be signed
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>signature</parameter>&#160;:</term>
<listitem><simpara> will contain newly allocated signature
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> On success, <link linkend="GNUTLS-E-SUCCESS--CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> is returned, otherwise a
  negative error value.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-openpgp-privkey-get-fingerprint" role="function" condition="since:2.4.0">
<title>gnutls_openpgp_privkey_get_fingerprint ()</title>
<indexterm zone="gnutls-openpgp-privkey-get-fingerprint" role="2.4.0"><primary sortas="gnutls_openpgp_privkey_get_fingerprint">gnutls_openpgp_privkey_get_fingerprint</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_openpgp_privkey_get_fingerprint
                                                        (<link linkend="gnutls-openpgp-privkey-t">gnutls_openpgp_privkey_t</link> key,
                                                         <link linkend="void">void</link> *fpr,
                                                         <link linkend="size-t">size_t</link> *fprlen);</programlisting>
<para>
Get the fingerprint of the OpenPGP key. Depends on the
algorithm, the fingerprint can be 16 or 20 bytes.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>key</parameter>&#160;:</term>
<listitem><simpara> the raw data that contains the OpenPGP secret key.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>fpr</parameter>&#160;:</term>
<listitem><simpara> the buffer to save the fingerprint, must hold at least 20 bytes.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>fprlen</parameter>&#160;:</term>
<listitem><simpara> the integer to save the length of the fingerprint.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> On success, 0 is returned, or an error code.

</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 2.4.0</para></refsect2>
<refsect2 id="gnutls-openpgp-privkey-get-subkey-fingerprint" role="function" condition="since:2.4.0">
<title>gnutls_openpgp_privkey_get_subkey_fingerprint ()</title>
<indexterm zone="gnutls-openpgp-privkey-get-subkey-fingerprint" role="2.4.0"><primary sortas="gnutls_openpgp_privkey_get_subkey_fingerprint">gnutls_openpgp_privkey_get_subkey_fingerprint</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_openpgp_privkey_get_subkey_fingerprint
                                                        (<link linkend="gnutls-openpgp-privkey-t">gnutls_openpgp_privkey_t</link> key,
                                                         unsigned <link linkend="int">int</link> idx,
                                                         <link linkend="void">void</link> *fpr,
                                                         <link linkend="size-t">size_t</link> *fprlen);</programlisting>
<para>
Get the fingerprint of an OpenPGP subkey.  Depends on the
algorithm, the fingerprint can be 16 or 20 bytes.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>key</parameter>&#160;:</term>
<listitem><simpara> the raw data that contains the OpenPGP secret key.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>idx</parameter>&#160;:</term>
<listitem><simpara> the subkey index
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>fpr</parameter>&#160;:</term>
<listitem><simpara> the buffer to save the fingerprint, must hold at least 20 bytes.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>fprlen</parameter>&#160;:</term>
<listitem><simpara> the integer to save the length of the fingerprint.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> On success, 0 is returned, or an error code.

</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 2.4.0</para></refsect2>
<refsect2 id="gnutls-openpgp-privkey-get-key-id" role="function" condition="since:2.4.0">
<title>gnutls_openpgp_privkey_get_key_id ()</title>
<indexterm zone="gnutls-openpgp-privkey-get-key-id" role="2.4.0"><primary sortas="gnutls_openpgp_privkey_get_key_id">gnutls_openpgp_privkey_get_key_id</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_openpgp_privkey_get_key_id   (<link linkend="gnutls-openpgp-privkey-t">gnutls_openpgp_privkey_t</link> key,
                                                         <link linkend="gnutls-openpgp-keyid-t">gnutls_openpgp_keyid_t</link> keyid);</programlisting>
<para>
Get key-id.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>key</parameter>&#160;:</term>
<listitem><simpara> the structure that contains the OpenPGP secret key.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>keyid</parameter>&#160;:</term>
<listitem><simpara> the buffer to save the keyid.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> the 64-bit keyID of the OpenPGP key.

</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 2.4.0</para></refsect2>
<refsect2 id="gnutls-openpgp-privkey-get-subkey-count" role="function" condition="since:2.4.0">
<title>gnutls_openpgp_privkey_get_subkey_count ()</title>
<indexterm zone="gnutls-openpgp-privkey-get-subkey-count" role="2.4.0"><primary sortas="gnutls_openpgp_privkey_get_subkey_count">gnutls_openpgp_privkey_get_subkey_count</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_openpgp_privkey_get_subkey_count
                                                        (<link linkend="gnutls-openpgp-privkey-t">gnutls_openpgp_privkey_t</link> key);</programlisting>
<para>
This function will return the number of subkeys present in the
given OpenPGP certificate.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>key</parameter>&#160;:</term>
<listitem><simpara> is an OpenPGP key
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> the number of subkeys, or a negative value on error.

</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 2.4.0</para></refsect2>
<refsect2 id="gnutls-openpgp-privkey-get-subkey-idx" role="function" condition="since:2.4.0">
<title>gnutls_openpgp_privkey_get_subkey_idx ()</title>
<indexterm zone="gnutls-openpgp-privkey-get-subkey-idx" role="2.4.0"><primary sortas="gnutls_openpgp_privkey_get_subkey_idx">gnutls_openpgp_privkey_get_subkey_idx</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_openpgp_privkey_get_subkey_idx
                                                        (<link linkend="gnutls-openpgp-privkey-t">gnutls_openpgp_privkey_t</link> key,
                                                         const <link linkend="gnutls-openpgp-keyid-t">gnutls_openpgp_keyid_t</link> keyid);</programlisting>
<para>
Get index of subkey.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>key</parameter>&#160;:</term>
<listitem><simpara> the structure that contains the OpenPGP private key.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>keyid</parameter>&#160;:</term>
<listitem><simpara> the keyid.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> the index of the subkey or a negative error value.

</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 2.4.0</para></refsect2>
<refsect2 id="gnutls-openpgp-privkey-get-subkey-revoked-status" role="function">
<title>gnutls_openpgp_privkey_get_subkey_revoked_status ()</title>
<indexterm zone="gnutls-openpgp-privkey-get-subkey-revoked-status"><primary sortas="gnutls_openpgp_privkey_get_subkey_revoked_status">gnutls_openpgp_privkey_get_subkey_revoked_status</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_openpgp_privkey_get_subkey_revoked_status
                                                        (<link linkend="gnutls-openpgp-privkey-t">gnutls_openpgp_privkey_t</link> key,
                                                         unsigned <link linkend="int">int</link> idx);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>key</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>idx</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-openpgp-privkey-get-revoked-status" role="function">
<title>gnutls_openpgp_privkey_get_revoked_status ()</title>
<indexterm zone="gnutls-openpgp-privkey-get-revoked-status"><primary sortas="gnutls_openpgp_privkey_get_revoked_status">gnutls_openpgp_privkey_get_revoked_status</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_openpgp_privkey_get_revoked_status
                                                        (<link linkend="gnutls-openpgp-privkey-t">gnutls_openpgp_privkey_t</link> key);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>key</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-openpgp-privkey-get-subkey-pk-algorithm" role="function" condition="since:2.4.0">
<title>gnutls_openpgp_privkey_get_subkey_pk_algorithm ()</title>
<indexterm zone="gnutls-openpgp-privkey-get-subkey-pk-algorithm" role="2.4.0"><primary sortas="gnutls_openpgp_privkey_get_subkey_pk_algorithm">gnutls_openpgp_privkey_get_subkey_pk_algorithm</primary></indexterm><programlisting><link linkend="gnutls-pk-algorithm-t">gnutls_pk_algorithm_t</link>  gnutls_openpgp_privkey_get_subkey_pk_algorithm
                                                        (<link linkend="gnutls-openpgp-privkey-t">gnutls_openpgp_privkey_t</link> key,
                                                         unsigned <link linkend="int">int</link> idx,
                                                         unsigned <link linkend="int">int</link> *bits);</programlisting>
<para>
This function will return the public key algorithm of a subkey of an OpenPGP
certificate.
</para>
<para>
If bits is non null, it should have enough size to hold the parameters
size in bits. For RSA the bits returned is the modulus.
For DSA the bits returned are of the public exponent.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>key</parameter>&#160;:</term>
<listitem><simpara> is an OpenPGP key
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>idx</parameter>&#160;:</term>
<listitem><simpara> is the subkey index
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>bits</parameter>&#160;:</term>
<listitem><simpara> if bits is non null it will hold the size of the parameters' in bits
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a member of the <link linkend="gnutls-pk-algorithm-t"><type>gnutls_pk_algorithm_t</type></link> enumeration on
  success, or a negative value on error.

</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 2.4.0</para></refsect2>
<refsect2 id="gnutls-openpgp-privkey-get-subkey-expiration-time" role="function" condition="since:2.4.0">
<title>gnutls_openpgp_privkey_get_subkey_expiration_time ()</title>
<indexterm zone="gnutls-openpgp-privkey-get-subkey-expiration-time" role="2.4.0"><primary sortas="gnutls_openpgp_privkey_get_subkey_expiration_time">gnutls_openpgp_privkey_get_subkey_expiration_time</primary></indexterm><programlisting><link linkend="time-t">time_t</link>              gnutls_openpgp_privkey_get_subkey_expiration_time
                                                        (<link linkend="gnutls-openpgp-privkey-t">gnutls_openpgp_privkey_t</link> key,
                                                         unsigned <link linkend="int">int</link> idx);</programlisting>
<para>
Get subkey expiration time.  A value of '0' means that the key
doesn't expire at all.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>key</parameter>&#160;:</term>
<listitem><simpara> the structure that contains the OpenPGP private key.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>idx</parameter>&#160;:</term>
<listitem><simpara> the subkey index
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> the time when the OpenPGP key expires.

</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 2.4.0</para></refsect2>
<refsect2 id="gnutls-openpgp-privkey-get-subkey-id" role="function" condition="since:2.4.0">
<title>gnutls_openpgp_privkey_get_subkey_id ()</title>
<indexterm zone="gnutls-openpgp-privkey-get-subkey-id" role="2.4.0"><primary sortas="gnutls_openpgp_privkey_get_subkey_id">gnutls_openpgp_privkey_get_subkey_id</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_openpgp_privkey_get_subkey_id
                                                        (<link linkend="gnutls-openpgp-privkey-t">gnutls_openpgp_privkey_t</link> key,
                                                         unsigned <link linkend="int">int</link> idx,
                                                         <link linkend="gnutls-openpgp-keyid-t">gnutls_openpgp_keyid_t</link> keyid);</programlisting>
<para>
Get the key-id for the subkey.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>key</parameter>&#160;:</term>
<listitem><simpara> the structure that contains the OpenPGP secret key.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>idx</parameter>&#160;:</term>
<listitem><simpara> the subkey index
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>keyid</parameter>&#160;:</term>
<listitem><simpara> the buffer to save the keyid.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> the 64-bit keyID of the OpenPGP key.

</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 2.4.0</para></refsect2>
<refsect2 id="gnutls-openpgp-privkey-get-subkey-creation-time" role="function" condition="since:2.4.0">
<title>gnutls_openpgp_privkey_get_subkey_creation_time ()</title>
<indexterm zone="gnutls-openpgp-privkey-get-subkey-creation-time" role="2.4.0"><primary sortas="gnutls_openpgp_privkey_get_subkey_creation_time">gnutls_openpgp_privkey_get_subkey_creation_time</primary></indexterm><programlisting><link linkend="time-t">time_t</link>              gnutls_openpgp_privkey_get_subkey_creation_time
                                                        (<link linkend="gnutls-openpgp-privkey-t">gnutls_openpgp_privkey_t</link> key,
                                                         unsigned <link linkend="int">int</link> idx);</programlisting>
<para>
Get subkey creation time.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>key</parameter>&#160;:</term>
<listitem><simpara> the structure that contains the OpenPGP private key.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>idx</parameter>&#160;:</term>
<listitem><simpara> the subkey index
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> the timestamp when the OpenPGP key was created.

</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 2.4.0</para></refsect2>
<refsect2 id="gnutls-openpgp-privkey-export-subkey-dsa-raw" role="function" condition="since:2.4.0">
<title>gnutls_openpgp_privkey_export_subkey_dsa_raw ()</title>
<indexterm zone="gnutls-openpgp-privkey-export-subkey-dsa-raw" role="2.4.0"><primary sortas="gnutls_openpgp_privkey_export_subkey_dsa_raw">gnutls_openpgp_privkey_export_subkey_dsa_raw</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_openpgp_privkey_export_subkey_dsa_raw
                                                        (<link linkend="gnutls-openpgp-privkey-t">gnutls_openpgp_privkey_t</link> pkey,
                                                         unsigned <link linkend="int">int</link> idx,
                                                         <link linkend="gnutls-datum-t">gnutls_datum_t</link> *p,
                                                         <link linkend="gnutls-datum-t">gnutls_datum_t</link> *q,
                                                         <link linkend="gnutls-datum-t">gnutls_datum_t</link> *g,
                                                         <link linkend="gnutls-datum-t">gnutls_datum_t</link> *y,
                                                         <link linkend="gnutls-datum-t">gnutls_datum_t</link> *x);</programlisting>
<para>
This function will export the DSA private key's parameters found
in the given certificate.  The new parameters will be allocated
using <link linkend="gnutls-malloc"><function>gnutls_malloc()</function></link> and will be stored in the appropriate datum.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>pkey</parameter>&#160;:</term>
<listitem><simpara> Holds the certificate
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>idx</parameter>&#160;:</term>
<listitem><simpara> Is the subkey index
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>p</parameter>&#160;:</term>
<listitem><simpara> will hold the p
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>q</parameter>&#160;:</term>
<listitem><simpara> will hold the q
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>g</parameter>&#160;:</term>
<listitem><simpara> will hold the g
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>y</parameter>&#160;:</term>
<listitem><simpara> will hold the y
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>x</parameter>&#160;:</term>
<listitem><simpara> will hold the x
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> <link linkend="GNUTLS-E-SUCCESS--CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> on success, otherwise an error.

</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 2.4.0</para></refsect2>
<refsect2 id="gnutls-openpgp-privkey-export-subkey-rsa-raw" role="function" condition="since:2.4.0">
<title>gnutls_openpgp_privkey_export_subkey_rsa_raw ()</title>
<indexterm zone="gnutls-openpgp-privkey-export-subkey-rsa-raw" role="2.4.0"><primary sortas="gnutls_openpgp_privkey_export_subkey_rsa_raw">gnutls_openpgp_privkey_export_subkey_rsa_raw</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_openpgp_privkey_export_subkey_rsa_raw
                                                        (<link linkend="gnutls-openpgp-privkey-t">gnutls_openpgp_privkey_t</link> pkey,
                                                         unsigned <link linkend="int">int</link> idx,
                                                         <link linkend="gnutls-datum-t">gnutls_datum_t</link> *m,
                                                         <link linkend="gnutls-datum-t">gnutls_datum_t</link> *e,
                                                         <link linkend="gnutls-datum-t">gnutls_datum_t</link> *d,
                                                         <link linkend="gnutls-datum-t">gnutls_datum_t</link> *p,
                                                         <link linkend="gnutls-datum-t">gnutls_datum_t</link> *q,
                                                         <link linkend="gnutls-datum-t">gnutls_datum_t</link> *u);</programlisting>
<para>
This function will export the RSA private key's parameters found in
the given structure.  The new parameters will be allocated using
<link linkend="gnutls-malloc"><function>gnutls_malloc()</function></link> and will be stored in the appropriate datum.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>pkey</parameter>&#160;:</term>
<listitem><simpara> Holds the certificate
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>idx</parameter>&#160;:</term>
<listitem><simpara> Is the subkey index
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>m</parameter>&#160;:</term>
<listitem><simpara> will hold the modulus
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>e</parameter>&#160;:</term>
<listitem><simpara> will hold the public exponent
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>d</parameter>&#160;:</term>
<listitem><simpara> will hold the private exponent
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>p</parameter>&#160;:</term>
<listitem><simpara> will hold the first prime (p)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>q</parameter>&#160;:</term>
<listitem><simpara> will hold the second prime (q)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>u</parameter>&#160;:</term>
<listitem><simpara> will hold the coefficient
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> <link linkend="GNUTLS-E-SUCCESS--CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> on success, otherwise an error.

</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 2.4.0</para></refsect2>
<refsect2 id="gnutls-openpgp-privkey-export-dsa-raw" role="function" condition="since:2.4.0">
<title>gnutls_openpgp_privkey_export_dsa_raw ()</title>
<indexterm zone="gnutls-openpgp-privkey-export-dsa-raw" role="2.4.0"><primary sortas="gnutls_openpgp_privkey_export_dsa_raw">gnutls_openpgp_privkey_export_dsa_raw</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_openpgp_privkey_export_dsa_raw
                                                        (<link linkend="gnutls-openpgp-privkey-t">gnutls_openpgp_privkey_t</link> pkey,
                                                         <link linkend="gnutls-datum-t">gnutls_datum_t</link> *p,
                                                         <link linkend="gnutls-datum-t">gnutls_datum_t</link> *q,
                                                         <link linkend="gnutls-datum-t">gnutls_datum_t</link> *g,
                                                         <link linkend="gnutls-datum-t">gnutls_datum_t</link> *y,
                                                         <link linkend="gnutls-datum-t">gnutls_datum_t</link> *x);</programlisting>
<para>
This function will export the DSA private key's parameters found in
the given certificate.  The new parameters will be allocated using
<link linkend="gnutls-malloc"><function>gnutls_malloc()</function></link> and will be stored in the appropriate datum.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>pkey</parameter>&#160;:</term>
<listitem><simpara> Holds the certificate
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>p</parameter>&#160;:</term>
<listitem><simpara> will hold the p
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>q</parameter>&#160;:</term>
<listitem><simpara> will hold the q
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>g</parameter>&#160;:</term>
<listitem><simpara> will hold the g
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>y</parameter>&#160;:</term>
<listitem><simpara> will hold the y
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>x</parameter>&#160;:</term>
<listitem><simpara> will hold the x
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> <link linkend="GNUTLS-E-SUCCESS--CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> on success, otherwise an error.

</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 2.4.0</para></refsect2>
<refsect2 id="gnutls-openpgp-privkey-export-rsa-raw" role="function" condition="since:2.4.0">
<title>gnutls_openpgp_privkey_export_rsa_raw ()</title>
<indexterm zone="gnutls-openpgp-privkey-export-rsa-raw" role="2.4.0"><primary sortas="gnutls_openpgp_privkey_export_rsa_raw">gnutls_openpgp_privkey_export_rsa_raw</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_openpgp_privkey_export_rsa_raw
                                                        (<link linkend="gnutls-openpgp-privkey-t">gnutls_openpgp_privkey_t</link> pkey,
                                                         <link linkend="gnutls-datum-t">gnutls_datum_t</link> *m,
                                                         <link linkend="gnutls-datum-t">gnutls_datum_t</link> *e,
                                                         <link linkend="gnutls-datum-t">gnutls_datum_t</link> *d,
                                                         <link linkend="gnutls-datum-t">gnutls_datum_t</link> *p,
                                                         <link linkend="gnutls-datum-t">gnutls_datum_t</link> *q,
                                                         <link linkend="gnutls-datum-t">gnutls_datum_t</link> *u);</programlisting>
<para>
This function will export the RSA private key's parameters found in
the given structure.  The new parameters will be allocated using
<link linkend="gnutls-malloc"><function>gnutls_malloc()</function></link> and will be stored in the appropriate datum.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>pkey</parameter>&#160;:</term>
<listitem><simpara> Holds the certificate
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>m</parameter>&#160;:</term>
<listitem><simpara> will hold the modulus
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>e</parameter>&#160;:</term>
<listitem><simpara> will hold the public exponent
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>d</parameter>&#160;:</term>
<listitem><simpara> will hold the private exponent
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>p</parameter>&#160;:</term>
<listitem><simpara> will hold the first prime (p)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>q</parameter>&#160;:</term>
<listitem><simpara> will hold the second prime (q)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>u</parameter>&#160;:</term>
<listitem><simpara> will hold the coefficient
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> <link linkend="GNUTLS-E-SUCCESS--CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> on success, otherwise an error.

</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 2.4.0</para></refsect2>
<refsect2 id="gnutls-openpgp-privkey-export" role="function" condition="since:2.4.0">
<title>gnutls_openpgp_privkey_export ()</title>
<indexterm zone="gnutls-openpgp-privkey-export" role="2.4.0"><primary sortas="gnutls_openpgp_privkey_export">gnutls_openpgp_privkey_export</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_openpgp_privkey_export       (<link linkend="gnutls-openpgp-privkey-t">gnutls_openpgp_privkey_t</link> key,
                                                         <link linkend="gnutls-openpgp-crt-fmt-t">gnutls_openpgp_crt_fmt_t</link> format,
                                                         const <link linkend="char">char</link> *password,
                                                         unsigned <link linkend="int">int</link> flags,
                                                         <link linkend="void">void</link> *output_data,
                                                         <link linkend="size-t">size_t</link> *output_data_size);</programlisting>
<para>
This function will convert the given key to RAW or Base64 format.
If the buffer provided is not long enough to hold the output, then
GNUTLS_E_SHORT_MEMORY_BUFFER will be returned.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>key</parameter>&#160;:</term>
<listitem><simpara> Holds the key.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>format</parameter>&#160;:</term>
<listitem><simpara> One of gnutls_openpgp_crt_fmt_t elements.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>password</parameter>&#160;:</term>
<listitem><simpara> the password that will be used to encrypt the key. (unused for now)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>flags</parameter>&#160;:</term>
<listitem><simpara> zero for future compatibility
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>output_data</parameter>&#160;:</term>
<listitem><simpara> will contain the key base64 encoded or raw
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>output_data_size</parameter>&#160;:</term>
<listitem><simpara> holds the size of output_data (and will be
  replaced by the actual size of parameters)
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> <link linkend="GNUTLS-E-SUCCESS--CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> on success, or an error code.

</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 2.4.0</para></refsect2>
<refsect2 id="gnutls-openpgp-privkey-set-preferred-key-id" role="function">
<title>gnutls_openpgp_privkey_set_preferred_key_id ()</title>
<indexterm zone="gnutls-openpgp-privkey-set-preferred-key-id"><primary sortas="gnutls_openpgp_privkey_set_preferred_key_id">gnutls_openpgp_privkey_set_preferred_key_id</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_openpgp_privkey_set_preferred_key_id
                                                        (<link linkend="gnutls-openpgp-privkey-t">gnutls_openpgp_privkey_t</link> key,
                                                         const <link linkend="gnutls-openpgp-keyid-t">gnutls_openpgp_keyid_t</link> keyid);</programlisting>
<para>
This allows setting a preferred key id for the given certificate.
This key will be used by functions that involve key handling.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>key</parameter>&#160;:</term>
<listitem><simpara> the structure that contains the OpenPGP public key.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>keyid</parameter>&#160;:</term>
<listitem><simpara> the selected keyid
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> On success, 0 is returned, or an error code.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-openpgp-privkey-get-preferred-key-id" role="function">
<title>gnutls_openpgp_privkey_get_preferred_key_id ()</title>
<indexterm zone="gnutls-openpgp-privkey-get-preferred-key-id"><primary sortas="gnutls_openpgp_privkey_get_preferred_key_id">gnutls_openpgp_privkey_get_preferred_key_id</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_openpgp_privkey_get_preferred_key_id
                                                        (<link linkend="gnutls-openpgp-privkey-t">gnutls_openpgp_privkey_t</link> key,
                                                         <link linkend="gnutls-openpgp-keyid-t">gnutls_openpgp_keyid_t</link> keyid);</programlisting>
<para>
Get the preferred key-id for the key.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>key</parameter>&#160;:</term>
<listitem><simpara> the structure that contains the OpenPGP public key.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>keyid</parameter>&#160;:</term>
<listitem><simpara> the struct to save the keyid.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> the 64-bit preferred keyID of the OpenPGP key, or if it
  hasn't been set it returns <link linkend="GNUTLS-E-INVALID-REQUEST--CAPS"><literal>GNUTLS_E_INVALID_REQUEST</literal></link>.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-openpgp-crt-get-auth-subkey" role="function">
<title>gnutls_openpgp_crt_get_auth_subkey ()</title>
<indexterm zone="gnutls-openpgp-crt-get-auth-subkey"><primary sortas="gnutls_openpgp_crt_get_auth_subkey">gnutls_openpgp_crt_get_auth_subkey</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_openpgp_crt_get_auth_subkey  (<link linkend="gnutls-openpgp-crt-t">gnutls_openpgp_crt_t</link> crt,
                                                         <link linkend="gnutls-openpgp-keyid-t">gnutls_openpgp_keyid_t</link> keyid,
                                                         unsigned <link linkend="int">int</link> flag);</programlisting>
<para>
Returns the 64-bit keyID of the first valid OpenPGP subkey marked
for authentication.  If flag is non zero and no authentication
subkey exists, then a valid subkey will be returned even if it is
not marked for authentication.
Returns the 64-bit keyID of the first valid OpenPGP subkey marked
for authentication.  If flag is non zero and no authentication
subkey exists, then a valid subkey will be returned even if it is
not marked for authentication.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>crt</parameter>&#160;:</term>
<listitem><simpara> the structure that contains the OpenPGP public key.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>keyid</parameter>&#160;:</term>
<listitem><simpara> the struct to save the keyid.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>flag</parameter>&#160;:</term>
<listitem><simpara> Non zero indicates that a valid subkey is always returned.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> <link linkend="GNUTLS-E-SUCCESS--CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> on success, or an error code.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-openpgp-keyring-init" role="function">
<title>gnutls_openpgp_keyring_init ()</title>
<indexterm zone="gnutls-openpgp-keyring-init"><primary sortas="gnutls_openpgp_keyring_init">gnutls_openpgp_keyring_init</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_openpgp_keyring_init         (<link linkend="gnutls-openpgp-keyring-t">gnutls_openpgp_keyring_t</link> *keyring);</programlisting>
<para>
This function will initialize an keyring structure.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>keyring</parameter>&#160;:</term>
<listitem><simpara> The structure to be initialized
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> <link linkend="GNUTLS-E-SUCCESS--CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> on success, or an error code.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-openpgp-keyring-deinit" role="function">
<title>gnutls_openpgp_keyring_deinit ()</title>
<indexterm zone="gnutls-openpgp-keyring-deinit"><primary sortas="gnutls_openpgp_keyring_deinit">gnutls_openpgp_keyring_deinit</primary></indexterm><programlisting><link linkend="void">void</link>                gnutls_openpgp_keyring_deinit       (<link linkend="gnutls-openpgp-keyring-t">gnutls_openpgp_keyring_t</link> keyring);</programlisting>
<para>
This function will deinitialize a keyring structure.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>keyring</parameter>&#160;:</term>
<listitem><simpara> The structure to be initialized
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-openpgp-keyring-import" role="function">
<title>gnutls_openpgp_keyring_import ()</title>
<indexterm zone="gnutls-openpgp-keyring-import"><primary sortas="gnutls_openpgp_keyring_import">gnutls_openpgp_keyring_import</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_openpgp_keyring_import       (<link linkend="gnutls-openpgp-keyring-t">gnutls_openpgp_keyring_t</link> keyring,
                                                         const <link linkend="gnutls-datum-t">gnutls_datum_t</link> *data,
                                                         <link linkend="gnutls-openpgp-crt-fmt-t">gnutls_openpgp_crt_fmt_t</link> format);</programlisting>
<para>
This function will convert the given RAW or Base64 encoded keyring
to the native <link linkend="gnutls-openpgp-keyring-t"><type>gnutls_openpgp_keyring_t</type></link> format.  The output will be
stored in 'keyring'.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>keyring</parameter>&#160;:</term>
<listitem><simpara> The structure to store the parsed key.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>data</parameter>&#160;:</term>
<listitem><simpara> The RAW or BASE64 encoded keyring.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>format</parameter>&#160;:</term>
<listitem><simpara> One of <link linkend="gnutls-openpgp-keyring-fmt"><type>gnutls_openpgp_keyring_fmt</type></link> elements.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> <link linkend="GNUTLS-E-SUCCESS--CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> on success, or an error code.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-openpgp-keyring-check-id" role="function">
<title>gnutls_openpgp_keyring_check_id ()</title>
<indexterm zone="gnutls-openpgp-keyring-check-id"><primary sortas="gnutls_openpgp_keyring_check_id">gnutls_openpgp_keyring_check_id</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_openpgp_keyring_check_id     (<link linkend="gnutls-openpgp-keyring-t">gnutls_openpgp_keyring_t</link> ring,
                                                         const <link linkend="gnutls-openpgp-keyid-t">gnutls_openpgp_keyid_t</link> keyid,
                                                         unsigned <link linkend="int">int</link> flags);</programlisting>
<para>
Check if a given key ID exists in the keyring.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ring</parameter>&#160;:</term>
<listitem><simpara> holds the keyring to check against
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>keyid</parameter>&#160;:</term>
<listitem><simpara> will hold the keyid to check for.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>flags</parameter>&#160;:</term>
<listitem><simpara> unused (should be 0)
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> <link linkend="GNUTLS-E-SUCCESS--CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> on success (if keyid exists) and a
  negative error code on failure.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-openpgp-crt-verify-ring" role="function">
<title>gnutls_openpgp_crt_verify_ring ()</title>
<indexterm zone="gnutls-openpgp-crt-verify-ring"><primary sortas="gnutls_openpgp_crt_verify_ring">gnutls_openpgp_crt_verify_ring</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_openpgp_crt_verify_ring      (<link linkend="gnutls-openpgp-crt-t">gnutls_openpgp_crt_t</link> key,
                                                         <link linkend="gnutls-openpgp-keyring-t">gnutls_openpgp_keyring_t</link> keyring,
                                                         unsigned <link linkend="int">int</link> flags,
                                                         unsigned <link linkend="int">int</link> *verify);</programlisting>
<para>
Verify all signatures in the key, using the given set of keys
(keyring).
</para>
<para>
The key verification output will be put in <parameter>verify</parameter> and will be one
or more of the <link linkend="gnutls-certificate-status-t"><type>gnutls_certificate_status_t</type></link> enumerated elements
bitwise or'd.
</para>
<para>
<link linkend="GNUTLS-CERT-INVALID--CAPS"><literal>GNUTLS_CERT_INVALID</literal></link>: A signature on the key is invalid.
</para>
<para>
<link linkend="GNUTLS-CERT-REVOKED--CAPS"><literal>GNUTLS_CERT_REVOKED</literal></link>: The key has been revoked.
</para>
<para>
Note that this function does not verify using any "web of trust".
You may use GnuPG for that purpose, or any other external PGP
application.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>key</parameter>&#160;:</term>
<listitem><simpara> the structure that holds the key.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>keyring</parameter>&#160;:</term>
<listitem><simpara> holds the keyring to check against
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>flags</parameter>&#160;:</term>
<listitem><simpara> unused (should be 0)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>verify</parameter>&#160;:</term>
<listitem><simpara> will hold the certificate verification output.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> <link linkend="GNUTLS-E-SUCCESS--CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> on success, or an error code.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-openpgp-crt-verify-self" role="function">
<title>gnutls_openpgp_crt_verify_self ()</title>
<indexterm zone="gnutls-openpgp-crt-verify-self"><primary sortas="gnutls_openpgp_crt_verify_self">gnutls_openpgp_crt_verify_self</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_openpgp_crt_verify_self      (<link linkend="gnutls-openpgp-crt-t">gnutls_openpgp_crt_t</link> key,
                                                         unsigned <link linkend="int">int</link> flags,
                                                         unsigned <link linkend="int">int</link> *verify);</programlisting>
<para>
Verifies the self signature in the key.  The key verification
output will be put in <parameter>verify</parameter> and will be one or more of the
gnutls_certificate_status_t enumerated elements bitwise or'd.
</para>
<para>
<link linkend="GNUTLS-CERT-INVALID--CAPS"><literal>GNUTLS_CERT_INVALID</literal></link>: The self signature on the key is invalid.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>key</parameter>&#160;:</term>
<listitem><simpara> the structure that holds the key.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>flags</parameter>&#160;:</term>
<listitem><simpara> unused (should be 0)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>verify</parameter>&#160;:</term>
<listitem><simpara> will hold the key verification output.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> <link linkend="GNUTLS-E-SUCCESS--CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> on success, or an error code.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-openpgp-keyring-get-crt" role="function">
<title>gnutls_openpgp_keyring_get_crt ()</title>
<indexterm zone="gnutls-openpgp-keyring-get-crt"><primary sortas="gnutls_openpgp_keyring_get_crt">gnutls_openpgp_keyring_get_crt</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_openpgp_keyring_get_crt      (<link linkend="gnutls-openpgp-keyring-t">gnutls_openpgp_keyring_t</link> ring,
                                                         unsigned <link linkend="int">int</link> idx,
                                                         <link linkend="gnutls-openpgp-crt-t">gnutls_openpgp_crt_t</link> *cert);</programlisting>
<para>
This function will extract an OpenPGP certificate from the given
keyring.  If the index given is out of range
<link linkend="GNUTLS-E-REQUESTED-DATA-NOT-AVAILABLE--CAPS"><literal>GNUTLS_E_REQUESTED_DATA_NOT_AVAILABLE</literal></link> will be returned. The
returned structure needs to be deinited.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ring</parameter>&#160;:</term>
<listitem><simpara> Holds the keyring.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>idx</parameter>&#160;:</term>
<listitem><simpara> the index of the certificate to export
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>cert</parameter>&#160;:</term>
<listitem><simpara> An uninitialized <link linkend="gnutls-openpgp-crt-t"><type>gnutls_openpgp_crt_t</type></link> structure
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> <link linkend="GNUTLS-E-SUCCESS--CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> on success, or an error code.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-openpgp-keyring-get-crt-count" role="function">
<title>gnutls_openpgp_keyring_get_crt_count ()</title>
<indexterm zone="gnutls-openpgp-keyring-get-crt-count"><primary sortas="gnutls_openpgp_keyring_get_crt_count">gnutls_openpgp_keyring_get_crt_count</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_openpgp_keyring_get_crt_count
                                                        (<link linkend="gnutls-openpgp-keyring-t">gnutls_openpgp_keyring_t</link> ring);</programlisting>
<para>
This function will return the number of OpenPGP certificates
present in the given keyring.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ring</parameter>&#160;:</term>
<listitem><simpara> is an OpenPGP key ring
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> the number of subkeys, or a negative value on error.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-openpgp-recv-key-func" role="function">
<title>gnutls_openpgp_recv_key_func ()</title>
<indexterm zone="gnutls-openpgp-recv-key-func"><primary sortas="gnutls_openpgp_recv_key_func">gnutls_openpgp_recv_key_func</primary></indexterm><programlisting><link linkend="int">int</link>                 (*gnutls_openpgp_recv_key_func)     (<link linkend="gnutls-session-t">gnutls_session_t</link> session,
                                                         unsigned <link linkend="char">char</link> *keyfpr,
                                                         unsigned <link linkend="int">int</link> keyfpr_length,
                                                         <link linkend="gnutls-datum-t">gnutls_datum_t</link> *key);</programlisting>
<para>
A callback of this type is used to retrieve OpenPGP keys.  Only
useful on the server, and will only be used if the peer send a key
fingerprint instead of a full key.  See also
<link linkend="gnutls-openpgp-set-recv-key-function"><function>gnutls_openpgp_set_recv_key_function()</function></link>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&#160;:</term>
<listitem><simpara> a TLS session
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>keyfpr</parameter>&#160;:</term>
<listitem><simpara> key fingerprint
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>keyfpr_length</parameter>&#160;:</term>
<listitem><simpara> length of key fingerprint
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>key</parameter>&#160;:</term>
<listitem><simpara> output key.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> On success, <link linkend="GNUTLS-E-SUCCESS--CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> (zero) is returned,
  otherwise an error code is returned.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-openpgp-set-recv-key-function" role="function">
<title>gnutls_openpgp_set_recv_key_function ()</title>
<indexterm zone="gnutls-openpgp-set-recv-key-function"><primary sortas="gnutls_openpgp_set_recv_key_function">gnutls_openpgp_set_recv_key_function</primary></indexterm><programlisting><link linkend="void">void</link>                gnutls_openpgp_set_recv_key_function
                                                        (<link linkend="gnutls-session-t">gnutls_session_t</link> session,
                                                         <link linkend="gnutls-openpgp-recv-key-func">gnutls_openpgp_recv_key_func</link> func);</programlisting>
<para>
This funtion will set a key retrieval function for OpenPGP keys. This
callback is only useful in server side, and will be used if the peer
sent a key fingerprint instead of a full key.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&#160;:</term>
<listitem><simpara> a TLS session
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>func</parameter>&#160;:</term>
<listitem><simpara> the callback
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-certificate-set-openpgp-key" role="function">
<title>gnutls_certificate_set_openpgp_key ()</title>
<indexterm zone="gnutls-certificate-set-openpgp-key"><primary sortas="gnutls_certificate_set_openpgp_key">gnutls_certificate_set_openpgp_key</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_certificate_set_openpgp_key  (<link linkend="gnutls-certificate-credentials-t">gnutls_certificate_credentials_t</link> res,
                                                         <link linkend="gnutls-openpgp-crt-t">gnutls_openpgp_crt_t</link> key,
                                                         <link linkend="gnutls-openpgp-privkey-t">gnutls_openpgp_privkey_t</link> pkey);</programlisting>
<para>
This function sets a certificate/private key pair in the
gnutls_certificate_credentials_t structure.  This function may be
called more than once (in case multiple keys/certificates exist
for the server).
</para>
<para>
With this function the subkeys of the certificate are not used.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>res</parameter>&#160;:</term>
<listitem><simpara> is a <link linkend="gnutls-certificate-credentials-t"><type>gnutls_certificate_credentials_t</type></link> structure.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>key</parameter>&#160;:</term>
<listitem><simpara> contains an openpgp public key
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>pkey</parameter>&#160;:</term>
<listitem><simpara> is an openpgp private key
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> On success, <link linkend="GNUTLS-E-SUCCESS--CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> (zero) is returned,
  otherwise an error code is returned.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-certificate-set-openpgp-key-file" role="function">
<title>gnutls_certificate_set_openpgp_key_file ()</title>
<indexterm zone="gnutls-certificate-set-openpgp-key-file"><primary sortas="gnutls_certificate_set_openpgp_key_file">gnutls_certificate_set_openpgp_key_file</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_certificate_set_openpgp_key_file
                                                        (<link linkend="gnutls-certificate-credentials-t">gnutls_certificate_credentials_t</link> res,
                                                         const <link linkend="char">char</link> *certfile,
                                                         const <link linkend="char">char</link> *keyfile,
                                                         <link linkend="gnutls-openpgp-crt-fmt-t">gnutls_openpgp_crt_fmt_t</link> format);</programlisting>
<para>
This funtion is used to load OpenPGP keys into the GnuTLS
credentials structure.  The files should only contain one key which
is not encrypted.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>res</parameter>&#160;:</term>
<listitem><simpara> the destination context to save the data.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>certfile</parameter>&#160;:</term>
<listitem><simpara> the file that contains the public key.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>keyfile</parameter>&#160;:</term>
<listitem><simpara> the file that contains the secret key.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>format</parameter>&#160;:</term>
<listitem><simpara> the format of the keys
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> On success, <link linkend="GNUTLS-E-SUCCESS--CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> is returned, otherwise a
  negative error value.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-certificate-set-openpgp-key-mem" role="function">
<title>gnutls_certificate_set_openpgp_key_mem ()</title>
<indexterm zone="gnutls-certificate-set-openpgp-key-mem"><primary sortas="gnutls_certificate_set_openpgp_key_mem">gnutls_certificate_set_openpgp_key_mem</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_certificate_set_openpgp_key_mem
                                                        (<link linkend="gnutls-certificate-credentials-t">gnutls_certificate_credentials_t</link> res,
                                                         const <link linkend="gnutls-datum-t">gnutls_datum_t</link> *cert,
                                                         const <link linkend="gnutls-datum-t">gnutls_datum_t</link> *key,
                                                         <link linkend="gnutls-openpgp-crt-fmt-t">gnutls_openpgp_crt_fmt_t</link> format);</programlisting>
<para>
This funtion is used to load OpenPGP keys into the GnuTLS credential 
structure. The files should contain non encrypted keys.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>res</parameter>&#160;:</term>
<listitem><simpara> the destination context to save the data.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>cert</parameter>&#160;:</term>
<listitem><simpara> the datum that contains the public key.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>key</parameter>&#160;:</term>
<listitem><simpara> the datum that contains the secret key.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>format</parameter>&#160;:</term>
<listitem><simpara> the format of the keys
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> On success, <link linkend="GNUTLS-E-SUCCESS--CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> is returned, otherwise a
  negative error value.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-certificate-set-openpgp-key-file2" role="function" condition="since:2.4.0">
<title>gnutls_certificate_set_openpgp_key_file2 ()</title>
<indexterm zone="gnutls-certificate-set-openpgp-key-file2" role="2.4.0"><primary sortas="gnutls_certificate_set_openpgp_key_file2">gnutls_certificate_set_openpgp_key_file2</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_certificate_set_openpgp_key_file2
                                                        (<link linkend="gnutls-certificate-credentials-t">gnutls_certificate_credentials_t</link> res,
                                                         const <link linkend="char">char</link> *certfile,
                                                         const <link linkend="char">char</link> *keyfile,
                                                         const <link linkend="char">char</link> *subkey_id,
                                                         <link linkend="gnutls-openpgp-crt-fmt-t">gnutls_openpgp_crt_fmt_t</link> format);</programlisting>
<para>
This funtion is used to load OpenPGP keys into the GnuTLS credential 
structure. The files should contain non encrypted keys.
</para>
<para>
The special keyword "auto" is also accepted as <parameter>subkey_id</parameter>.  In that
case the <link linkend="gnutls-openpgp-crt-get-auth-subkey"><function>gnutls_openpgp_crt_get_auth_subkey()</function></link> will be used to
retrieve the subkey.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>res</parameter>&#160;:</term>
<listitem><simpara> the destination context to save the data.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>certfile</parameter>&#160;:</term>
<listitem><simpara> the file that contains the public key.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>keyfile</parameter>&#160;:</term>
<listitem><simpara> the file that contains the secret key.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>subkey_id</parameter>&#160;:</term>
<listitem><simpara> a hex encoded subkey id
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>format</parameter>&#160;:</term>
<listitem><simpara> the format of the keys
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> On success, <link linkend="GNUTLS-E-SUCCESS--CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> is returned, otherwise a
  negative error value.

</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 2.4.0</para></refsect2>
<refsect2 id="gnutls-certificate-set-openpgp-key-mem2" role="function" condition="since:2.4.0">
<title>gnutls_certificate_set_openpgp_key_mem2 ()</title>
<indexterm zone="gnutls-certificate-set-openpgp-key-mem2" role="2.4.0"><primary sortas="gnutls_certificate_set_openpgp_key_mem2">gnutls_certificate_set_openpgp_key_mem2</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_certificate_set_openpgp_key_mem2
                                                        (<link linkend="gnutls-certificate-credentials-t">gnutls_certificate_credentials_t</link> res,
                                                         const <link linkend="gnutls-datum-t">gnutls_datum_t</link> *cert,
                                                         const <link linkend="gnutls-datum-t">gnutls_datum_t</link> *key,
                                                         const <link linkend="char">char</link> *subkey_id,
                                                         <link linkend="gnutls-openpgp-crt-fmt-t">gnutls_openpgp_crt_fmt_t</link> format);</programlisting>
<para>
This funtion is used to load OpenPGP keys into the GnuTLS
credentials structure.  The files should only contain one key which
is not encrypted.
</para>
<para>
The special keyword "auto" is also accepted as <parameter>subkey_id</parameter>.  In that
case the <link linkend="gnutls-openpgp-crt-get-auth-subkey"><function>gnutls_openpgp_crt_get_auth_subkey()</function></link> will be used to
retrieve the subkey.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>res</parameter>&#160;:</term>
<listitem><simpara> the destination context to save the data.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>cert</parameter>&#160;:</term>
<listitem><simpara> the datum that contains the public key.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>key</parameter>&#160;:</term>
<listitem><simpara> the datum that contains the secret key.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>subkey_id</parameter>&#160;:</term>
<listitem><simpara> a hex encoded subkey id
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>format</parameter>&#160;:</term>
<listitem><simpara> the format of the keys
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> On success, <link linkend="GNUTLS-E-SUCCESS--CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> is returned, otherwise a
  negative error value.

</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 2.4.0</para></refsect2>
<refsect2 id="gnutls-certificate-set-openpgp-keyring-mem" role="function">
<title>gnutls_certificate_set_openpgp_keyring_mem ()</title>
<indexterm zone="gnutls-certificate-set-openpgp-keyring-mem"><primary sortas="gnutls_certificate_set_openpgp_keyring_mem">gnutls_certificate_set_openpgp_keyring_mem</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_certificate_set_openpgp_keyring_mem
                                                        (<link linkend="gnutls-certificate-credentials-t">gnutls_certificate_credentials_t</link> c,
                                                         unsigned <link linkend="char">char</link> *data,
                                                         <link linkend="size-t">size_t</link> dlen,
                                                         <link linkend="gnutls-openpgp-crt-fmt-t">gnutls_openpgp_crt_fmt_t</link> format);</programlisting>
<para>
The function is used to set keyrings that will be used internally
by various OpenPGP functions. For example to find a key when it
is needed for an operations. The keyring will also be used at the
verification functions.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>c</parameter>&#160;:</term>
<listitem><simpara> A certificate credentials structure
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>data</parameter>&#160;:</term>
<listitem><simpara> buffer with keyring data.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>dlen</parameter>&#160;:</term>
<listitem><simpara> length of data buffer.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>format</parameter>&#160;:</term>
<listitem><simpara> the format of the keyring
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> On success, <link linkend="GNUTLS-E-SUCCESS--CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> is returned, otherwise a
  negative error value.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-certificate-set-openpgp-keyring-file" role="function">
<title>gnutls_certificate_set_openpgp_keyring_file ()</title>
<indexterm zone="gnutls-certificate-set-openpgp-keyring-file"><primary sortas="gnutls_certificate_set_openpgp_keyring_file">gnutls_certificate_set_openpgp_keyring_file</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_certificate_set_openpgp_keyring_file
                                                        (<link linkend="gnutls-certificate-credentials-t">gnutls_certificate_credentials_t</link> c,
                                                         const <link linkend="char">char</link> *file,
                                                         <link linkend="gnutls-openpgp-crt-fmt-t">gnutls_openpgp_crt_fmt_t</link> format);</programlisting>
<para>
The function is used to set keyrings that will be used internally
by various OpenPGP functions. For example to find a key when it
is needed for an operations. The keyring will also be used at the
verification functions.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>c</parameter>&#160;:</term>
<listitem><simpara> A certificate credentials structure
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>file</parameter>&#160;:</term>
<listitem><simpara> filename of the keyring.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>format</parameter>&#160;:</term>
<listitem><simpara> format of keyring.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> On success, <link linkend="GNUTLS-E-SUCCESS--CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> is returned, otherwise a
  negative error value.
</simpara></listitem></varlistentry>
</variablelist></refsect2>

</refsect1>




</refentry>
