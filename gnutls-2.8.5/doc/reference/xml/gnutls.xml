<?xml version="1.0"?>
<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN" 
               "http://www.oasis-open.org/docbook/xml/4.1.2/docbookx.dtd">
<refentry id="gnutls-gnutls">
<refmeta>
<refentrytitle role="top_of_page" id="gnutls-gnutls.top_of_page">gnutls</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>GNUTLS Library</refmiscinfo>
</refmeta>

<refnamediv>
<refname>gnutls</refname>
<refpurpose></refpurpose>
</refnamediv>

<refsynopsisdiv id="gnutls-gnutls.synopsis" role="synopsis">
<title role="synopsis.title">Synopsis</title>

<synopsis>
#define             <link linkend="HAVE-SSIZE-T--CAPS">HAVE_SSIZE_T</link>
#define             <link linkend="GNUTLS-VERSION--CAPS">GNUTLS_VERSION</link>
#define             <link linkend="GNUTLS-VERSION-MAJOR--CAPS">GNUTLS_VERSION_MAJOR</link>
#define             <link linkend="GNUTLS-VERSION-MINOR--CAPS">GNUTLS_VERSION_MINOR</link>
#define             <link linkend="GNUTLS-VERSION-PATCH--CAPS">GNUTLS_VERSION_PATCH</link>
#define             <link linkend="GNUTLS-VERSION-NUMBER--CAPS">GNUTLS_VERSION_NUMBER</link>
#define             <link linkend="GNUTLS-CIPHER-RIJNDAEL-128-CBC--CAPS">GNUTLS_CIPHER_RIJNDAEL_128_CBC</link>
#define             <link linkend="GNUTLS-CIPHER-RIJNDAEL-256-CBC--CAPS">GNUTLS_CIPHER_RIJNDAEL_256_CBC</link>
#define             <link linkend="GNUTLS-CIPHER-RIJNDAEL-CBC--CAPS">GNUTLS_CIPHER_RIJNDAEL_CBC</link>
#define             <link linkend="GNUTLS-CIPHER-ARCFOUR--CAPS">GNUTLS_CIPHER_ARCFOUR</link>
enum                <link linkend="gnutls-cipher-algorithm-t">gnutls_cipher_algorithm_t</link>;
enum                <link linkend="gnutls-kx-algorithm-t">gnutls_kx_algorithm_t</link>;
enum                <link linkend="gnutls-params-type-t">gnutls_params_type_t</link>;
enum                <link linkend="gnutls-credentials-type-t">gnutls_credentials_type_t</link>;
#define             <link linkend="GNUTLS-MAC-SHA--CAPS">GNUTLS_MAC_SHA</link>
#define             <link linkend="GNUTLS-DIG-SHA--CAPS">GNUTLS_DIG_SHA</link>
enum                <link linkend="gnutls-mac-algorithm-t">gnutls_mac_algorithm_t</link>;
enum                <link linkend="gnutls-digest-algorithm-t">gnutls_digest_algorithm_t</link>;
#define             <link linkend="GNUTLS-MAX-ALGORITHM-NUM--CAPS">GNUTLS_MAX_ALGORITHM_NUM</link>
#define             <link linkend="GNUTLS-COMP-ZLIB--CAPS">GNUTLS_COMP_ZLIB</link>
enum                <link linkend="gnutls-compression-method-t">gnutls_compression_method_t</link>;
enum                <link linkend="gnutls-connection-end-t">gnutls_connection_end_t</link>;
enum                <link linkend="gnutls-alert-level-t">gnutls_alert_level_t</link>;
enum                <link linkend="gnutls-alert-description-t">gnutls_alert_description_t</link>;
enum                <link linkend="gnutls-handshake-description-t">gnutls_handshake_description_t</link>;
enum                <link linkend="gnutls-certificate-status-t">gnutls_certificate_status_t</link>;
enum                <link linkend="gnutls-certificate-request-t">gnutls_certificate_request_t</link>;
enum                <link linkend="gnutls-openpgp-crt-status-t">gnutls_openpgp_crt_status_t</link>;
enum                <link linkend="gnutls-close-request-t">gnutls_close_request_t</link>;
#define             <link linkend="GNUTLS-TLS1--CAPS">GNUTLS_TLS1</link>
enum                <link linkend="gnutls-protocol-t">gnutls_protocol_t</link>;
enum                <link linkend="gnutls-certificate-type-t">gnutls_certificate_type_t</link>;
enum                <link linkend="gnutls-x509-crt-fmt-t">gnutls_x509_crt_fmt_t</link>;
enum                <link linkend="gnutls-certificate-print-formats-t">gnutls_certificate_print_formats_t</link>;
enum                <link linkend="gnutls-pk-algorithm-t">gnutls_pk_algorithm_t</link>;
const <link linkend="char">char</link> *        <link linkend="gnutls-pk-algorithm-get-name">gnutls_pk_algorithm_get_name</link>        (<link linkend="gnutls-pk-algorithm-t">gnutls_pk_algorithm_t</link> algorithm);
#define             <link linkend="GNUTLS-SIGN-RSA-SHA--CAPS">GNUTLS_SIGN_RSA_SHA</link>
#define             <link linkend="GNUTLS-SIGN-DSA-SHA--CAPS">GNUTLS_SIGN_DSA_SHA</link>
enum                <link linkend="gnutls-sign-algorithm-t">gnutls_sign_algorithm_t</link>;
const <link linkend="char">char</link> *        <link linkend="gnutls-sign-algorithm-get-name">gnutls_sign_algorithm_get_name</link>      (<link linkend="gnutls-sign-algorithm-t">gnutls_sign_algorithm_t</link> sign);
typedef             <link linkend="gnutls-transport-ptr-t">gnutls_transport_ptr_t</link>;
struct              <link linkend="gnutls-session-int">gnutls_session_int</link>;
typedef             <link linkend="gnutls-session-t">gnutls_session_t</link>;
struct              <link linkend="gnutls-dh-params-int">gnutls_dh_params_int</link>;
typedef             <link linkend="gnutls-dh-params-t">gnutls_dh_params_t</link>;
struct              <link linkend="gnutls-x509-privkey-int">gnutls_x509_privkey_int</link>;
typedef             <link linkend="gnutls-rsa-params-t">gnutls_rsa_params_t</link>;
struct              <link linkend="gnutls-priority-st">gnutls_priority_st</link>;
typedef             <link linkend="gnutls-priority-t">gnutls_priority_t</link>;
<link linkend="int">int</link>                 <link linkend="gnutls-init">gnutls_init</link>                         (<link linkend="gnutls-session-t">gnutls_session_t</link> *session,
                                                         <link linkend="gnutls-connection-end-t">gnutls_connection_end_t</link> con_end);
<link linkend="void">void</link>                <link linkend="gnutls-deinit">gnutls_deinit</link>                       (<link linkend="gnutls-session-t">gnutls_session_t</link> session);
<link linkend="int">int</link>                 <link linkend="gnutls-bye">gnutls_bye</link>                          (<link linkend="gnutls-session-t">gnutls_session_t</link> session,
                                                         <link linkend="gnutls-close-request-t">gnutls_close_request_t</link> how);
<link linkend="int">int</link>                 <link linkend="gnutls-handshake">gnutls_handshake</link>                    (<link linkend="gnutls-session-t">gnutls_session_t</link> session);
<link linkend="int">int</link>                 <link linkend="gnutls-rehandshake">gnutls_rehandshake</link>                  (<link linkend="gnutls-session-t">gnutls_session_t</link> session);
<link linkend="gnutls-alert-description-t">gnutls_alert_description_t</link>  <link linkend="gnutls-alert-get">gnutls_alert_get</link>            (<link linkend="gnutls-session-t">gnutls_session_t</link> session);
<link linkend="int">int</link>                 <link linkend="gnutls-alert-send">gnutls_alert_send</link>                   (<link linkend="gnutls-session-t">gnutls_session_t</link> session,
                                                         <link linkend="gnutls-alert-level-t">gnutls_alert_level_t</link> level,
                                                         <link linkend="gnutls-alert-description-t">gnutls_alert_description_t</link> desc);
<link linkend="int">int</link>                 <link linkend="gnutls-alert-send-appropriate">gnutls_alert_send_appropriate</link>       (<link linkend="gnutls-session-t">gnutls_session_t</link> session,
                                                         <link linkend="int">int</link> err);
const <link linkend="char">char</link> *        <link linkend="gnutls-alert-get-name">gnutls_alert_get_name</link>               (<link linkend="gnutls-alert-description-t">gnutls_alert_description_t</link> alert);
<link linkend="gnutls-cipher-algorithm-t">gnutls_cipher_algorithm_t</link>  <link linkend="gnutls-cipher-get">gnutls_cipher_get</link>            (<link linkend="gnutls-session-t">gnutls_session_t</link> session);
<link linkend="gnutls-kx-algorithm-t">gnutls_kx_algorithm_t</link>  <link linkend="gnutls-kx-get">gnutls_kx_get</link>                    (<link linkend="gnutls-session-t">gnutls_session_t</link> session);
<link linkend="gnutls-mac-algorithm-t">gnutls_mac_algorithm_t</link>  <link linkend="gnutls-mac-get">gnutls_mac_get</link>                  (<link linkend="gnutls-session-t">gnutls_session_t</link> session);
<link linkend="gnutls-compression-method-t">gnutls_compression_method_t</link>  <link linkend="gnutls-compression-get">gnutls_compression_get</link>     (<link linkend="gnutls-session-t">gnutls_session_t</link> session);
<link linkend="gnutls-certificate-type-t">gnutls_certificate_type_t</link>  <link linkend="gnutls-certificate-type-get">gnutls_certificate_type_get</link>  (<link linkend="gnutls-session-t">gnutls_session_t</link> session);
<link linkend="size-t">size_t</link>              <link linkend="gnutls-cipher-get-key-size">gnutls_cipher_get_key_size</link>          (<link linkend="gnutls-cipher-algorithm-t">gnutls_cipher_algorithm_t</link> algorithm);
<link linkend="size-t">size_t</link>              <link linkend="gnutls-mac-get-key-size">gnutls_mac_get_key_size</link>             (<link linkend="gnutls-mac-algorithm-t">gnutls_mac_algorithm_t</link> algorithm);
const <link linkend="char">char</link> *        <link linkend="gnutls-cipher-get-name">gnutls_cipher_get_name</link>              (<link linkend="gnutls-cipher-algorithm-t">gnutls_cipher_algorithm_t</link> algorithm);
const <link linkend="char">char</link> *        <link linkend="gnutls-mac-get-name">gnutls_mac_get_name</link>                 (<link linkend="gnutls-mac-algorithm-t">gnutls_mac_algorithm_t</link> algorithm);
const <link linkend="char">char</link> *        <link linkend="gnutls-compression-get-name">gnutls_compression_get_name</link>         (<link linkend="gnutls-compression-method-t">gnutls_compression_method_t</link> algorithm);
const <link linkend="char">char</link> *        <link linkend="gnutls-kx-get-name">gnutls_kx_get_name</link>                  (<link linkend="gnutls-kx-algorithm-t">gnutls_kx_algorithm_t</link> algorithm);
const <link linkend="char">char</link> *        <link linkend="gnutls-certificate-type-get-name">gnutls_certificate_type_get_name</link>    (<link linkend="gnutls-certificate-type-t">gnutls_certificate_type_t</link> type);
const <link linkend="char">char</link> *        <link linkend="gnutls-pk-get-name">gnutls_pk_get_name</link>                  (<link linkend="gnutls-pk-algorithm-t">gnutls_pk_algorithm_t</link> algorithm);
const <link linkend="char">char</link> *        <link linkend="gnutls-sign-get-name">gnutls_sign_get_name</link>                (<link linkend="gnutls-sign-algorithm-t">gnutls_sign_algorithm_t</link> algorithm);
<link linkend="gnutls-mac-algorithm-t">gnutls_mac_algorithm_t</link>  <link linkend="gnutls-mac-get-id">gnutls_mac_get_id</link>               (const <link linkend="char">char</link> *name);
<link linkend="gnutls-compression-method-t">gnutls_compression_method_t</link>  <link linkend="gnutls-compression-get-id">gnutls_compression_get_id</link>  (const <link linkend="char">char</link> *name);
<link linkend="gnutls-cipher-algorithm-t">gnutls_cipher_algorithm_t</link>  <link linkend="gnutls-cipher-get-id">gnutls_cipher_get_id</link>         (const <link linkend="char">char</link> *name);
<link linkend="gnutls-kx-algorithm-t">gnutls_kx_algorithm_t</link>  <link linkend="gnutls-kx-get-id">gnutls_kx_get_id</link>                 (const <link linkend="char">char</link> *name);
<link linkend="gnutls-protocol-t">gnutls_protocol_t</link>   <link linkend="gnutls-protocol-get-id">gnutls_protocol_get_id</link>              (const <link linkend="char">char</link> *name);
<link linkend="gnutls-certificate-type-t">gnutls_certificate_type_t</link>  <link linkend="gnutls-certificate-type-get-id">gnutls_certificate_type_get_id</link>
                                                        (const <link linkend="char">char</link> *name);
<link linkend="gnutls-pk-algorithm-t">gnutls_pk_algorithm_t</link>  <link linkend="gnutls-pk-get-id">gnutls_pk_get_id</link>                 (const <link linkend="char">char</link> *name);
<link linkend="gnutls-sign-algorithm-t">gnutls_sign_algorithm_t</link>  <link linkend="gnutls-sign-get-id">gnutls_sign_get_id</link>             (const <link linkend="char">char</link> *name);
const <link linkend="gnutls-cipher-algorithm-t">gnutls_cipher_algorithm_t</link> * <link linkend="gnutls-cipher-list">gnutls_cipher_list</link>    (void);
const <link linkend="gnutls-mac-algorithm-t">gnutls_mac_algorithm_t</link> * <link linkend="gnutls-mac-list">gnutls_mac_list</link>          (void);
const <link linkend="gnutls-compression-method-t">gnutls_compression_method_t</link> * <link linkend="gnutls-compression-list">gnutls_compression_list</link>
                                                        (void);
const <link linkend="gnutls-protocol-t">gnutls_protocol_t</link> * <link linkend="gnutls-protocol-list">gnutls_protocol_list</link>          (void);
const <link linkend="gnutls-certificate-type-t">gnutls_certificate_type_t</link> * <link linkend="gnutls-certificate-type-list">gnutls_certificate_type_list</link>
                                                        (void);
const <link linkend="gnutls-kx-algorithm-t">gnutls_kx_algorithm_t</link> * <link linkend="gnutls-kx-list">gnutls_kx_list</link>            (void);
const <link linkend="gnutls-pk-algorithm-t">gnutls_pk_algorithm_t</link> * <link linkend="gnutls-pk-list">gnutls_pk_list</link>            (void);
const <link linkend="gnutls-sign-algorithm-t">gnutls_sign_algorithm_t</link> * <link linkend="gnutls-sign-list">gnutls_sign_list</link>        (void);
const <link linkend="char">char</link> *        <link linkend="gnutls-cipher-suite-info">gnutls_cipher_suite_info</link>            (<link linkend="size-t">size_t</link> idx,
                                                         <link linkend="char">char</link> *cs_id,
                                                         <link linkend="gnutls-kx-algorithm-t">gnutls_kx_algorithm_t</link> *kx,
                                                         <link linkend="gnutls-cipher-algorithm-t">gnutls_cipher_algorithm_t</link> *cipher,
                                                         <link linkend="gnutls-mac-algorithm-t">gnutls_mac_algorithm_t</link> *mac,
                                                         <link linkend="gnutls-protocol-t">gnutls_protocol_t</link> *version);
<link linkend="int">int</link>                 <link linkend="gnutls-error-is-fatal">gnutls_error_is_fatal</link>               (<link linkend="int">int</link> error);
<link linkend="int">int</link>                 <link linkend="gnutls-error-to-alert">gnutls_error_to_alert</link>               (<link linkend="int">int</link> err,
                                                         <link linkend="int">int</link> *level);
<link linkend="void">void</link>                <link linkend="gnutls-perror">gnutls_perror</link>                       (<link linkend="int">int</link> error);
const <link linkend="char">char</link> *        <link linkend="gnutls-strerror">gnutls_strerror</link>                     (<link linkend="int">int</link> error);
const <link linkend="char">char</link> *        <link linkend="gnutls-strerror-name">gnutls_strerror_name</link>                (<link linkend="int">int</link> error);
<link linkend="void">void</link>                <link linkend="gnutls-handshake-set-private-extensions">gnutls_handshake_set_private_extensions</link>
                                                        (<link linkend="gnutls-session-t">gnutls_session_t</link> session,
                                                         <link linkend="int">int</link> allow);
<link linkend="gnutls-handshake-description-t">gnutls_handshake_description_t</link>  <link linkend="gnutls-handshake-get-last-out">gnutls_handshake_get_last_out</link>
                                                        (<link linkend="gnutls-session-t">gnutls_session_t</link> session);
<link linkend="gnutls-handshake-description-t">gnutls_handshake_description_t</link>  <link linkend="gnutls-handshake-get-last-in">gnutls_handshake_get_last_in</link>
                                                        (<link linkend="gnutls-session-t">gnutls_session_t</link> session);
<link linkend="ssize-t">ssize_t</link>             <link linkend="gnutls-record-send">gnutls_record_send</link>                  (<link linkend="gnutls-session-t">gnutls_session_t</link> session,
                                                         const <link linkend="void">void</link> *data,
                                                         <link linkend="size-t">size_t</link> sizeofdata);
<link linkend="ssize-t">ssize_t</link>             <link linkend="gnutls-record-recv">gnutls_record_recv</link>                  (<link linkend="gnutls-session-t">gnutls_session_t</link> session,
                                                         <link linkend="void">void</link> *data,
                                                         <link linkend="size-t">size_t</link> sizeofdata);
#define             <link linkend="gnutls-read">gnutls_read</link>
#define             <link linkend="gnutls-write">gnutls_write</link>
<link linkend="void">void</link>                <link linkend="gnutls-session-enable-compatibility-mode">gnutls_session_enable_compatibility_mode</link>
                                                        (<link linkend="gnutls-session-t">gnutls_session_t</link> session);
<link linkend="void">void</link>                <link linkend="gnutls-record-disable-padding">gnutls_record_disable_padding</link>       (<link linkend="gnutls-session-t">gnutls_session_t</link> session);
<link linkend="int">int</link>                 <link linkend="gnutls-record-get-direction">gnutls_record_get_direction</link>         (<link linkend="gnutls-session-t">gnutls_session_t</link> session);
<link linkend="size-t">size_t</link>              <link linkend="gnutls-record-get-max-size">gnutls_record_get_max_size</link>          (<link linkend="gnutls-session-t">gnutls_session_t</link> session);
<link linkend="ssize-t">ssize_t</link>             <link linkend="gnutls-record-set-max-size">gnutls_record_set_max_size</link>          (<link linkend="gnutls-session-t">gnutls_session_t</link> session,
                                                         <link linkend="size-t">size_t</link> size);
<link linkend="size-t">size_t</link>              <link linkend="gnutls-record-check-pending">gnutls_record_check_pending</link>         (<link linkend="gnutls-session-t">gnutls_session_t</link> session);
<link linkend="int">int</link>                 <link linkend="gnutls-prf">gnutls_prf</link>                          (<link linkend="gnutls-session-t">gnutls_session_t</link> session,
                                                         <link linkend="size-t">size_t</link> label_size,
                                                         const <link linkend="char">char</link> *label,
                                                         <link linkend="int">int</link> server_random_first,
                                                         <link linkend="size-t">size_t</link> extra_size,
                                                         const <link linkend="char">char</link> *extra,
                                                         <link linkend="size-t">size_t</link> outsize,
                                                         <link linkend="char">char</link> *out);
<link linkend="int">int</link>                 <link linkend="gnutls-prf-raw">gnutls_prf_raw</link>                      (<link linkend="gnutls-session-t">gnutls_session_t</link> session,
                                                         <link linkend="size-t">size_t</link> label_size,
                                                         const <link linkend="char">char</link> *label,
                                                         <link linkend="size-t">size_t</link> seed_size,
                                                         const <link linkend="char">char</link> *seed,
                                                         <link linkend="size-t">size_t</link> outsize,
                                                         <link linkend="char">char</link> *out);
<link linkend="int">int</link>                 (<link linkend="gnutls-ext-recv-func">*gnutls_ext_recv_func</link>)             (<link linkend="gnutls-session-t">gnutls_session_t</link> session,
                                                         unsigned <link linkend="char">char</link> *data,
                                                         <link linkend="size-t">size_t</link> len);
<link linkend="int">int</link>                 (<link linkend="gnutls-ext-send-func">*gnutls_ext_send_func</link>)             (<link linkend="gnutls-session-t">gnutls_session_t</link> session,
                                                         unsigned <link linkend="char">char</link> *data,
                                                         <link linkend="size-t">size_t</link> len);
enum                <link linkend="gnutls-ext-parse-type-t">gnutls_ext_parse_type_t</link>;
<link linkend="int">int</link>                 <link linkend="gnutls-ext-register">gnutls_ext_register</link>                 (<link linkend="int">int</link> type,
                                                         const <link linkend="char">char</link> *name,
                                                         <link linkend="gnutls-ext-parse-type-t">gnutls_ext_parse_type_t</link> parse_type,
                                                         <link linkend="gnutls-ext-recv-func">gnutls_ext_recv_func</link> recv_func,
                                                         <link linkend="gnutls-ext-send-func">gnutls_ext_send_func</link> send_func);
enum                <link linkend="gnutls-server-name-type-t">gnutls_server_name_type_t</link>;
<link linkend="int">int</link>                 <link linkend="gnutls-server-name-set">gnutls_server_name_set</link>              (<link linkend="gnutls-session-t">gnutls_session_t</link> session,
                                                         <link linkend="gnutls-server-name-type-t">gnutls_server_name_type_t</link> type,
                                                         const <link linkend="void">void</link> *name,
                                                         <link linkend="size-t">size_t</link> name_length);
<link linkend="int">int</link>                 <link linkend="gnutls-server-name-get">gnutls_server_name_get</link>              (<link linkend="gnutls-session-t">gnutls_session_t</link> session,
                                                         <link linkend="void">void</link> *data,
                                                         <link linkend="size-t">size_t</link> *data_length,
                                                         unsigned <link linkend="int">int</link> *type,
                                                         unsigned <link linkend="int">int</link> indx);
<link linkend="void">void</link>                <link linkend="gnutls-oprfi-enable-client">gnutls_oprfi_enable_client</link>          (<link linkend="gnutls-session-t">gnutls_session_t</link> session,
                                                         <link linkend="size-t">size_t</link> len,
                                                         unsigned <link linkend="char">char</link> *data);
<link linkend="int">int</link>                 (<link linkend="gnutls-oprfi-callback-func">*gnutls_oprfi_callback_func</link>)       (<link linkend="gnutls-session-t">gnutls_session_t</link> session,
                                                         <link linkend="void">void</link> *userdata,
                                                         <link linkend="size-t">size_t</link> oprfi_len,
                                                         unsigned <link linkend="char">char</link> *in_oprfi,
                                                         unsigned <link linkend="char">char</link> *out_oprfi);
<link linkend="void">void</link>                <link linkend="gnutls-oprfi-enable-server">gnutls_oprfi_enable_server</link>          (<link linkend="gnutls-session-t">gnutls_session_t</link> session,
                                                         <link linkend="gnutls-oprfi-callback-func">gnutls_oprfi_callback_func</link> cb,
                                                         <link linkend="void">void</link> *userdata);
enum                <link linkend="gnutls-supplemental-data-format-type-t">gnutls_supplemental_data_format_type_t</link>;
const <link linkend="char">char</link> *        <link linkend="gnutls-supplemental-get-name">gnutls_supplemental_get_name</link>        (<link linkend="gnutls-supplemental-data-format-type-t">gnutls_supplemental_data_format_type_t</link> type);
<link linkend="int">int</link>                 <link linkend="gnutls-cipher-set-priority">gnutls_cipher_set_priority</link>          (<link linkend="gnutls-session-t">gnutls_session_t</link> session,
                                                         const <link linkend="int">int</link> *list);
<link linkend="int">int</link>                 <link linkend="gnutls-mac-set-priority">gnutls_mac_set_priority</link>             (<link linkend="gnutls-session-t">gnutls_session_t</link> session,
                                                         const <link linkend="int">int</link> *list);
<link linkend="int">int</link>                 <link linkend="gnutls-compression-set-priority">gnutls_compression_set_priority</link>     (<link linkend="gnutls-session-t">gnutls_session_t</link> session,
                                                         const <link linkend="int">int</link> *list);
<link linkend="int">int</link>                 <link linkend="gnutls-kx-set-priority">gnutls_kx_set_priority</link>              (<link linkend="gnutls-session-t">gnutls_session_t</link> session,
                                                         const <link linkend="int">int</link> *list);
<link linkend="int">int</link>                 <link linkend="gnutls-protocol-set-priority">gnutls_protocol_set_priority</link>        (<link linkend="gnutls-session-t">gnutls_session_t</link> session,
                                                         const <link linkend="int">int</link> *list);
<link linkend="int">int</link>                 <link linkend="gnutls-certificate-type-set-priority">gnutls_certificate_type_set_priority</link>
                                                        (<link linkend="gnutls-session-t">gnutls_session_t</link> session,
                                                         const <link linkend="int">int</link> *list);
<link linkend="int">int</link>                 <link linkend="gnutls-priority-init">gnutls_priority_init</link>                (<link linkend="gnutls-priority-t">gnutls_priority_t</link> *priority_cache,
                                                         const <link linkend="char">char</link> *priorities,
                                                         const <link linkend="char">char</link> **err_pos);
<link linkend="void">void</link>                <link linkend="gnutls-priority-deinit">gnutls_priority_deinit</link>              (<link linkend="gnutls-priority-t">gnutls_priority_t</link> priority_cache);
<link linkend="int">int</link>                 <link linkend="gnutls-priority-set">gnutls_priority_set</link>                 (<link linkend="gnutls-session-t">gnutls_session_t</link> session,
                                                         <link linkend="gnutls-priority-t">gnutls_priority_t</link> priority);
<link linkend="int">int</link>                 <link linkend="gnutls-priority-set-direct">gnutls_priority_set_direct</link>          (<link linkend="gnutls-session-t">gnutls_session_t</link> session,
                                                         const <link linkend="char">char</link> *priorities,
                                                         const <link linkend="char">char</link> **err_pos);
<link linkend="int">int</link>                 <link linkend="gnutls-set-default-priority">gnutls_set_default_priority</link>         (<link linkend="gnutls-session-t">gnutls_session_t</link> session);
<link linkend="int">int</link>                 <link linkend="gnutls-set-default-export-priority">gnutls_set_default_export_priority</link>  (<link linkend="gnutls-session-t">gnutls_session_t</link> session);
const <link linkend="char">char</link> *        <link linkend="gnutls-cipher-suite-get-name">gnutls_cipher_suite_get_name</link>        (<link linkend="gnutls-kx-algorithm-t">gnutls_kx_algorithm_t</link> kx_algorithm,
                                                         <link linkend="gnutls-cipher-algorithm-t">gnutls_cipher_algorithm_t</link> cipher_algorithm,
                                                         <link linkend="gnutls-mac-algorithm-t">gnutls_mac_algorithm_t</link> mac_algorithm);
<link linkend="gnutls-protocol-t">gnutls_protocol_t</link>   <link linkend="gnutls-protocol-get-version">gnutls_protocol_get_version</link>         (<link linkend="gnutls-session-t">gnutls_session_t</link> session);
const <link linkend="char">char</link> *        <link linkend="gnutls-protocol-get-name">gnutls_protocol_get_name</link>            (<link linkend="gnutls-protocol-t">gnutls_protocol_t</link> version);
<link linkend="int">int</link>                 <link linkend="gnutls-session-set-data">gnutls_session_set_data</link>             (<link linkend="gnutls-session-t">gnutls_session_t</link> session,
                                                         const <link linkend="void">void</link> *session_data,
                                                         <link linkend="size-t">size_t</link> session_data_size);
<link linkend="int">int</link>                 <link linkend="gnutls-session-get-data">gnutls_session_get_data</link>             (<link linkend="gnutls-session-t">gnutls_session_t</link> session,
                                                         <link linkend="void">void</link> *session_data,
                                                         <link linkend="size-t">size_t</link> *session_data_size);
<link linkend="int">int</link>                 <link linkend="gnutls-session-get-data2">gnutls_session_get_data2</link>            (<link linkend="gnutls-session-t">gnutls_session_t</link> session,
                                                         <link linkend="gnutls-datum-t">gnutls_datum_t</link> *data);
#define             <link linkend="GNUTLS-MAX-SESSION-ID--CAPS">GNUTLS_MAX_SESSION_ID</link>
<link linkend="int">int</link>                 <link linkend="gnutls-session-get-id">gnutls_session_get_id</link>               (<link linkend="gnutls-session-t">gnutls_session_t</link> session,
                                                         <link linkend="void">void</link> *session_id,
                                                         <link linkend="size-t">size_t</link> *session_id_size);
#define             <link linkend="GNUTLS-MASTER-SIZE--CAPS">GNUTLS_MASTER_SIZE</link>
#define             <link linkend="GNUTLS-RANDOM-SIZE--CAPS">GNUTLS_RANDOM_SIZE</link>
const <link linkend="void">void</link> *        <link linkend="gnutls-session-get-server-random">gnutls_session_get_server_random</link>    (<link linkend="gnutls-session-t">gnutls_session_t</link> session);
const <link linkend="void">void</link> *        <link linkend="gnutls-session-get-client-random">gnutls_session_get_client_random</link>    (<link linkend="gnutls-session-t">gnutls_session_t</link> session);
const <link linkend="void">void</link> *        <link linkend="gnutls-session-get-master-secret">gnutls_session_get_master_secret</link>    (<link linkend="gnutls-session-t">gnutls_session_t</link> session);
<link linkend="void">void</link>                (<link linkend="gnutls-finished-callback-func">*gnutls_finished_callback_func</link>)    (<link linkend="gnutls-session-t">gnutls_session_t</link> session,
                                                         const <link linkend="void">void</link> *finished,
                                                         <link linkend="size-t">size_t</link> len);
<link linkend="void">void</link>                <link linkend="gnutls-session-set-finished-function">gnutls_session_set_finished_function</link>
                                                        (<link linkend="gnutls-session-t">gnutls_session_t</link> session,
                                                         <link linkend="gnutls-finished-callback-func">gnutls_finished_callback_func</link> func);
<link linkend="int">int</link>                 <link linkend="gnutls-session-is-resumed">gnutls_session_is_resumed</link>           (<link linkend="gnutls-session-t">gnutls_session_t</link> session);
<link linkend="int">int</link>                 (<link linkend="gnutls-db-store-func">*gnutls_db_store_func</link>)             (<link linkend="void">void</link> *,
                                                         <link linkend="gnutls-datum-t">gnutls_datum_t</link> key,
                                                         <link linkend="gnutls-datum-t">gnutls_datum_t</link> data);
<link linkend="int">int</link>                 (<link linkend="gnutls-db-remove-func">*gnutls_db_remove_func</link>)            (<link linkend="void">void</link> *,
                                                         <link linkend="gnutls-datum-t">gnutls_datum_t</link> key);
<link linkend="gnutls-datum-t">gnutls_datum_t</link>      (<link linkend="gnutls-db-retr-func">*gnutls_db_retr_func</link>)              (<link linkend="void">void</link> *,
                                                         <link linkend="gnutls-datum-t">gnutls_datum_t</link> key);
<link linkend="void">void</link>                <link linkend="gnutls-db-set-cache-expiration">gnutls_db_set_cache_expiration</link>      (<link linkend="gnutls-session-t">gnutls_session_t</link> session,
                                                         <link linkend="int">int</link> seconds);
<link linkend="void">void</link>                <link linkend="gnutls-db-remove-session">gnutls_db_remove_session</link>            (<link linkend="gnutls-session-t">gnutls_session_t</link> session);
<link linkend="void">void</link>                <link linkend="gnutls-db-set-retrieve-function">gnutls_db_set_retrieve_function</link>     (<link linkend="gnutls-session-t">gnutls_session_t</link> session,
                                                         <link linkend="gnutls-db-retr-func">gnutls_db_retr_func</link> retr_func);
<link linkend="void">void</link>                <link linkend="gnutls-db-set-remove-function">gnutls_db_set_remove_function</link>       (<link linkend="gnutls-session-t">gnutls_session_t</link> session,
                                                         <link linkend="gnutls-db-remove-func">gnutls_db_remove_func</link> rem_func);
<link linkend="void">void</link>                <link linkend="gnutls-db-set-store-function">gnutls_db_set_store_function</link>        (<link linkend="gnutls-session-t">gnutls_session_t</link> session,
                                                         <link linkend="gnutls-db-store-func">gnutls_db_store_func</link> store_func);
<link linkend="void">void</link>                <link linkend="gnutls-db-set-ptr">gnutls_db_set_ptr</link>                   (<link linkend="gnutls-session-t">gnutls_session_t</link> session,
                                                         <link linkend="void">void</link> *ptr);
<link linkend="void">void</link> *              <link linkend="gnutls-db-get-ptr">gnutls_db_get_ptr</link>                   (<link linkend="gnutls-session-t">gnutls_session_t</link> session);
<link linkend="int">int</link>                 <link linkend="gnutls-db-check-entry">gnutls_db_check_entry</link>               (<link linkend="gnutls-session-t">gnutls_session_t</link> session,
                                                         <link linkend="gnutls-datum-t">gnutls_datum_t</link> session_entry);
<link linkend="int">int</link>                 (<link linkend="gnutls-handshake-post-client-hello-func">*gnutls_handshake_post_client_hello_func</link>)
                                                        (<link linkend="gnutls-session-t">gnutls_session_t</link> );
<link linkend="void">void</link>                <link linkend="gnutls-handshake-set-post-client-hello-function">gnutls_handshake_set_post_client_hello_function</link>
                                                        (<link linkend="gnutls-session-t">gnutls_session_t</link> session,
                                                         <link linkend="gnutls-handshake-post-client-hello-func">gnutls_handshake_post_client_hello_func</link> func);
<link linkend="void">void</link>                <link linkend="gnutls-handshake-set-max-packet-length">gnutls_handshake_set_max_packet_length</link>
                                                        (<link linkend="gnutls-session-t">gnutls_session_t</link> session,
                                                         <link linkend="size-t">size_t</link> max);
const <link linkend="char">char</link> *        <link linkend="gnutls-check-version">gnutls_check_version</link>                (const <link linkend="char">char</link> *req_version);
<link linkend="void">void</link>                <link linkend="gnutls-credentials-clear">gnutls_credentials_clear</link>            (<link linkend="gnutls-session-t">gnutls_session_t</link> session);
<link linkend="int">int</link>                 <link linkend="gnutls-credentials-set">gnutls_credentials_set</link>              (<link linkend="gnutls-session-t">gnutls_session_t</link> session,
                                                         <link linkend="gnutls-credentials-type-t">gnutls_credentials_type_t</link> type,
                                                         <link linkend="void">void</link> *cred);
#define             <link linkend="gnutls-cred-set">gnutls_cred_set</link>
struct              <link linkend="gnutls-certificate-credentials-st">gnutls_certificate_credentials_st</link>;
<link linkend="void">void</link>                <link linkend="gnutls-anon-free-server-credentials">gnutls_anon_free_server_credentials</link> (<link linkend="gnutls-anon-server-credentials-t">gnutls_anon_server_credentials_t</link> sc);
<link linkend="int">int</link>                 <link linkend="gnutls-anon-allocate-server-credentials">gnutls_anon_allocate_server_credentials</link>
                                                        (<link linkend="gnutls-anon-server-credentials-t">gnutls_anon_server_credentials_t</link> *sc);
<link linkend="void">void</link>                <link linkend="gnutls-anon-set-server-dh-params">gnutls_anon_set_server_dh_params</link>    (<link linkend="gnutls-anon-server-credentials-t">gnutls_anon_server_credentials_t</link> res,
                                                         <link linkend="gnutls-dh-params-t">gnutls_dh_params_t</link> dh_params);
<link linkend="void">void</link>                <link linkend="gnutls-anon-set-server-params-function">gnutls_anon_set_server_params_function</link>
                                                        (<link linkend="gnutls-anon-server-credentials-t">gnutls_anon_server_credentials_t</link> res,
                                                         <link linkend="gnutls-params-function">gnutls_params_function</link> *func);
<link linkend="void">void</link>                <link linkend="gnutls-anon-free-client-credentials">gnutls_anon_free_client_credentials</link> (<link linkend="gnutls-anon-client-credentials-t">gnutls_anon_client_credentials_t</link> sc);
<link linkend="int">int</link>                 <link linkend="gnutls-anon-allocate-client-credentials">gnutls_anon_allocate_client_credentials</link>
                                                        (<link linkend="gnutls-anon-client-credentials-t">gnutls_anon_client_credentials_t</link> *sc);
<link linkend="void">void</link>                <link linkend="gnutls-certificate-free-credentials">gnutls_certificate_free_credentials</link> (<link linkend="gnutls-certificate-credentials-t">gnutls_certificate_credentials_t</link> sc);
<link linkend="int">int</link>                 <link linkend="gnutls-certificate-allocate-credentials">gnutls_certificate_allocate_credentials</link>
                                                        (<link linkend="gnutls-certificate-credentials-t">gnutls_certificate_credentials_t</link> *res);
<link linkend="void">void</link>                <link linkend="gnutls-certificate-free-keys">gnutls_certificate_free_keys</link>        (<link linkend="gnutls-certificate-credentials-t">gnutls_certificate_credentials_t</link> sc);
<link linkend="void">void</link>                <link linkend="gnutls-certificate-free-cas">gnutls_certificate_free_cas</link>         (<link linkend="gnutls-certificate-credentials-t">gnutls_certificate_credentials_t</link> sc);
<link linkend="void">void</link>                <link linkend="gnutls-certificate-free-ca-names">gnutls_certificate_free_ca_names</link>    (<link linkend="gnutls-certificate-credentials-t">gnutls_certificate_credentials_t</link> sc);
<link linkend="void">void</link>                <link linkend="gnutls-certificate-free-crls">gnutls_certificate_free_crls</link>        (<link linkend="gnutls-certificate-credentials-t">gnutls_certificate_credentials_t</link> sc);
<link linkend="void">void</link>                <link linkend="gnutls-certificate-set-dh-params">gnutls_certificate_set_dh_params</link>    (<link linkend="gnutls-certificate-credentials-t">gnutls_certificate_credentials_t</link> res,
                                                         <link linkend="gnutls-dh-params-t">gnutls_dh_params_t</link> dh_params);
<link linkend="void">void</link>                <link linkend="gnutls-certificate-set-rsa-export-params">gnutls_certificate_set_rsa_export_params</link>
                                                        (<link linkend="gnutls-certificate-credentials-t">gnutls_certificate_credentials_t</link> res,
                                                         <link linkend="gnutls-rsa-params-t">gnutls_rsa_params_t</link> rsa_params);
<link linkend="void">void</link>                <link linkend="gnutls-certificate-set-verify-flags">gnutls_certificate_set_verify_flags</link> (<link linkend="gnutls-certificate-credentials-t">gnutls_certificate_credentials_t</link> res,
                                                         unsigned <link linkend="int">int</link> flags);
<link linkend="void">void</link>                <link linkend="gnutls-certificate-set-verify-limits">gnutls_certificate_set_verify_limits</link>
                                                        (<link linkend="gnutls-certificate-credentials-t">gnutls_certificate_credentials_t</link> res,
                                                         unsigned <link linkend="int">int</link> max_bits,
                                                         unsigned <link linkend="int">int</link> max_depth);
<link linkend="int">int</link>                 <link linkend="gnutls-certificate-set-x509-trust-file">gnutls_certificate_set_x509_trust_file</link>
                                                        (<link linkend="gnutls-certificate-credentials-t">gnutls_certificate_credentials_t</link> res,
                                                         const <link linkend="char">char</link> *cafile,
                                                         <link linkend="gnutls-x509-crt-fmt-t">gnutls_x509_crt_fmt_t</link> type);
<link linkend="int">int</link>                 <link linkend="gnutls-certificate-set-x509-trust-mem">gnutls_certificate_set_x509_trust_mem</link>
                                                        (<link linkend="gnutls-certificate-credentials-t">gnutls_certificate_credentials_t</link> res,
                                                         const <link linkend="gnutls-datum-t">gnutls_datum_t</link> *ca,
                                                         <link linkend="gnutls-x509-crt-fmt-t">gnutls_x509_crt_fmt_t</link> type);
<link linkend="int">int</link>                 <link linkend="gnutls-certificate-set-x509-crl-file">gnutls_certificate_set_x509_crl_file</link>
                                                        (<link linkend="gnutls-certificate-credentials-t">gnutls_certificate_credentials_t</link> res,
                                                         const <link linkend="char">char</link> *crlfile,
                                                         <link linkend="gnutls-x509-crt-fmt-t">gnutls_x509_crt_fmt_t</link> type);
<link linkend="int">int</link>                 <link linkend="gnutls-certificate-set-x509-crl-mem">gnutls_certificate_set_x509_crl_mem</link> (<link linkend="gnutls-certificate-credentials-t">gnutls_certificate_credentials_t</link> res,
                                                         const <link linkend="gnutls-datum-t">gnutls_datum_t</link> *CRL,
                                                         <link linkend="gnutls-x509-crt-fmt-t">gnutls_x509_crt_fmt_t</link> type);
<link linkend="int">int</link>                 <link linkend="gnutls-certificate-set-x509-key-file">gnutls_certificate_set_x509_key_file</link>
                                                        (<link linkend="gnutls-certificate-credentials-t">gnutls_certificate_credentials_t</link> res,
                                                         const <link linkend="char">char</link> *certfile,
                                                         const <link linkend="char">char</link> *keyfile,
                                                         <link linkend="gnutls-x509-crt-fmt-t">gnutls_x509_crt_fmt_t</link> type);
<link linkend="int">int</link>                 <link linkend="gnutls-certificate-set-x509-key-mem">gnutls_certificate_set_x509_key_mem</link> (<link linkend="gnutls-certificate-credentials-t">gnutls_certificate_credentials_t</link> res,
                                                         const <link linkend="gnutls-datum-t">gnutls_datum_t</link> *cert,
                                                         const <link linkend="gnutls-datum-t">gnutls_datum_t</link> *key,
                                                         <link linkend="gnutls-x509-crt-fmt-t">gnutls_x509_crt_fmt_t</link> type);
<link linkend="void">void</link>                <link linkend="gnutls-certificate-send-x509-rdn-sequence">gnutls_certificate_send_x509_rdn_sequence</link>
                                                        (<link linkend="gnutls-session-t">gnutls_session_t</link> session,
                                                         <link linkend="int">int</link> status);
<link linkend="int">int</link>                 <link linkend="gnutls-certificate-set-x509-simple-pkcs12-file">gnutls_certificate_set_x509_simple_pkcs12_file</link>
                                                        (<link linkend="gnutls-certificate-credentials-t">gnutls_certificate_credentials_t</link> res,
                                                         const <link linkend="char">char</link> *pkcs12file,
                                                         <link linkend="gnutls-x509-crt-fmt-t">gnutls_x509_crt_fmt_t</link> type,
                                                         const <link linkend="char">char</link> *password);
<link linkend="int">int</link>                 <link linkend="gnutls-certificate-set-x509-simple-pkcs12-mem">gnutls_certificate_set_x509_simple_pkcs12_mem</link>
                                                        (<link linkend="gnutls-certificate-credentials-t">gnutls_certificate_credentials_t</link> res,
                                                         const <link linkend="gnutls-datum">gnutls_datum</link> *p12blob,
                                                         <link linkend="gnutls-x509-crt-fmt-t">gnutls_x509_crt_fmt_t</link> type,
                                                         const <link linkend="char">char</link> *password);
typedef             <link linkend="gnutls-x509-privkey-t">gnutls_x509_privkey_t</link>;
struct              <link linkend="gnutls-x509-crl-int">gnutls_x509_crl_int</link>;
typedef             <link linkend="gnutls-x509-crl-t">gnutls_x509_crl_t</link>;
struct              <link linkend="gnutls-x509-crt-int">gnutls_x509_crt_int</link>;
typedef             <link linkend="gnutls-x509-crt-t">gnutls_x509_crt_t</link>;
struct              <link linkend="gnutls-openpgp-keyring-int">gnutls_openpgp_keyring_int</link>;
typedef             <link linkend="gnutls-openpgp-keyring-t">gnutls_openpgp_keyring_t</link>;
<link linkend="int">int</link>                 <link linkend="gnutls-certificate-set-x509-key">gnutls_certificate_set_x509_key</link>     (<link linkend="gnutls-certificate-credentials-t">gnutls_certificate_credentials_t</link> res,
                                                         <link linkend="gnutls-x509-crt-t">gnutls_x509_crt_t</link> *cert_list,
                                                         <link linkend="int">int</link> cert_list_size,
                                                         <link linkend="gnutls-x509-privkey-t">gnutls_x509_privkey_t</link> key);
<link linkend="int">int</link>                 <link linkend="gnutls-certificate-set-x509-trust">gnutls_certificate_set_x509_trust</link>   (<link linkend="gnutls-certificate-credentials-t">gnutls_certificate_credentials_t</link> res,
                                                         <link linkend="gnutls-x509-crt-t">gnutls_x509_crt_t</link> *ca_list,
                                                         <link linkend="int">int</link> ca_list_size);
<link linkend="int">int</link>                 <link linkend="gnutls-certificate-set-x509-crl">gnutls_certificate_set_x509_crl</link>     (<link linkend="gnutls-certificate-credentials-t">gnutls_certificate_credentials_t</link> res,
                                                         <link linkend="gnutls-x509-crl-t">gnutls_x509_crl_t</link> *crl_list,
                                                         <link linkend="int">int</link> crl_list_size);
<link linkend="void">void</link>                <link linkend="gnutls-certificate-get-x509-cas">gnutls_certificate_get_x509_cas</link>     (<link linkend="gnutls-certificate-credentials-t">gnutls_certificate_credentials_t</link> sc,
                                                         <link linkend="gnutls-x509-crt-t">gnutls_x509_crt_t</link> **x509_ca_list,
                                                         unsigned <link linkend="int">int</link> *ncas);
<link linkend="void">void</link>                <link linkend="gnutls-certificate-get-x509-crls">gnutls_certificate_get_x509_crls</link>    (<link linkend="gnutls-certificate-credentials-t">gnutls_certificate_credentials_t</link> sc,
                                                         <link linkend="gnutls-x509-crl-t">gnutls_x509_crl_t</link> **x509_crl_list,
                                                         unsigned <link linkend="int">int</link> *ncrls);
<link linkend="void">void</link>                <link linkend="gnutls-certificate-get-openpgp-keyring">gnutls_certificate_get_openpgp_keyring</link>
                                                        (<link linkend="gnutls-certificate-credentials-t">gnutls_certificate_credentials_t</link> sc,
                                                         <link linkend="gnutls-openpgp-keyring-t">gnutls_openpgp_keyring_t</link> *keyring);
<link linkend="int">int</link>                 <link linkend="gnutls-global-init">gnutls_global_init</link>                  (void);
<link linkend="void">void</link>                <link linkend="gnutls-global-deinit">gnutls_global_deinit</link>                (void);
<link linkend="void">void</link> *              (<link linkend="gnutls-alloc-function">*gnutls_alloc_function</link>)            (<link linkend="size-t">size_t</link> );
<link linkend="void">void</link> *              (<link linkend="gnutls-calloc-function">*gnutls_calloc_function</link>)           (<link linkend="size-t">size_t</link> ,
                                                         <link linkend="size-t">size_t</link> );
<link linkend="int">int</link>                 (<link linkend="gnutls-is-secure-function">*gnutls_is_secure_function</link>)        (const <link linkend="void">void</link> *);
<link linkend="void">void</link>                (<link linkend="gnutls-free-function">*gnutls_free_function</link>)             (<link linkend="void">void</link> *);
<link linkend="void">void</link> *              (<link linkend="gnutls-realloc-function">*gnutls_realloc_function</link>)          (<link linkend="void">void</link> *,
                                                         <link linkend="size-t">size_t</link> );
<link linkend="void">void</link>                <link linkend="gnutls-global-set-mem-functions">gnutls_global_set_mem_functions</link>     (<link linkend="gnutls-alloc-function">gnutls_alloc_function</link> alloc_func,
                                                         <link linkend="gnutls-alloc-function">gnutls_alloc_function</link> secure_alloc_func,
                                                         <link linkend="gnutls-is-secure-function">gnutls_is_secure_function</link> is_secure_func,
                                                         <link linkend="gnutls-realloc-function">gnutls_realloc_function</link> realloc_func,
                                                         <link linkend="gnutls-free-function">gnutls_free_function</link> free_func);
extern              gnutls_alloc_function <link linkend="gnutls-malloc">gnutls_malloc</link>;
extern              gnutls_alloc_function <link linkend="gnutls-secure-malloc">gnutls_secure_malloc</link>;
extern              gnutls_realloc_function <link linkend="gnutls-realloc">gnutls_realloc</link>;
extern              gnutls_calloc_function <link linkend="gnutls-calloc">gnutls_calloc</link>;
extern              gnutls_free_function <link linkend="gnutls-free">gnutls_free</link>;
<link linkend="char">char</link> *              <link linkend="gnutls-strdup">gnutls_strdup</link>                       (const <link linkend="char">char</link> *);
<link linkend="void">void</link>                (<link linkend="gnutls-log-func">*gnutls_log_func</link>)                  (...,
                                                         const <link linkend="char">char</link> *);
<link linkend="void">void</link>                <link linkend="gnutls-global-set-log-function">gnutls_global_set_log_function</link>      (<link linkend="gnutls-log-func">gnutls_log_func</link> log_func);
<link linkend="void">void</link>                <link linkend="gnutls-global-set-log-level">gnutls_global_set_log_level</link>         (<link linkend="int">int</link> level);
<link linkend="int">int</link>                 <link linkend="gnutls-dh-params-init">gnutls_dh_params_init</link>               (<link linkend="gnutls-dh-params-t">gnutls_dh_params_t</link> *dh_params);
<link linkend="void">void</link>                <link linkend="gnutls-dh-params-deinit">gnutls_dh_params_deinit</link>             (<link linkend="gnutls-dh-params-t">gnutls_dh_params_t</link> dh_params);
<link linkend="int">int</link>                 <link linkend="gnutls-dh-params-import-raw">gnutls_dh_params_import_raw</link>         (<link linkend="gnutls-dh-params-t">gnutls_dh_params_t</link> dh_params,
                                                         const <link linkend="gnutls-datum-t">gnutls_datum_t</link> *prime,
                                                         const <link linkend="gnutls-datum-t">gnutls_datum_t</link> *generator);
<link linkend="int">int</link>                 <link linkend="gnutls-dh-params-import-pkcs3">gnutls_dh_params_import_pkcs3</link>       (<link linkend="gnutls-dh-params-t">gnutls_dh_params_t</link> params,
                                                         const <link linkend="gnutls-datum-t">gnutls_datum_t</link> *pkcs3_params,
                                                         <link linkend="gnutls-x509-crt-fmt-t">gnutls_x509_crt_fmt_t</link> format);
<link linkend="int">int</link>                 <link linkend="gnutls-dh-params-generate2">gnutls_dh_params_generate2</link>          (<link linkend="gnutls-dh-params-t">gnutls_dh_params_t</link> params,
                                                         unsigned <link linkend="int">int</link> bits);
<link linkend="int">int</link>                 <link linkend="gnutls-dh-params-export-pkcs3">gnutls_dh_params_export_pkcs3</link>       (<link linkend="gnutls-dh-params-t">gnutls_dh_params_t</link> params,
                                                         <link linkend="gnutls-x509-crt-fmt-t">gnutls_x509_crt_fmt_t</link> format,
                                                         unsigned <link linkend="char">char</link> *params_data,
                                                         <link linkend="size-t">size_t</link> *params_data_size);
<link linkend="int">int</link>                 <link linkend="gnutls-dh-params-export-raw">gnutls_dh_params_export_raw</link>         (<link linkend="gnutls-dh-params-t">gnutls_dh_params_t</link> params,
                                                         <link linkend="gnutls-datum-t">gnutls_datum_t</link> *prime,
                                                         <link linkend="gnutls-datum-t">gnutls_datum_t</link> *generator,
                                                         unsigned <link linkend="int">int</link> *bits);
<link linkend="int">int</link>                 <link linkend="gnutls-dh-params-cpy">gnutls_dh_params_cpy</link>                (<link linkend="gnutls-dh-params-t">gnutls_dh_params_t</link> dst,
                                                         <link linkend="gnutls-dh-params-t">gnutls_dh_params_t</link> src);
<link linkend="int">int</link>                 <link linkend="gnutls-rsa-params-init">gnutls_rsa_params_init</link>              (<link linkend="gnutls-rsa-params-t">gnutls_rsa_params_t</link> *rsa_params);
<link linkend="void">void</link>                <link linkend="gnutls-rsa-params-deinit">gnutls_rsa_params_deinit</link>            (<link linkend="gnutls-rsa-params-t">gnutls_rsa_params_t</link> rsa_params);
<link linkend="int">int</link>                 <link linkend="gnutls-rsa-params-cpy">gnutls_rsa_params_cpy</link>               (<link linkend="gnutls-rsa-params-t">gnutls_rsa_params_t</link> dst,
                                                         <link linkend="gnutls-rsa-params-t">gnutls_rsa_params_t</link> src);
<link linkend="int">int</link>                 <link linkend="gnutls-rsa-params-import-raw">gnutls_rsa_params_import_raw</link>        (<link linkend="gnutls-rsa-params-t">gnutls_rsa_params_t</link> rsa_params,
                                                         const <link linkend="gnutls-datum-t">gnutls_datum_t</link> *m,
                                                         const <link linkend="gnutls-datum-t">gnutls_datum_t</link> *e,
                                                         const <link linkend="gnutls-datum-t">gnutls_datum_t</link> *d,
                                                         const <link linkend="gnutls-datum-t">gnutls_datum_t</link> *p,
                                                         const <link linkend="gnutls-datum-t">gnutls_datum_t</link> *q,
                                                         const <link linkend="gnutls-datum-t">gnutls_datum_t</link> *u);
<link linkend="int">int</link>                 <link linkend="gnutls-rsa-params-generate2">gnutls_rsa_params_generate2</link>         (<link linkend="gnutls-rsa-params-t">gnutls_rsa_params_t</link> params,
                                                         unsigned <link linkend="int">int</link> bits);
<link linkend="int">int</link>                 <link linkend="gnutls-rsa-params-export-raw">gnutls_rsa_params_export_raw</link>        (<link linkend="gnutls-rsa-params-t">gnutls_rsa_params_t</link> params,
                                                         <link linkend="gnutls-datum-t">gnutls_datum_t</link> *m,
                                                         <link linkend="gnutls-datum-t">gnutls_datum_t</link> *e,
                                                         <link linkend="gnutls-datum-t">gnutls_datum_t</link> *d,
                                                         <link linkend="gnutls-datum-t">gnutls_datum_t</link> *p,
                                                         <link linkend="gnutls-datum-t">gnutls_datum_t</link> *q,
                                                         <link linkend="gnutls-datum-t">gnutls_datum_t</link> *u,
                                                         unsigned <link linkend="int">int</link> *bits);
<link linkend="int">int</link>                 <link linkend="gnutls-rsa-params-export-pkcs1">gnutls_rsa_params_export_pkcs1</link>      (<link linkend="gnutls-rsa-params-t">gnutls_rsa_params_t</link> params,
                                                         <link linkend="gnutls-x509-crt-fmt-t">gnutls_x509_crt_fmt_t</link> format,
                                                         unsigned <link linkend="char">char</link> *params_data,
                                                         <link linkend="size-t">size_t</link> *params_data_size);
<link linkend="int">int</link>                 <link linkend="gnutls-rsa-params-import-pkcs1">gnutls_rsa_params_import_pkcs1</link>      (<link linkend="gnutls-rsa-params-t">gnutls_rsa_params_t</link> params,
                                                         const <link linkend="gnutls-datum-t">gnutls_datum_t</link> *pkcs1_params,
                                                         <link linkend="gnutls-x509-crt-fmt-t">gnutls_x509_crt_fmt_t</link> format);
<link linkend="ssize-t">ssize_t</link>             (<link linkend="gnutls-pull-func">*gnutls_pull_func</link>)                 (<link linkend="gnutls-transport-ptr-t">gnutls_transport_ptr_t</link> ,
                                                         <link linkend="void">void</link> *,
                                                         <link linkend="size-t">size_t</link> );
<link linkend="ssize-t">ssize_t</link>             (<link linkend="gnutls-push-func">*gnutls_push_func</link>)                 (<link linkend="gnutls-transport-ptr-t">gnutls_transport_ptr_t</link> ,
                                                         const <link linkend="void">void</link> *,
                                                         <link linkend="size-t">size_t</link> );
<link linkend="void">void</link>                <link linkend="gnutls-transport-set-ptr">gnutls_transport_set_ptr</link>            (<link linkend="gnutls-session-t">gnutls_session_t</link> session,
                                                         <link linkend="gnutls-transport-ptr-t">gnutls_transport_ptr_t</link> ptr);
<link linkend="void">void</link>                <link linkend="gnutls-transport-set-ptr2">gnutls_transport_set_ptr2</link>           (<link linkend="gnutls-session-t">gnutls_session_t</link> session,
                                                         <link linkend="gnutls-transport-ptr-t">gnutls_transport_ptr_t</link> recv_ptr,
                                                         <link linkend="gnutls-transport-ptr-t">gnutls_transport_ptr_t</link> send_ptr);
<link linkend="gnutls-transport-ptr-t">gnutls_transport_ptr_t</link>  <link linkend="gnutls-transport-get-ptr">gnutls_transport_get_ptr</link>        (<link linkend="gnutls-session-t">gnutls_session_t</link> session);
<link linkend="void">void</link>                <link linkend="gnutls-transport-get-ptr2">gnutls_transport_get_ptr2</link>           (<link linkend="gnutls-session-t">gnutls_session_t</link> session,
                                                         <link linkend="gnutls-transport-ptr-t">gnutls_transport_ptr_t</link> *recv_ptr,
                                                         <link linkend="gnutls-transport-ptr-t">gnutls_transport_ptr_t</link> *send_ptr);
<link linkend="void">void</link>                <link linkend="gnutls-transport-set-lowat">gnutls_transport_set_lowat</link>          (<link linkend="gnutls-session-t">gnutls_session_t</link> session,
                                                         <link linkend="int">int</link> num);
<link linkend="void">void</link>                <link linkend="gnutls-transport-set-push-function">gnutls_transport_set_push_function</link>  (<link linkend="gnutls-session-t">gnutls_session_t</link> session,
                                                         <link linkend="gnutls-push-func">gnutls_push_func</link> push_func);
<link linkend="void">void</link>                <link linkend="gnutls-transport-set-pull-function">gnutls_transport_set_pull_function</link>  (<link linkend="gnutls-session-t">gnutls_session_t</link> session,
                                                         <link linkend="gnutls-pull-func">gnutls_pull_func</link> pull_func);
<link linkend="void">void</link>                <link linkend="gnutls-transport-set-errno">gnutls_transport_set_errno</link>          (<link linkend="gnutls-session-t">gnutls_session_t</link> session,
                                                         <link linkend="int">int</link> err);
<link linkend="void">void</link>                <link linkend="gnutls-transport-set-global-errno">gnutls_transport_set_global_errno</link>   (<link linkend="int">int</link> err);
<link linkend="void">void</link>                <link linkend="gnutls-session-set-ptr">gnutls_session_set_ptr</link>              (<link linkend="gnutls-session-t">gnutls_session_t</link> session,
                                                         <link linkend="void">void</link> *ptr);
<link linkend="void">void</link> *              <link linkend="gnutls-session-get-ptr">gnutls_session_get_ptr</link>              (<link linkend="gnutls-session-t">gnutls_session_t</link> session);
<link linkend="void">void</link>                <link linkend="gnutls-openpgp-send-cert">gnutls_openpgp_send_cert</link>            (<link linkend="gnutls-session-t">gnutls_session_t</link> session,
                                                         <link linkend="gnutls-openpgp-crt-status-t">gnutls_openpgp_crt_status_t</link> status);
<link linkend="int">int</link>                 <link linkend="gnutls-fingerprint">gnutls_fingerprint</link>                  (<link linkend="gnutls-digest-algorithm-t">gnutls_digest_algorithm_t</link> algo,
                                                         const <link linkend="gnutls-datum-t">gnutls_datum_t</link> *data,
                                                         <link linkend="void">void</link> *result,
                                                         <link linkend="size-t">size_t</link> *result_size);
<link linkend="void">void</link>                <link linkend="gnutls-srp-free-client-credentials">gnutls_srp_free_client_credentials</link>  (<link linkend="gnutls-srp-client-credentials-t">gnutls_srp_client_credentials_t</link> sc);
<link linkend="int">int</link>                 <link linkend="gnutls-srp-allocate-client-credentials">gnutls_srp_allocate_client_credentials</link>
                                                        (<link linkend="gnutls-srp-client-credentials-t">gnutls_srp_client_credentials_t</link> *sc);
<link linkend="int">int</link>                 <link linkend="gnutls-srp-set-client-credentials">gnutls_srp_set_client_credentials</link>   (<link linkend="gnutls-srp-client-credentials-t">gnutls_srp_client_credentials_t</link> res,
                                                         const <link linkend="char">char</link> *username,
                                                         const <link linkend="char">char</link> *password);
<link linkend="void">void</link>                <link linkend="gnutls-srp-free-server-credentials">gnutls_srp_free_server_credentials</link>  (<link linkend="gnutls-srp-server-credentials-t">gnutls_srp_server_credentials_t</link> sc);
<link linkend="int">int</link>                 <link linkend="gnutls-srp-allocate-server-credentials">gnutls_srp_allocate_server_credentials</link>
                                                        (<link linkend="gnutls-srp-server-credentials-t">gnutls_srp_server_credentials_t</link> *sc);
<link linkend="int">int</link>                 <link linkend="gnutls-srp-set-server-credentials-file">gnutls_srp_set_server_credentials_file</link>
                                                        (<link linkend="gnutls-srp-server-credentials-t">gnutls_srp_server_credentials_t</link> res,
                                                         const <link linkend="char">char</link> *password_file,
                                                         const <link linkend="char">char</link> *password_conf_file);
const <link linkend="char">char</link> *        <link linkend="gnutls-srp-server-get-username">gnutls_srp_server_get_username</link>      (<link linkend="gnutls-session-t">gnutls_session_t</link> session);
<link linkend="void">void</link>                <link linkend="gnutls-srp-set-prime-bits">gnutls_srp_set_prime_bits</link>           (<link linkend="gnutls-session-t">gnutls_session_t</link> session,
                                                         unsigned <link linkend="int">int</link> bits);
<link linkend="int">int</link>                 <link linkend="gnutls-srp-verifier">gnutls_srp_verifier</link>                 (const <link linkend="char">char</link> *username,
                                                         const <link linkend="char">char</link> *password,
                                                         const <link linkend="gnutls-datum-t">gnutls_datum_t</link> *salt,
                                                         const <link linkend="gnutls-datum-t">gnutls_datum_t</link> *generator,
                                                         const <link linkend="gnutls-datum-t">gnutls_datum_t</link> *prime,
                                                         <link linkend="gnutls-datum-t">gnutls_datum_t</link> *res);
extern              const gnutls_datum_t <link linkend="gnutls-srp-2048-group-prime">gnutls_srp_2048_group_prime</link>;
extern              const gnutls_datum_t <link linkend="gnutls-srp-2048-group-generator">gnutls_srp_2048_group_generator</link>;
extern              const gnutls_datum_t <link linkend="gnutls-srp-1536-group-prime">gnutls_srp_1536_group_prime</link>;
extern              const gnutls_datum_t <link linkend="gnutls-srp-1536-group-generator">gnutls_srp_1536_group_generator</link>;
extern              const gnutls_datum_t <link linkend="gnutls-srp-1024-group-prime">gnutls_srp_1024_group_prime</link>;
extern              const gnutls_datum_t <link linkend="gnutls-srp-1024-group-generator">gnutls_srp_1024_group_generator</link>;
<link linkend="void">void</link>                <link linkend="gnutls-srp-set-server-credentials-function">gnutls_srp_set_server_credentials_function</link>
                                                        (<link linkend="gnutls-srp-server-credentials-t">gnutls_srp_server_credentials_t</link> cred,
                                                         <link linkend="gnutls-srp-server-credentials-function">gnutls_srp_server_credentials_function</link> *func);
<link linkend="void">void</link>                <link linkend="gnutls-srp-set-client-credentials-function">gnutls_srp_set_client_credentials_function</link>
                                                        (<link linkend="gnutls-srp-client-credentials-t">gnutls_srp_client_credentials_t</link> cred,
                                                         <link linkend="gnutls-srp-client-credentials-function">gnutls_srp_client_credentials_function</link> *func);
<link linkend="int">int</link>                 <link linkend="gnutls-srp-base64-encode">gnutls_srp_base64_encode</link>            (const <link linkend="gnutls-datum-t">gnutls_datum_t</link> *data,
                                                         <link linkend="char">char</link> *result,
                                                         <link linkend="size-t">size_t</link> *result_size);
<link linkend="int">int</link>                 <link linkend="gnutls-srp-base64-encode-alloc">gnutls_srp_base64_encode_alloc</link>      (const <link linkend="gnutls-datum-t">gnutls_datum_t</link> *data,
                                                         <link linkend="gnutls-datum-t">gnutls_datum_t</link> *result);
<link linkend="int">int</link>                 <link linkend="gnutls-srp-base64-decode">gnutls_srp_base64_decode</link>            (const <link linkend="gnutls-datum-t">gnutls_datum_t</link> *b64_data,
                                                         <link linkend="char">char</link> *result,
                                                         <link linkend="size-t">size_t</link> *result_size);
<link linkend="int">int</link>                 <link linkend="gnutls-srp-base64-decode-alloc">gnutls_srp_base64_decode_alloc</link>      (const <link linkend="gnutls-datum-t">gnutls_datum_t</link> *b64_data,
                                                         <link linkend="gnutls-datum-t">gnutls_datum_t</link> *result);
enum                <link linkend="gnutls-psk-key-flags">gnutls_psk_key_flags</link>;
<link linkend="void">void</link>                <link linkend="gnutls-psk-free-client-credentials">gnutls_psk_free_client_credentials</link>  (<link linkend="gnutls-psk-client-credentials-t">gnutls_psk_client_credentials_t</link> sc);
<link linkend="int">int</link>                 <link linkend="gnutls-psk-allocate-client-credentials">gnutls_psk_allocate_client_credentials</link>
                                                        (<link linkend="gnutls-psk-client-credentials-t">gnutls_psk_client_credentials_t</link> *sc);
<link linkend="int">int</link>                 <link linkend="gnutls-psk-set-client-credentials">gnutls_psk_set_client_credentials</link>   (<link linkend="gnutls-psk-client-credentials-t">gnutls_psk_client_credentials_t</link> res,
                                                         const <link linkend="char">char</link> *username,
                                                         const <link linkend="gnutls-datum-t">gnutls_datum_t</link> *key,
                                                         <link linkend="gnutls-psk-key-flags">gnutls_psk_key_flags</link> format);
<link linkend="void">void</link>                <link linkend="gnutls-psk-free-server-credentials">gnutls_psk_free_server_credentials</link>  (<link linkend="gnutls-psk-server-credentials-t">gnutls_psk_server_credentials_t</link> sc);
<link linkend="int">int</link>                 <link linkend="gnutls-psk-allocate-server-credentials">gnutls_psk_allocate_server_credentials</link>
                                                        (<link linkend="gnutls-psk-server-credentials-t">gnutls_psk_server_credentials_t</link> *sc);
<link linkend="int">int</link>                 <link linkend="gnutls-psk-set-server-credentials-file">gnutls_psk_set_server_credentials_file</link>
                                                        (<link linkend="gnutls-psk-server-credentials-t">gnutls_psk_server_credentials_t</link> res,
                                                         const <link linkend="char">char</link> *password_file);
<link linkend="int">int</link>                 <link linkend="gnutls-psk-set-server-credentials-hint">gnutls_psk_set_server_credentials_hint</link>
                                                        (<link linkend="gnutls-psk-server-credentials-t">gnutls_psk_server_credentials_t</link> res,
                                                         const <link linkend="char">char</link> *hint);
const <link linkend="char">char</link> *        <link linkend="gnutls-psk-server-get-username">gnutls_psk_server_get_username</link>      (<link linkend="gnutls-session-t">gnutls_session_t</link> session);
const <link linkend="char">char</link> *        <link linkend="gnutls-psk-client-get-hint">gnutls_psk_client_get_hint</link>          (<link linkend="gnutls-session-t">gnutls_session_t</link> session);
<link linkend="void">void</link>                <link linkend="gnutls-psk-set-server-credentials-function">gnutls_psk_set_server_credentials_function</link>
                                                        (<link linkend="gnutls-psk-server-credentials-t">gnutls_psk_server_credentials_t</link> cred,
                                                         <link linkend="gnutls-psk-server-credentials-function">gnutls_psk_server_credentials_function</link> *func);
<link linkend="void">void</link>                <link linkend="gnutls-psk-set-client-credentials-function">gnutls_psk_set_client_credentials_function</link>
                                                        (<link linkend="gnutls-psk-client-credentials-t">gnutls_psk_client_credentials_t</link> cred,
                                                         <link linkend="gnutls-psk-client-credentials-function">gnutls_psk_client_credentials_function</link> *func);
<link linkend="int">int</link>                 <link linkend="gnutls-hex-encode">gnutls_hex_encode</link>                   (const <link linkend="gnutls-datum-t">gnutls_datum_t</link> *data,
                                                         <link linkend="char">char</link> *result,
                                                         <link linkend="size-t">size_t</link> *result_size);
<link linkend="int">int</link>                 <link linkend="gnutls-hex-decode">gnutls_hex_decode</link>                   (const <link linkend="gnutls-datum-t">gnutls_datum_t</link> *hex_data,
                                                         <link linkend="char">char</link> *result,
                                                         <link linkend="size-t">size_t</link> *result_size);
<link linkend="void">void</link>                <link linkend="gnutls-psk-set-server-dh-params">gnutls_psk_set_server_dh_params</link>     (<link linkend="gnutls-psk-server-credentials-t">gnutls_psk_server_credentials_t</link> res,
                                                         <link linkend="gnutls-dh-params-t">gnutls_dh_params_t</link> dh_params);
<link linkend="void">void</link>                <link linkend="gnutls-psk-set-server-params-function">gnutls_psk_set_server_params_function</link>
                                                        (<link linkend="gnutls-psk-server-credentials-t">gnutls_psk_server_credentials_t</link> res,
                                                         <link linkend="gnutls-params-function">gnutls_params_function</link> *func);
<link linkend="int">int</link>                 <link linkend="gnutls-psk-netconf-derive-key">gnutls_psk_netconf_derive_key</link>       (const <link linkend="char">char</link> *password,
                                                         const <link linkend="char">char</link> *psk_identity,
                                                         const <link linkend="char">char</link> *psk_identity_hint,
                                                         <link linkend="gnutls-datum-t">gnutls_datum_t</link> *output_key);
enum                <link linkend="gnutls-x509-subject-alt-name-t">gnutls_x509_subject_alt_name_t</link>;
struct              <link linkend="gnutls-openpgp-crt-int">gnutls_openpgp_crt_int</link>;
typedef             <link linkend="gnutls-openpgp-crt-t">gnutls_openpgp_crt_t</link>;
struct              <link linkend="gnutls-openpgp-privkey-int">gnutls_openpgp_privkey_int</link>;
typedef             <link linkend="gnutls-openpgp-privkey-t">gnutls_openpgp_privkey_t</link>;
<link linkend="gnutls-credentials-type-t">gnutls_credentials_type_t</link>  <link linkend="gnutls-auth-get-type">gnutls_auth_get_type</link>         (<link linkend="gnutls-session-t">gnutls_session_t</link> session);
<link linkend="gnutls-credentials-type-t">gnutls_credentials_type_t</link>  <link linkend="gnutls-auth-server-get-type">gnutls_auth_server_get_type</link>  (<link linkend="gnutls-session-t">gnutls_session_t</link> session);
<link linkend="gnutls-credentials-type-t">gnutls_credentials_type_t</link>  <link linkend="gnutls-auth-client-get-type">gnutls_auth_client_get_type</link>  (<link linkend="gnutls-session-t">gnutls_session_t</link> session);
<link linkend="void">void</link>                <link linkend="gnutls-dh-set-prime-bits">gnutls_dh_set_prime_bits</link>            (<link linkend="gnutls-session-t">gnutls_session_t</link> session,
                                                         unsigned <link linkend="int">int</link> bits);
<link linkend="int">int</link>                 <link linkend="gnutls-dh-get-secret-bits">gnutls_dh_get_secret_bits</link>           (<link linkend="gnutls-session-t">gnutls_session_t</link> session);
<link linkend="int">int</link>                 <link linkend="gnutls-dh-get-peers-public-bits">gnutls_dh_get_peers_public_bits</link>     (<link linkend="gnutls-session-t">gnutls_session_t</link> session);
<link linkend="int">int</link>                 <link linkend="gnutls-dh-get-prime-bits">gnutls_dh_get_prime_bits</link>            (<link linkend="gnutls-session-t">gnutls_session_t</link> session);
<link linkend="int">int</link>                 <link linkend="gnutls-dh-get-group">gnutls_dh_get_group</link>                 (<link linkend="gnutls-session-t">gnutls_session_t</link> session,
                                                         <link linkend="gnutls-datum-t">gnutls_datum_t</link> *raw_gen,
                                                         <link linkend="gnutls-datum-t">gnutls_datum_t</link> *raw_prime);
<link linkend="int">int</link>                 <link linkend="gnutls-dh-get-pubkey">gnutls_dh_get_pubkey</link>                (<link linkend="gnutls-session-t">gnutls_session_t</link> session,
                                                         <link linkend="gnutls-datum-t">gnutls_datum_t</link> *raw_key);
<link linkend="int">int</link>                 <link linkend="gnutls-rsa-export-get-pubkey">gnutls_rsa_export_get_pubkey</link>        (<link linkend="gnutls-session-t">gnutls_session_t</link> session,
                                                         <link linkend="gnutls-datum-t">gnutls_datum_t</link> *exponent,
                                                         <link linkend="gnutls-datum-t">gnutls_datum_t</link> *modulus);
<link linkend="int">int</link>                 <link linkend="gnutls-rsa-export-get-modulus-bits">gnutls_rsa_export_get_modulus_bits</link>  (<link linkend="gnutls-session-t">gnutls_session_t</link> session);
<link linkend="int">int</link>                 (<link linkend="gnutls-sign-func">*gnutls_sign_func</link>)                 (<link linkend="gnutls-session-t">gnutls_session_t</link> session,
                                                         <link linkend="void">void</link> *userdata,
                                                         <link linkend="gnutls-certificate-type-t">gnutls_certificate_type_t</link> cert_type,
                                                         const <link linkend="gnutls-datum-t">gnutls_datum_t</link> *cert,
                                                         const <link linkend="gnutls-datum-t">gnutls_datum_t</link> *hash,
                                                         <link linkend="gnutls-datum-t">gnutls_datum_t</link> *signature);
<link linkend="void">void</link>                <link linkend="gnutls-sign-callback-set">gnutls_sign_callback_set</link>            (<link linkend="gnutls-session-t">gnutls_session_t</link> session,
                                                         <link linkend="gnutls-sign-func">gnutls_sign_func</link> sign_func,
                                                         <link linkend="void">void</link> *userdata);
<link linkend="gnutls-sign-func">gnutls_sign_func</link>    <link linkend="gnutls-sign-callback-get">gnutls_sign_callback_get</link>            (<link linkend="gnutls-session-t">gnutls_session_t</link> session,
                                                         <link linkend="void">void</link> **userdata);
<link linkend="void">void</link>                <link linkend="gnutls-certificate-client-set-retrieve-function">gnutls_certificate_client_set_retrieve_function</link>
                                                        (<link linkend="gnutls-certificate-credentials-t">gnutls_certificate_credentials_t</link> cred,
                                                         <link linkend="gnutls-certificate-client-retrieve-function">gnutls_certificate_client_retrieve_function</link> *func);
<link linkend="void">void</link>                <link linkend="gnutls-certificate-server-set-retrieve-function">gnutls_certificate_server_set_retrieve_function</link>
                                                        (<link linkend="gnutls-certificate-credentials-t">gnutls_certificate_credentials_t</link> cred,
                                                         <link linkend="gnutls-certificate-server-retrieve-function">gnutls_certificate_server_retrieve_function</link> *func);
<link linkend="void">void</link>                <link linkend="gnutls-certificate-server-set-request">gnutls_certificate_server_set_request</link>
                                                        (<link linkend="gnutls-session-t">gnutls_session_t</link> session,
                                                         <link linkend="gnutls-certificate-request-t">gnutls_certificate_request_t</link> req);
const <link linkend="gnutls-datum-t">gnutls_datum_t</link> * <link linkend="gnutls-certificate-get-peers">gnutls_certificate_get_peers</link>     (<link linkend="gnutls-session-t">gnutls_session_t</link> session,
                                                         unsigned <link linkend="int">int</link> *list_size);
const <link linkend="gnutls-datum-t">gnutls_datum_t</link> * <link linkend="gnutls-certificate-get-ours">gnutls_certificate_get_ours</link>      (<link linkend="gnutls-session-t">gnutls_session_t</link> session);
<link linkend="time-t">time_t</link>              <link linkend="gnutls-certificate-activation-time-peers">gnutls_certificate_activation_time_peers</link>
                                                        (<link linkend="gnutls-session-t">gnutls_session_t</link> session);
<link linkend="time-t">time_t</link>              <link linkend="gnutls-certificate-expiration-time-peers">gnutls_certificate_expiration_time_peers</link>
                                                        (<link linkend="gnutls-session-t">gnutls_session_t</link> session);
<link linkend="int">int</link>                 <link linkend="gnutls-certificate-client-get-request-status">gnutls_certificate_client_get_request_status</link>
                                                        (<link linkend="gnutls-session-t">gnutls_session_t</link> session);
<link linkend="int">int</link>                 <link linkend="gnutls-certificate-verify-peers2">gnutls_certificate_verify_peers2</link>    (<link linkend="gnutls-session-t">gnutls_session_t</link> session,
                                                         unsigned <link linkend="int">int</link> *status);
<link linkend="int">int</link>                 <link linkend="gnutls-certificate-verify-peers">gnutls_certificate_verify_peers</link>     (<link linkend="gnutls-session-t">gnutls_session_t</link> session);
<link linkend="int">int</link>                 <link linkend="gnutls-pem-base64-encode">gnutls_pem_base64_encode</link>            (const <link linkend="char">char</link> *msg,
                                                         const <link linkend="gnutls-datum-t">gnutls_datum_t</link> *data,
                                                         <link linkend="char">char</link> *result,
                                                         <link linkend="size-t">size_t</link> *result_size);
<link linkend="int">int</link>                 <link linkend="gnutls-pem-base64-decode">gnutls_pem_base64_decode</link>            (const <link linkend="char">char</link> *header,
                                                         const <link linkend="gnutls-datum-t">gnutls_datum_t</link> *b64_data,
                                                         unsigned <link linkend="char">char</link> *result,
                                                         <link linkend="size-t">size_t</link> *result_size);
<link linkend="int">int</link>                 <link linkend="gnutls-pem-base64-encode-alloc">gnutls_pem_base64_encode_alloc</link>      (const <link linkend="char">char</link> *msg,
                                                         const <link linkend="gnutls-datum-t">gnutls_datum_t</link> *data,
                                                         <link linkend="gnutls-datum-t">gnutls_datum_t</link> *result);
<link linkend="int">int</link>                 <link linkend="gnutls-pem-base64-decode-alloc">gnutls_pem_base64_decode_alloc</link>      (const <link linkend="char">char</link> *header,
                                                         const <link linkend="gnutls-datum-t">gnutls_datum_t</link> *b64_data,
                                                         <link linkend="gnutls-datum-t">gnutls_datum_t</link> *result);
#define             <link linkend="GNUTLS-KEY-DIGITAL-SIGNATURE--CAPS">GNUTLS_KEY_DIGITAL_SIGNATURE</link>
#define             <link linkend="GNUTLS-KEY-NON-REPUDIATION--CAPS">GNUTLS_KEY_NON_REPUDIATION</link>
#define             <link linkend="GNUTLS-KEY-KEY-ENCIPHERMENT--CAPS">GNUTLS_KEY_KEY_ENCIPHERMENT</link>
#define             <link linkend="GNUTLS-KEY-DATA-ENCIPHERMENT--CAPS">GNUTLS_KEY_DATA_ENCIPHERMENT</link>
#define             <link linkend="GNUTLS-KEY-KEY-AGREEMENT--CAPS">GNUTLS_KEY_KEY_AGREEMENT</link>
#define             <link linkend="GNUTLS-KEY-KEY-CERT-SIGN--CAPS">GNUTLS_KEY_KEY_CERT_SIGN</link>
#define             <link linkend="GNUTLS-KEY-CRL-SIGN--CAPS">GNUTLS_KEY_CRL_SIGN</link>
#define             <link linkend="GNUTLS-KEY-ENCIPHER-ONLY--CAPS">GNUTLS_KEY_ENCIPHER_ONLY</link>
#define             <link linkend="GNUTLS-KEY-DECIPHER-ONLY--CAPS">GNUTLS_KEY_DECIPHER_ONLY</link>
<link linkend="void">void</link>                <link linkend="gnutls-certificate-set-params-function">gnutls_certificate_set_params_function</link>
                                                        (<link linkend="gnutls-certificate-credentials-t">gnutls_certificate_credentials_t</link> res,
                                                         <link linkend="gnutls-params-function">gnutls_params_function</link> *func);
<link linkend="void">void</link>                <link linkend="gnutls-anon-set-params-function">gnutls_anon_set_params_function</link>     (<link linkend="gnutls-anon-server-credentials-t">gnutls_anon_server_credentials_t</link> res,
                                                         <link linkend="gnutls-params-function">gnutls_params_function</link> *func);
<link linkend="void">void</link>                <link linkend="gnutls-psk-set-params-function">gnutls_psk_set_params_function</link>      (<link linkend="gnutls-psk-server-credentials-t">gnutls_psk_server_credentials_t</link> res,
                                                         <link linkend="gnutls-params-function">gnutls_params_function</link> *func);
<link linkend="int">int</link>                 <link linkend="gnutls-hex2bin">gnutls_hex2bin</link>                      (const <link linkend="char">char</link> *hex_data,
                                                         <link linkend="size-t">size_t</link> hex_size,
                                                         <link linkend="char">char</link> *bin_data,
                                                         <link linkend="size-t">size_t</link> *bin_size);
#define             <link linkend="GNUTLS-E-SUCCESS--CAPS">GNUTLS_E_SUCCESS</link>
#define             <link linkend="GNUTLS-E-UNKNOWN-COMPRESSION-ALGORITHM--CAPS">GNUTLS_E_UNKNOWN_COMPRESSION_ALGORITHM</link>
#define             <link linkend="GNUTLS-E-UNKNOWN-CIPHER-TYPE--CAPS">GNUTLS_E_UNKNOWN_CIPHER_TYPE</link>
#define             <link linkend="GNUTLS-E-LARGE-PACKET--CAPS">GNUTLS_E_LARGE_PACKET</link>
#define             <link linkend="GNUTLS-E-UNSUPPORTED-VERSION-PACKET--CAPS">GNUTLS_E_UNSUPPORTED_VERSION_PACKET</link>
#define             <link linkend="GNUTLS-E-UNEXPECTED-PACKET-LENGTH--CAPS">GNUTLS_E_UNEXPECTED_PACKET_LENGTH</link>
#define             <link linkend="GNUTLS-E-INVALID-SESSION--CAPS">GNUTLS_E_INVALID_SESSION</link>
#define             <link linkend="GNUTLS-E-FATAL-ALERT-RECEIVED--CAPS">GNUTLS_E_FATAL_ALERT_RECEIVED</link>
#define             <link linkend="GNUTLS-E-UNEXPECTED-PACKET--CAPS">GNUTLS_E_UNEXPECTED_PACKET</link>
#define             <link linkend="GNUTLS-E-WARNING-ALERT-RECEIVED--CAPS">GNUTLS_E_WARNING_ALERT_RECEIVED</link>
#define             <link linkend="GNUTLS-E-ERROR-IN-FINISHED-PACKET--CAPS">GNUTLS_E_ERROR_IN_FINISHED_PACKET</link>
#define             <link linkend="GNUTLS-E-UNEXPECTED-HANDSHAKE-PACKET--CAPS">GNUTLS_E_UNEXPECTED_HANDSHAKE_PACKET</link>
#define             <link linkend="GNUTLS-E-UNKNOWN-CIPHER-SUITE--CAPS">GNUTLS_E_UNKNOWN_CIPHER_SUITE</link>
#define             <link linkend="GNUTLS-E-UNWANTED-ALGORITHM--CAPS">GNUTLS_E_UNWANTED_ALGORITHM</link>
#define             <link linkend="GNUTLS-E-MPI-SCAN-FAILED--CAPS">GNUTLS_E_MPI_SCAN_FAILED</link>
#define             <link linkend="GNUTLS-E-DECRYPTION-FAILED--CAPS">GNUTLS_E_DECRYPTION_FAILED</link>
#define             <link linkend="GNUTLS-E-MEMORY-ERROR--CAPS">GNUTLS_E_MEMORY_ERROR</link>
#define             <link linkend="GNUTLS-E-DECOMPRESSION-FAILED--CAPS">GNUTLS_E_DECOMPRESSION_FAILED</link>
#define             <link linkend="GNUTLS-E-COMPRESSION-FAILED--CAPS">GNUTLS_E_COMPRESSION_FAILED</link>
#define             <link linkend="GNUTLS-E-AGAIN--CAPS">GNUTLS_E_AGAIN</link>
#define             <link linkend="GNUTLS-E-EXPIRED--CAPS">GNUTLS_E_EXPIRED</link>
#define             <link linkend="GNUTLS-E-DB-ERROR--CAPS">GNUTLS_E_DB_ERROR</link>
#define             <link linkend="GNUTLS-E-SRP-PWD-ERROR--CAPS">GNUTLS_E_SRP_PWD_ERROR</link>
#define             <link linkend="GNUTLS-E-INSUFFICIENT-CREDENTIALS--CAPS">GNUTLS_E_INSUFFICIENT_CREDENTIALS</link>
#define             <link linkend="GNUTLS-E-INSUFICIENT-CREDENTIALS--CAPS">GNUTLS_E_INSUFICIENT_CREDENTIALS</link>
#define             <link linkend="GNUTLS-E-INSUFFICIENT-CRED--CAPS">GNUTLS_E_INSUFFICIENT_CRED</link>
#define             <link linkend="GNUTLS-E-INSUFICIENT-CRED--CAPS">GNUTLS_E_INSUFICIENT_CRED</link>
#define             <link linkend="GNUTLS-E-HASH-FAILED--CAPS">GNUTLS_E_HASH_FAILED</link>
#define             <link linkend="GNUTLS-E-BASE64-DECODING-ERROR--CAPS">GNUTLS_E_BASE64_DECODING_ERROR</link>
#define             <link linkend="GNUTLS-E-MPI-PRINT-FAILED--CAPS">GNUTLS_E_MPI_PRINT_FAILED</link>
#define             <link linkend="GNUTLS-E-REHANDSHAKE--CAPS">GNUTLS_E_REHANDSHAKE</link>
#define             <link linkend="GNUTLS-E-GOT-APPLICATION-DATA--CAPS">GNUTLS_E_GOT_APPLICATION_DATA</link>
#define             <link linkend="GNUTLS-E-RECORD-LIMIT-REACHED--CAPS">GNUTLS_E_RECORD_LIMIT_REACHED</link>
#define             <link linkend="GNUTLS-E-ENCRYPTION-FAILED--CAPS">GNUTLS_E_ENCRYPTION_FAILED</link>
#define             <link linkend="GNUTLS-E-PK-ENCRYPTION-FAILED--CAPS">GNUTLS_E_PK_ENCRYPTION_FAILED</link>
#define             <link linkend="GNUTLS-E-PK-DECRYPTION-FAILED--CAPS">GNUTLS_E_PK_DECRYPTION_FAILED</link>
#define             <link linkend="GNUTLS-E-PK-SIGN-FAILED--CAPS">GNUTLS_E_PK_SIGN_FAILED</link>
#define             <link linkend="GNUTLS-E-X509-UNSUPPORTED-CRITICAL-EXTENSION--CAPS">GNUTLS_E_X509_UNSUPPORTED_CRITICAL_EXTENSION</link>
#define             <link linkend="GNUTLS-E-KEY-USAGE-VIOLATION--CAPS">GNUTLS_E_KEY_USAGE_VIOLATION</link>
#define             <link linkend="GNUTLS-E-NO-CERTIFICATE-FOUND--CAPS">GNUTLS_E_NO_CERTIFICATE_FOUND</link>
#define             <link linkend="GNUTLS-E-INVALID-REQUEST--CAPS">GNUTLS_E_INVALID_REQUEST</link>
#define             <link linkend="GNUTLS-E-SHORT-MEMORY-BUFFER--CAPS">GNUTLS_E_SHORT_MEMORY_BUFFER</link>
#define             <link linkend="GNUTLS-E-INTERRUPTED--CAPS">GNUTLS_E_INTERRUPTED</link>
#define             <link linkend="GNUTLS-E-PUSH-ERROR--CAPS">GNUTLS_E_PUSH_ERROR</link>
#define             <link linkend="GNUTLS-E-PULL-ERROR--CAPS">GNUTLS_E_PULL_ERROR</link>
#define             <link linkend="GNUTLS-E-RECEIVED-ILLEGAL-PARAMETER--CAPS">GNUTLS_E_RECEIVED_ILLEGAL_PARAMETER</link>
#define             <link linkend="GNUTLS-E-REQUESTED-DATA-NOT-AVAILABLE--CAPS">GNUTLS_E_REQUESTED_DATA_NOT_AVAILABLE</link>
#define             <link linkend="GNUTLS-E-PKCS1-WRONG-PAD--CAPS">GNUTLS_E_PKCS1_WRONG_PAD</link>
#define             <link linkend="GNUTLS-E-RECEIVED-ILLEGAL-EXTENSION--CAPS">GNUTLS_E_RECEIVED_ILLEGAL_EXTENSION</link>
#define             <link linkend="GNUTLS-E-INTERNAL-ERROR--CAPS">GNUTLS_E_INTERNAL_ERROR</link>
#define             <link linkend="GNUTLS-E-DH-PRIME-UNACCEPTABLE--CAPS">GNUTLS_E_DH_PRIME_UNACCEPTABLE</link>
#define             <link linkend="GNUTLS-E-FILE-ERROR--CAPS">GNUTLS_E_FILE_ERROR</link>
#define             <link linkend="GNUTLS-E-TOO-MANY-EMPTY-PACKETS--CAPS">GNUTLS_E_TOO_MANY_EMPTY_PACKETS</link>
#define             <link linkend="GNUTLS-E-UNKNOWN-PK-ALGORITHM--CAPS">GNUTLS_E_UNKNOWN_PK_ALGORITHM</link>
#define             <link linkend="GNUTLS-E-INIT-LIBEXTRA--CAPS">GNUTLS_E_INIT_LIBEXTRA</link>
#define             <link linkend="GNUTLS-E-LIBRARY-VERSION-MISMATCH--CAPS">GNUTLS_E_LIBRARY_VERSION_MISMATCH</link>
#define             <link linkend="GNUTLS-E-NO-TEMPORARY-RSA-PARAMS--CAPS">GNUTLS_E_NO_TEMPORARY_RSA_PARAMS</link>
#define             <link linkend="GNUTLS-E-LZO-INIT-FAILED--CAPS">GNUTLS_E_LZO_INIT_FAILED</link>
#define             <link linkend="GNUTLS-E-NO-COMPRESSION-ALGORITHMS--CAPS">GNUTLS_E_NO_COMPRESSION_ALGORITHMS</link>
#define             <link linkend="GNUTLS-E-NO-CIPHER-SUITES--CAPS">GNUTLS_E_NO_CIPHER_SUITES</link>
#define             <link linkend="GNUTLS-E-OPENPGP-GETKEY-FAILED--CAPS">GNUTLS_E_OPENPGP_GETKEY_FAILED</link>
#define             <link linkend="GNUTLS-E-PK-SIG-VERIFY-FAILED--CAPS">GNUTLS_E_PK_SIG_VERIFY_FAILED</link>
#define             <link linkend="GNUTLS-E-ILLEGAL-SRP-USERNAME--CAPS">GNUTLS_E_ILLEGAL_SRP_USERNAME</link>
#define             <link linkend="GNUTLS-E-SRP-PWD-PARSING-ERROR--CAPS">GNUTLS_E_SRP_PWD_PARSING_ERROR</link>
#define             <link linkend="GNUTLS-E-NO-TEMPORARY-DH-PARAMS--CAPS">GNUTLS_E_NO_TEMPORARY_DH_PARAMS</link>
#define             <link linkend="GNUTLS-E-ASN1-ELEMENT-NOT-FOUND--CAPS">GNUTLS_E_ASN1_ELEMENT_NOT_FOUND</link>
#define             <link linkend="GNUTLS-E-ASN1-IDENTIFIER-NOT-FOUND--CAPS">GNUTLS_E_ASN1_IDENTIFIER_NOT_FOUND</link>
#define             <link linkend="GNUTLS-E-ASN1-DER-ERROR--CAPS">GNUTLS_E_ASN1_DER_ERROR</link>
#define             <link linkend="GNUTLS-E-ASN1-VALUE-NOT-FOUND--CAPS">GNUTLS_E_ASN1_VALUE_NOT_FOUND</link>
#define             <link linkend="GNUTLS-E-ASN1-GENERIC-ERROR--CAPS">GNUTLS_E_ASN1_GENERIC_ERROR</link>
#define             <link linkend="GNUTLS-E-ASN1-VALUE-NOT-VALID--CAPS">GNUTLS_E_ASN1_VALUE_NOT_VALID</link>
#define             <link linkend="GNUTLS-E-ASN1-TAG-ERROR--CAPS">GNUTLS_E_ASN1_TAG_ERROR</link>
#define             <link linkend="GNUTLS-E-ASN1-TAG-IMPLICIT--CAPS">GNUTLS_E_ASN1_TAG_IMPLICIT</link>
#define             <link linkend="GNUTLS-E-ASN1-TYPE-ANY-ERROR--CAPS">GNUTLS_E_ASN1_TYPE_ANY_ERROR</link>
#define             <link linkend="GNUTLS-E-ASN1-SYNTAX-ERROR--CAPS">GNUTLS_E_ASN1_SYNTAX_ERROR</link>
#define             <link linkend="GNUTLS-E-ASN1-DER-OVERFLOW--CAPS">GNUTLS_E_ASN1_DER_OVERFLOW</link>
#define             <link linkend="GNUTLS-E-OPENPGP-UID-REVOKED--CAPS">GNUTLS_E_OPENPGP_UID_REVOKED</link>
#define             <link linkend="GNUTLS-E-CERTIFICATE-ERROR--CAPS">GNUTLS_E_CERTIFICATE_ERROR</link>
#define             <link linkend="GNUTLS-E-X509-CERTIFICATE-ERROR--CAPS">GNUTLS_E_X509_CERTIFICATE_ERROR</link>
#define             <link linkend="GNUTLS-E-CERTIFICATE-KEY-MISMATCH--CAPS">GNUTLS_E_CERTIFICATE_KEY_MISMATCH</link>
#define             <link linkend="GNUTLS-E-UNSUPPORTED-CERTIFICATE-TYPE--CAPS">GNUTLS_E_UNSUPPORTED_CERTIFICATE_TYPE</link>
#define             <link linkend="GNUTLS-E-X509-UNKNOWN-SAN--CAPS">GNUTLS_E_X509_UNKNOWN_SAN</link>
#define             <link linkend="GNUTLS-E-OPENPGP-FINGERPRINT-UNSUPPORTED--CAPS">GNUTLS_E_OPENPGP_FINGERPRINT_UNSUPPORTED</link>
#define             <link linkend="GNUTLS-E-X509-UNSUPPORTED-ATTRIBUTE--CAPS">GNUTLS_E_X509_UNSUPPORTED_ATTRIBUTE</link>
#define             <link linkend="GNUTLS-E-UNKNOWN-HASH-ALGORITHM--CAPS">GNUTLS_E_UNKNOWN_HASH_ALGORITHM</link>
#define             <link linkend="GNUTLS-E-UNKNOWN-PKCS-CONTENT-TYPE--CAPS">GNUTLS_E_UNKNOWN_PKCS_CONTENT_TYPE</link>
#define             <link linkend="GNUTLS-E-UNKNOWN-PKCS-BAG-TYPE--CAPS">GNUTLS_E_UNKNOWN_PKCS_BAG_TYPE</link>
#define             <link linkend="GNUTLS-E-INVALID-PASSWORD--CAPS">GNUTLS_E_INVALID_PASSWORD</link>
#define             <link linkend="GNUTLS-E-MAC-VERIFY-FAILED--CAPS">GNUTLS_E_MAC_VERIFY_FAILED</link>
#define             <link linkend="GNUTLS-E-CONSTRAINT-ERROR--CAPS">GNUTLS_E_CONSTRAINT_ERROR</link>
#define             <link linkend="GNUTLS-E-WARNING-IA-IPHF-RECEIVED--CAPS">GNUTLS_E_WARNING_IA_IPHF_RECEIVED</link>
#define             <link linkend="GNUTLS-E-WARNING-IA-FPHF-RECEIVED--CAPS">GNUTLS_E_WARNING_IA_FPHF_RECEIVED</link>
#define             <link linkend="GNUTLS-E-IA-VERIFY-FAILED--CAPS">GNUTLS_E_IA_VERIFY_FAILED</link>
#define             <link linkend="GNUTLS-E-UNKNOWN-ALGORITHM--CAPS">GNUTLS_E_UNKNOWN_ALGORITHM</link>
#define             <link linkend="GNUTLS-E-BASE64-ENCODING-ERROR--CAPS">GNUTLS_E_BASE64_ENCODING_ERROR</link>
#define             <link linkend="GNUTLS-E-INCOMPATIBLE-GCRYPT-LIBRARY--CAPS">GNUTLS_E_INCOMPATIBLE_GCRYPT_LIBRARY</link>
#define             <link linkend="GNUTLS-E-INCOMPATIBLE-CRYPTO-LIBRARY--CAPS">GNUTLS_E_INCOMPATIBLE_CRYPTO_LIBRARY</link>
#define             <link linkend="GNUTLS-E-INCOMPATIBLE-LIBTASN1-LIBRARY--CAPS">GNUTLS_E_INCOMPATIBLE_LIBTASN1_LIBRARY</link>
#define             <link linkend="GNUTLS-E-OPENPGP-KEYRING-ERROR--CAPS">GNUTLS_E_OPENPGP_KEYRING_ERROR</link>
#define             <link linkend="GNUTLS-E-X509-UNSUPPORTED-OID--CAPS">GNUTLS_E_X509_UNSUPPORTED_OID</link>
#define             <link linkend="GNUTLS-E-RANDOM-FAILED--CAPS">GNUTLS_E_RANDOM_FAILED</link>
#define             <link linkend="GNUTLS-E-BASE64-UNEXPECTED-HEADER-ERROR--CAPS">GNUTLS_E_BASE64_UNEXPECTED_HEADER_ERROR</link>
#define             <link linkend="GNUTLS-E-OPENPGP-SUBKEY-ERROR--CAPS">GNUTLS_E_OPENPGP_SUBKEY_ERROR</link>
#define             <link linkend="GNUTLS-E-CRYPTO-ALREADY-REGISTERED--CAPS">GNUTLS_E_CRYPTO_ALREADY_REGISTERED</link>
#define             <link linkend="GNUTLS-E-HANDSHAKE-TOO-LARGE--CAPS">GNUTLS_E_HANDSHAKE_TOO_LARGE</link>
#define             <link linkend="GNUTLS-E-UNIMPLEMENTED-FEATURE--CAPS">GNUTLS_E_UNIMPLEMENTED_FEATURE</link>
#define             <link linkend="GNUTLS-E-APPLICATION-ERROR-MAX--CAPS">GNUTLS_E_APPLICATION_ERROR_MAX</link>
#define             <link linkend="GNUTLS-E-APPLICATION-ERROR-MIN--CAPS">GNUTLS_E_APPLICATION_ERROR_MIN</link>
</synopsis>
</refsynopsisdiv>









<refsect1 id="gnutls-gnutls.description" role="desc">
<title role="desc.title">Description</title>
<para>
</para>
</refsect1>

<refsect1 id="gnutls-gnutls.details" role="details">
<title role="details.title">Details</title>
<refsect2 id="HAVE-SSIZE-T--CAPS" role="macro">
<title>HAVE_SSIZE_T</title>
<indexterm zone="HAVE-SSIZE-T--CAPS"><primary sortas="HAVE_SSIZE_T">HAVE_SSIZE_T</primary></indexterm><programlisting># define HAVE_SSIZE_T
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-VERSION--CAPS" role="macro">
<title>GNUTLS_VERSION</title>
<indexterm zone="GNUTLS-VERSION--CAPS"><primary sortas="GNUTLS_VERSION">GNUTLS_VERSION</primary></indexterm><programlisting>#define GNUTLS_VERSION "2.8.5"
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-VERSION-MAJOR--CAPS" role="macro">
<title>GNUTLS_VERSION_MAJOR</title>
<indexterm zone="GNUTLS-VERSION-MAJOR--CAPS"><primary sortas="GNUTLS_VERSION_MAJOR">GNUTLS_VERSION_MAJOR</primary></indexterm><programlisting>#define GNUTLS_VERSION_MAJOR 2
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-VERSION-MINOR--CAPS" role="macro">
<title>GNUTLS_VERSION_MINOR</title>
<indexterm zone="GNUTLS-VERSION-MINOR--CAPS"><primary sortas="GNUTLS_VERSION_MINOR">GNUTLS_VERSION_MINOR</primary></indexterm><programlisting>#define GNUTLS_VERSION_MINOR 8
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-VERSION-PATCH--CAPS" role="macro">
<title>GNUTLS_VERSION_PATCH</title>
<indexterm zone="GNUTLS-VERSION-PATCH--CAPS"><primary sortas="GNUTLS_VERSION_PATCH">GNUTLS_VERSION_PATCH</primary></indexterm><programlisting>#define GNUTLS_VERSION_PATCH 5
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-VERSION-NUMBER--CAPS" role="macro">
<title>GNUTLS_VERSION_NUMBER</title>
<indexterm zone="GNUTLS-VERSION-NUMBER--CAPS"><primary sortas="GNUTLS_VERSION_NUMBER">GNUTLS_VERSION_NUMBER</primary></indexterm><programlisting>#define GNUTLS_VERSION_NUMBER 0x020805
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-CIPHER-RIJNDAEL-128-CBC--CAPS" role="macro">
<title>GNUTLS_CIPHER_RIJNDAEL_128_CBC</title>
<indexterm zone="GNUTLS-CIPHER-RIJNDAEL-128-CBC--CAPS"><primary sortas="GNUTLS_CIPHER_RIJNDAEL_128_CBC">GNUTLS_CIPHER_RIJNDAEL_128_CBC</primary></indexterm><programlisting>#define GNUTLS_CIPHER_RIJNDAEL_128_CBC GNUTLS_CIPHER_AES_128_CBC
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-CIPHER-RIJNDAEL-256-CBC--CAPS" role="macro">
<title>GNUTLS_CIPHER_RIJNDAEL_256_CBC</title>
<indexterm zone="GNUTLS-CIPHER-RIJNDAEL-256-CBC--CAPS"><primary sortas="GNUTLS_CIPHER_RIJNDAEL_256_CBC">GNUTLS_CIPHER_RIJNDAEL_256_CBC</primary></indexterm><programlisting>#define GNUTLS_CIPHER_RIJNDAEL_256_CBC GNUTLS_CIPHER_AES_256_CBC
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-CIPHER-RIJNDAEL-CBC--CAPS" role="macro">
<title>GNUTLS_CIPHER_RIJNDAEL_CBC</title>
<indexterm zone="GNUTLS-CIPHER-RIJNDAEL-CBC--CAPS"><primary sortas="GNUTLS_CIPHER_RIJNDAEL_CBC">GNUTLS_CIPHER_RIJNDAEL_CBC</primary></indexterm><programlisting>#define GNUTLS_CIPHER_RIJNDAEL_CBC GNUTLS_CIPHER_AES_128_CBC
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-CIPHER-ARCFOUR--CAPS" role="macro">
<title>GNUTLS_CIPHER_ARCFOUR</title>
<indexterm zone="GNUTLS-CIPHER-ARCFOUR--CAPS"><primary sortas="GNUTLS_CIPHER_ARCFOUR">GNUTLS_CIPHER_ARCFOUR</primary></indexterm><programlisting>#define GNUTLS_CIPHER_ARCFOUR GNUTLS_CIPHER_ARCFOUR_128
</programlisting>
<para>
</para></refsect2>
<refsect2 id="gnutls-cipher-algorithm-t" role="enum">
<title>enum gnutls_cipher_algorithm_t</title>
<indexterm zone="gnutls-cipher-algorithm-t"><primary sortas="gnutls_cipher_algorithm_t">gnutls_cipher_algorithm_t</primary></indexterm><programlisting>  typedef enum gnutls_cipher_algorithm
  {
    GNUTLS_CIPHER_UNKNOWN = 0,
    GNUTLS_CIPHER_NULL = 1,
    GNUTLS_CIPHER_ARCFOUR_128,
    GNUTLS_CIPHER_3DES_CBC,
    GNUTLS_CIPHER_AES_128_CBC,
    GNUTLS_CIPHER_AES_256_CBC,
    GNUTLS_CIPHER_ARCFOUR_40,
    GNUTLS_CIPHER_CAMELLIA_128_CBC,
    GNUTLS_CIPHER_CAMELLIA_256_CBC,
    GNUTLS_CIPHER_RC2_40_CBC = 90,
    GNUTLS_CIPHER_DES_CBC,

    /* used only for PGP internals. Ignored in TLS/SSL 
     */
    GNUTLS_CIPHER_IDEA_PGP_CFB = 200,
    GNUTLS_CIPHER_3DES_PGP_CFB,
    GNUTLS_CIPHER_CAST5_PGP_CFB,
    GNUTLS_CIPHER_BLOWFISH_PGP_CFB,
    GNUTLS_CIPHER_SAFER_SK128_PGP_CFB,
    GNUTLS_CIPHER_AES128_PGP_CFB,
    GNUTLS_CIPHER_AES192_PGP_CFB,
    GNUTLS_CIPHER_AES256_PGP_CFB,
    GNUTLS_CIPHER_TWOFISH_PGP_CFB
  } gnutls_cipher_algorithm_t;
</programlisting>
<para>
</para></refsect2>
<refsect2 id="gnutls-kx-algorithm-t" role="enum">
<title>enum gnutls_kx_algorithm_t</title>
<indexterm zone="gnutls-kx-algorithm-t"><primary sortas="gnutls_kx_algorithm_t">gnutls_kx_algorithm_t</primary></indexterm><programlisting>  typedef enum
  {
    GNUTLS_KX_UNKNOWN = 0,
    GNUTLS_KX_RSA = 1,
    GNUTLS_KX_DHE_DSS,
    GNUTLS_KX_DHE_RSA,
    GNUTLS_KX_ANON_DH,
    GNUTLS_KX_SRP,
    GNUTLS_KX_RSA_EXPORT,
    GNUTLS_KX_SRP_RSA,
    GNUTLS_KX_SRP_DSS,
    GNUTLS_KX_PSK,
    GNUTLS_KX_DHE_PSK
  } gnutls_kx_algorithm_t;
</programlisting>
<para>
</para></refsect2>
<refsect2 id="gnutls-params-type-t" role="enum">
<title>enum gnutls_params_type_t</title>
<indexterm zone="gnutls-params-type-t"><primary sortas="gnutls_params_type_t">gnutls_params_type_t</primary></indexterm><programlisting>  typedef enum
  {
    GNUTLS_PARAMS_RSA_EXPORT = 1,
    GNUTLS_PARAMS_DH
  } gnutls_params_type_t;
</programlisting>
<para>
</para></refsect2>
<refsect2 id="gnutls-credentials-type-t" role="enum">
<title>enum gnutls_credentials_type_t</title>
<indexterm zone="gnutls-credentials-type-t"><primary sortas="gnutls_credentials_type_t">gnutls_credentials_type_t</primary></indexterm><programlisting>  typedef enum
  {
    GNUTLS_CRD_CERTIFICATE = 1,
    GNUTLS_CRD_ANON,
    GNUTLS_CRD_SRP,
    GNUTLS_CRD_PSK,
    GNUTLS_CRD_IA
  } gnutls_credentials_type_t;
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-MAC-SHA--CAPS" role="macro">
<title>GNUTLS_MAC_SHA</title>
<indexterm zone="GNUTLS-MAC-SHA--CAPS"><primary sortas="GNUTLS_MAC_SHA">GNUTLS_MAC_SHA</primary></indexterm><programlisting>#define GNUTLS_MAC_SHA GNUTLS_MAC_SHA1
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-DIG-SHA--CAPS" role="macro">
<title>GNUTLS_DIG_SHA</title>
<indexterm zone="GNUTLS-DIG-SHA--CAPS"><primary sortas="GNUTLS_DIG_SHA">GNUTLS_DIG_SHA</primary></indexterm><programlisting>#define GNUTLS_DIG_SHA GNUTLS_DIG_SHA1
</programlisting>
<para>
</para></refsect2>
<refsect2 id="gnutls-mac-algorithm-t" role="enum">
<title>enum gnutls_mac_algorithm_t</title>
<indexterm zone="gnutls-mac-algorithm-t"><primary sortas="gnutls_mac_algorithm_t">gnutls_mac_algorithm_t</primary></indexterm><programlisting>  typedef enum
  {
    GNUTLS_MAC_UNKNOWN = 0,
    GNUTLS_MAC_NULL = 1,
    GNUTLS_MAC_MD5,
    GNUTLS_MAC_SHA1,
    GNUTLS_MAC_RMD160,
    GNUTLS_MAC_MD2,
    GNUTLS_MAC_SHA256,
    GNUTLS_MAC_SHA384,
    GNUTLS_MAC_SHA512
    /* If you add anything here, make sure you align with
       gnutls_digest_algorithm_t, in particular SHA-224. */
  } gnutls_mac_algorithm_t;
</programlisting>
<para>
</para></refsect2>
<refsect2 id="gnutls-digest-algorithm-t" role="enum">
<title>enum gnutls_digest_algorithm_t</title>
<indexterm zone="gnutls-digest-algorithm-t"><primary sortas="gnutls_digest_algorithm_t">gnutls_digest_algorithm_t</primary></indexterm><programlisting>  typedef enum
  {
    GNUTLS_DIG_NULL = GNUTLS_MAC_NULL,
    GNUTLS_DIG_MD5 = GNUTLS_MAC_MD5,
    GNUTLS_DIG_SHA1 = GNUTLS_MAC_SHA1,
    GNUTLS_DIG_RMD160 = GNUTLS_MAC_RMD160,
    GNUTLS_DIG_MD2 = GNUTLS_MAC_MD2,
    GNUTLS_DIG_SHA256 = GNUTLS_MAC_SHA256,
    GNUTLS_DIG_SHA384 = GNUTLS_MAC_SHA384,
    GNUTLS_DIG_SHA512 = GNUTLS_MAC_SHA512,
    GNUTLS_DIG_SHA224
  } gnutls_digest_algorithm_t;
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-MAX-ALGORITHM-NUM--CAPS" role="macro">
<title>GNUTLS_MAX_ALGORITHM_NUM</title>
<indexterm zone="GNUTLS-MAX-ALGORITHM-NUM--CAPS"><primary sortas="GNUTLS_MAX_ALGORITHM_NUM">GNUTLS_MAX_ALGORITHM_NUM</primary></indexterm><programlisting>#define GNUTLS_MAX_ALGORITHM_NUM 16
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-COMP-ZLIB--CAPS" role="macro">
<title>GNUTLS_COMP_ZLIB</title>
<indexterm zone="GNUTLS-COMP-ZLIB--CAPS"><primary sortas="GNUTLS_COMP_ZLIB">GNUTLS_COMP_ZLIB</primary></indexterm><programlisting>#define GNUTLS_COMP_ZLIB GNUTLS_COMP_DEFLATE
</programlisting>
<para>
</para></refsect2>
<refsect2 id="gnutls-compression-method-t" role="enum">
<title>enum gnutls_compression_method_t</title>
<indexterm zone="gnutls-compression-method-t"><primary sortas="gnutls_compression_method_t">gnutls_compression_method_t</primary></indexterm><programlisting>  typedef enum
  {
    GNUTLS_COMP_UNKNOWN = 0,
    GNUTLS_COMP_NULL = 1,
    GNUTLS_COMP_DEFLATE,
    GNUTLS_COMP_LZO		/* only available if gnutls-extra has
				   been initialized
				 */
  } gnutls_compression_method_t;
</programlisting>
<para>
</para></refsect2>
<refsect2 id="gnutls-connection-end-t" role="enum">
<title>enum gnutls_connection_end_t</title>
<indexterm zone="gnutls-connection-end-t"><primary sortas="gnutls_connection_end_t">gnutls_connection_end_t</primary></indexterm><programlisting>  typedef enum
  {
    GNUTLS_SERVER = 1,
    GNUTLS_CLIENT
  } gnutls_connection_end_t;
</programlisting>
<para>
</para></refsect2>
<refsect2 id="gnutls-alert-level-t" role="enum">
<title>enum gnutls_alert_level_t</title>
<indexterm zone="gnutls-alert-level-t"><primary sortas="gnutls_alert_level_t">gnutls_alert_level_t</primary></indexterm><programlisting>  typedef enum
  {
    GNUTLS_AL_WARNING = 1,
    GNUTLS_AL_FATAL
  } gnutls_alert_level_t;
</programlisting>
<para>
</para></refsect2>
<refsect2 id="gnutls-alert-description-t" role="enum">
<title>enum gnutls_alert_description_t</title>
<indexterm zone="gnutls-alert-description-t"><primary sortas="gnutls_alert_description_t">gnutls_alert_description_t</primary></indexterm><programlisting>  typedef enum
  {
    GNUTLS_A_CLOSE_NOTIFY,
    GNUTLS_A_UNEXPECTED_MESSAGE = 10,
    GNUTLS_A_BAD_RECORD_MAC = 20,
    GNUTLS_A_DECRYPTION_FAILED,
    GNUTLS_A_RECORD_OVERFLOW,
    GNUTLS_A_DECOMPRESSION_FAILURE = 30,
    GNUTLS_A_HANDSHAKE_FAILURE = 40,
    GNUTLS_A_SSL3_NO_CERTIFICATE = 41,
    GNUTLS_A_BAD_CERTIFICATE = 42,
    GNUTLS_A_UNSUPPORTED_CERTIFICATE,
    GNUTLS_A_CERTIFICATE_REVOKED,
    GNUTLS_A_CERTIFICATE_EXPIRED,
    GNUTLS_A_CERTIFICATE_UNKNOWN,
    GNUTLS_A_ILLEGAL_PARAMETER,
    GNUTLS_A_UNKNOWN_CA,
    GNUTLS_A_ACCESS_DENIED,
    GNUTLS_A_DECODE_ERROR = 50,
    GNUTLS_A_DECRYPT_ERROR,
    GNUTLS_A_EXPORT_RESTRICTION = 60,
    GNUTLS_A_PROTOCOL_VERSION = 70,
    GNUTLS_A_INSUFFICIENT_SECURITY,
    GNUTLS_A_INTERNAL_ERROR = 80,
    GNUTLS_A_USER_CANCELED = 90,
    GNUTLS_A_NO_RENEGOTIATION = 100,
    GNUTLS_A_UNSUPPORTED_EXTENSION = 110,
    GNUTLS_A_CERTIFICATE_UNOBTAINABLE = 111,
    GNUTLS_A_UNRECOGNIZED_NAME = 112,
    GNUTLS_A_UNKNOWN_PSK_IDENTITY = 115,
    GNUTLS_A_INNER_APPLICATION_FAILURE = 208,
    GNUTLS_A_INNER_APPLICATION_VERIFICATION = 209
  } gnutls_alert_description_t;
</programlisting>
<para>
</para></refsect2>
<refsect2 id="gnutls-handshake-description-t" role="enum">
<title>enum gnutls_handshake_description_t</title>
<indexterm zone="gnutls-handshake-description-t"><primary sortas="gnutls_handshake_description_t">gnutls_handshake_description_t</primary></indexterm><programlisting>  typedef enum
  { GNUTLS_HANDSHAKE_HELLO_REQUEST = 0,
    GNUTLS_HANDSHAKE_CLIENT_HELLO = 1,
    GNUTLS_HANDSHAKE_SERVER_HELLO = 2,
    GNUTLS_HANDSHAKE_CERTIFICATE_PKT = 11,
    GNUTLS_HANDSHAKE_SERVER_KEY_EXCHANGE = 12,
    GNUTLS_HANDSHAKE_CERTIFICATE_REQUEST = 13,
    GNUTLS_HANDSHAKE_SERVER_HELLO_DONE = 14,
    GNUTLS_HANDSHAKE_CERTIFICATE_VERIFY = 15,
    GNUTLS_HANDSHAKE_CLIENT_KEY_EXCHANGE = 16,
    GNUTLS_HANDSHAKE_FINISHED = 20,
    GNUTLS_HANDSHAKE_SUPPLEMENTAL = 23
  } gnutls_handshake_description_t;
</programlisting>
<para>
</para></refsect2>
<refsect2 id="gnutls-certificate-status-t" role="enum">
<title>enum gnutls_certificate_status_t</title>
<indexterm zone="gnutls-certificate-status-t"><primary sortas="gnutls_certificate_status_t">gnutls_certificate_status_t</primary></indexterm><programlisting>  typedef enum
  {
    GNUTLS_CERT_INVALID = 2,	/* will be set if the certificate
				 * was not verified.
				 */
    GNUTLS_CERT_REVOKED = 32,	/* in X.509 this will be set only if CRLs are checked
				 */

    /* Those are extra information about the verification
     * process. Will be set only if the certificate was 
     * not verified.
     */
    GNUTLS_CERT_SIGNER_NOT_FOUND = 64,
    GNUTLS_CERT_SIGNER_NOT_CA = 128,
    GNUTLS_CERT_INSECURE_ALGORITHM = 256,

    /* Time verification.
     */
    GNUTLS_CERT_NOT_ACTIVATED = 512,
    GNUTLS_CERT_EXPIRED = 1024

  } gnutls_certificate_status_t;
</programlisting>
<para>
</para></refsect2>
<refsect2 id="gnutls-certificate-request-t" role="enum">
<title>enum gnutls_certificate_request_t</title>
<indexterm zone="gnutls-certificate-request-t"><primary sortas="gnutls_certificate_request_t">gnutls_certificate_request_t</primary></indexterm><programlisting>  typedef enum
  {
    GNUTLS_CERT_IGNORE,
    GNUTLS_CERT_REQUEST = 1,
    GNUTLS_CERT_REQUIRE
  } gnutls_certificate_request_t;
</programlisting>
<para>
</para></refsect2>
<refsect2 id="gnutls-openpgp-crt-status-t" role="enum">
<title>enum gnutls_openpgp_crt_status_t</title>
<indexterm zone="gnutls-openpgp-crt-status-t"><primary sortas="gnutls_openpgp_crt_status_t">gnutls_openpgp_crt_status_t</primary></indexterm><programlisting>  typedef enum
  { GNUTLS_OPENPGP_CERT,
    GNUTLS_OPENPGP_CERT_FINGERPRINT
  } gnutls_openpgp_crt_status_t;
</programlisting>
<para>
</para></refsect2>
<refsect2 id="gnutls-close-request-t" role="enum">
<title>enum gnutls_close_request_t</title>
<indexterm zone="gnutls-close-request-t"><primary sortas="gnutls_close_request_t">gnutls_close_request_t</primary></indexterm><programlisting>  typedef enum
  {
    GNUTLS_SHUT_RDWR = 0,
    GNUTLS_SHUT_WR = 1
  } gnutls_close_request_t;
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-TLS1--CAPS" role="macro">
<title>GNUTLS_TLS1</title>
<indexterm zone="GNUTLS-TLS1--CAPS"><primary sortas="GNUTLS_TLS1">GNUTLS_TLS1</primary></indexterm><programlisting>#define GNUTLS_TLS1 GNUTLS_TLS1_0
</programlisting>
<para>
</para></refsect2>
<refsect2 id="gnutls-protocol-t" role="enum">
<title>enum gnutls_protocol_t</title>
<indexterm zone="gnutls-protocol-t"><primary sortas="gnutls_protocol_t">gnutls_protocol_t</primary></indexterm><programlisting>  typedef enum
  {
    GNUTLS_SSL3 = 1,
    GNUTLS_TLS1_0,
    GNUTLS_TLS1_1,
    GNUTLS_TLS1_2,
    GNUTLS_VERSION_UNKNOWN = 0xff
  } gnutls_protocol_t;
</programlisting>
<para>
</para></refsect2>
<refsect2 id="gnutls-certificate-type-t" role="enum">
<title>enum gnutls_certificate_type_t</title>
<indexterm zone="gnutls-certificate-type-t"><primary sortas="gnutls_certificate_type_t">gnutls_certificate_type_t</primary></indexterm><programlisting>  typedef enum
  {
    GNUTLS_CRT_UNKNOWN = 0,
    GNUTLS_CRT_X509 = 1,
    GNUTLS_CRT_OPENPGP
  } gnutls_certificate_type_t;
</programlisting>
<para>
</para></refsect2>
<refsect2 id="gnutls-x509-crt-fmt-t" role="enum">
<title>enum gnutls_x509_crt_fmt_t</title>
<indexterm zone="gnutls-x509-crt-fmt-t"><primary sortas="gnutls_x509_crt_fmt_t">gnutls_x509_crt_fmt_t</primary></indexterm><programlisting>  typedef enum
  {
    GNUTLS_X509_FMT_DER,
    GNUTLS_X509_FMT_PEM
  } gnutls_x509_crt_fmt_t;
</programlisting>
<para>
</para></refsect2>
<refsect2 id="gnutls-certificate-print-formats-t" role="enum">
<title>enum gnutls_certificate_print_formats_t</title>
<indexterm zone="gnutls-certificate-print-formats-t"><primary sortas="gnutls_certificate_print_formats_t">gnutls_certificate_print_formats_t</primary></indexterm><programlisting>  typedef enum gnutls_certificate_print_formats
    {
      GNUTLS_CRT_PRINT_FULL,
      GNUTLS_CRT_PRINT_ONELINE,
      GNUTLS_CRT_PRINT_UNSIGNED_FULL
    } gnutls_certificate_print_formats_t;
</programlisting>
<para>
</para></refsect2>
<refsect2 id="gnutls-pk-algorithm-t" role="enum">
<title>enum gnutls_pk_algorithm_t</title>
<indexterm zone="gnutls-pk-algorithm-t"><primary sortas="gnutls_pk_algorithm_t">gnutls_pk_algorithm_t</primary></indexterm><programlisting>  typedef enum
  {
    GNUTLS_PK_UNKNOWN = 0,
    GNUTLS_PK_RSA = 1,
    GNUTLS_PK_DSA
  } gnutls_pk_algorithm_t;
</programlisting>
<para>
</para></refsect2>
<refsect2 id="gnutls-pk-algorithm-get-name" role="function">
<title>gnutls_pk_algorithm_get_name ()</title>
<indexterm zone="gnutls-pk-algorithm-get-name"><primary sortas="gnutls_pk_algorithm_get_name">gnutls_pk_algorithm_get_name</primary></indexterm><programlisting>const <link linkend="char">char</link> *        gnutls_pk_algorithm_get_name        (<link linkend="gnutls-pk-algorithm-t">gnutls_pk_algorithm_t</link> algorithm);</programlisting>
<para>
Convert a <link linkend="gnutls-pk-algorithm-t"><type>gnutls_pk_algorithm_t</type></link> value to a string.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>algorithm</parameter>&#160;:</term>
<listitem><simpara> is a pk algorithm
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a string that contains the name of the specified public
  key algorithm, or <link linkend="NULL--CAPS"><literal>NULL</literal></link>.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="GNUTLS-SIGN-RSA-SHA--CAPS" role="macro">
<title>GNUTLS_SIGN_RSA_SHA</title>
<indexterm zone="GNUTLS-SIGN-RSA-SHA--CAPS"><primary sortas="GNUTLS_SIGN_RSA_SHA">GNUTLS_SIGN_RSA_SHA</primary></indexterm><programlisting>#define GNUTLS_SIGN_RSA_SHA GNUTLS_SIGN_RSA_SHA1
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-SIGN-DSA-SHA--CAPS" role="macro">
<title>GNUTLS_SIGN_DSA_SHA</title>
<indexterm zone="GNUTLS-SIGN-DSA-SHA--CAPS"><primary sortas="GNUTLS_SIGN_DSA_SHA">GNUTLS_SIGN_DSA_SHA</primary></indexterm><programlisting>#define GNUTLS_SIGN_DSA_SHA GNUTLS_SIGN_DSA_SHA1
</programlisting>
<para>
</para></refsect2>
<refsect2 id="gnutls-sign-algorithm-t" role="enum">
<title>enum gnutls_sign_algorithm_t</title>
<indexterm zone="gnutls-sign-algorithm-t"><primary sortas="gnutls_sign_algorithm_t">gnutls_sign_algorithm_t</primary></indexterm><programlisting>  typedef enum
  {
    GNUTLS_SIGN_UNKNOWN = 0,
    GNUTLS_SIGN_RSA_SHA1 = 1,
    GNUTLS_SIGN_DSA_SHA1,
    GNUTLS_SIGN_RSA_MD5,
    GNUTLS_SIGN_RSA_MD2,
    GNUTLS_SIGN_RSA_RMD160,
    GNUTLS_SIGN_RSA_SHA256,
    GNUTLS_SIGN_RSA_SHA384,
    GNUTLS_SIGN_RSA_SHA512,
    GNUTLS_SIGN_RSA_SHA224
  } gnutls_sign_algorithm_t;
</programlisting>
<para>
</para></refsect2>
<refsect2 id="gnutls-sign-algorithm-get-name" role="function">
<title>gnutls_sign_algorithm_get_name ()</title>
<indexterm zone="gnutls-sign-algorithm-get-name"><primary sortas="gnutls_sign_algorithm_get_name">gnutls_sign_algorithm_get_name</primary></indexterm><programlisting>const <link linkend="char">char</link> *        gnutls_sign_algorithm_get_name      (<link linkend="gnutls-sign-algorithm-t">gnutls_sign_algorithm_t</link> sign);</programlisting>
<para>
Convert a <link linkend="gnutls-sign-algorithm-t"><type>gnutls_sign_algorithm_t</type></link> value to a string.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>sign</parameter>&#160;:</term>
<listitem><simpara> is a sign algorithm
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a string that contains the name of the specified sign
  algorithm, or <link linkend="NULL--CAPS"><literal>NULL</literal></link>.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-transport-ptr-t" role="typedef">
<title>gnutls_transport_ptr_t</title>
<indexterm zone="gnutls-transport-ptr-t"><primary sortas="gnutls_transport_ptr_t">gnutls_transport_ptr_t</primary></indexterm><programlisting>  typedef void *gnutls_transport_ptr_t;
</programlisting>
<para>
</para></refsect2>
<refsect2 id="gnutls-session-int" role="struct">
<title>struct gnutls_session_int</title>
<indexterm zone="gnutls-session-int"><primary sortas="gnutls_session_int">gnutls_session_int</primary></indexterm><programlisting>struct gnutls_session_int;</programlisting>
<para>
</para></refsect2>
<refsect2 id="gnutls-session-t" role="typedef">
<title>gnutls_session_t</title>
<indexterm zone="gnutls-session-t"><primary sortas="gnutls_session_t">gnutls_session_t</primary></indexterm><programlisting>  typedef struct gnutls_session_int *gnutls_session_t;
</programlisting>
<para>
</para></refsect2>
<refsect2 id="gnutls-dh-params-int" role="struct">
<title>struct gnutls_dh_params_int</title>
<indexterm zone="gnutls-dh-params-int"><primary sortas="gnutls_dh_params_int">gnutls_dh_params_int</primary></indexterm><programlisting>struct gnutls_dh_params_int;</programlisting>
<para>
</para></refsect2>
<refsect2 id="gnutls-dh-params-t" role="typedef">
<title>gnutls_dh_params_t</title>
<indexterm zone="gnutls-dh-params-t"><primary sortas="gnutls_dh_params_t">gnutls_dh_params_t</primary></indexterm><programlisting>  typedef struct gnutls_dh_params_int *gnutls_dh_params_t;
</programlisting>
<para>
</para></refsect2>
<refsect2 id="gnutls-x509-privkey-int" role="struct">
<title>struct gnutls_x509_privkey_int</title>
<indexterm zone="gnutls-x509-privkey-int"><primary sortas="gnutls_x509_privkey_int">gnutls_x509_privkey_int</primary></indexterm><programlisting>struct gnutls_x509_privkey_int;</programlisting>
<para>
</para></refsect2>
<refsect2 id="gnutls-rsa-params-t" role="typedef">
<title>gnutls_rsa_params_t</title>
<indexterm zone="gnutls-rsa-params-t"><primary sortas="gnutls_rsa_params_t">gnutls_rsa_params_t</primary></indexterm><programlisting>  typedef struct gnutls_x509_privkey_int *gnutls_rsa_params_t;
</programlisting>
<para>
</para></refsect2>
<refsect2 id="gnutls-priority-st" role="struct">
<title>struct gnutls_priority_st</title>
<indexterm zone="gnutls-priority-st"><primary sortas="gnutls_priority_st">gnutls_priority_st</primary></indexterm><programlisting>struct gnutls_priority_st;</programlisting>
<para>
</para></refsect2>
<refsect2 id="gnutls-priority-t" role="typedef">
<title>gnutls_priority_t</title>
<indexterm zone="gnutls-priority-t"><primary sortas="gnutls_priority_t">gnutls_priority_t</primary></indexterm><programlisting>  typedef struct gnutls_priority_st *gnutls_priority_t;
</programlisting>
<para>
</para></refsect2>
<refsect2 id="gnutls-init" role="function">
<title>gnutls_init ()</title>
<indexterm zone="gnutls-init"><primary sortas="gnutls_init">gnutls_init</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_init                         (<link linkend="gnutls-session-t">gnutls_session_t</link> *session,
                                                         <link linkend="gnutls-connection-end-t">gnutls_connection_end_t</link> con_end);</programlisting>
<para>
This function initializes the current session to null. Every
session must be initialized before use, so internal structures can
be allocated.  This function allocates structures which can only
be free'd by calling <link linkend="gnutls-deinit"><function>gnutls_deinit()</function></link>.  Returns zero on success.
</para>
<para>
<parameter>con_end</parameter> can be one of <link linkend="GNUTLS-CLIENT--CAPS"><literal>GNUTLS_CLIENT</literal></link> and <link linkend="GNUTLS-SERVER--CAPS"><literal>GNUTLS_SERVER</literal></link>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&#160;:</term>
<listitem><simpara> is a pointer to a <link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> structure.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>con_end</parameter>&#160;:</term>
<listitem><simpara> indicate if this session is to be used for server or client.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> <link linkend="GNUTLS-E-SUCCESS--CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> on success, or an error code.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-deinit" role="function">
<title>gnutls_deinit ()</title>
<indexterm zone="gnutls-deinit"><primary sortas="gnutls_deinit">gnutls_deinit</primary></indexterm><programlisting><link linkend="void">void</link>                gnutls_deinit                       (<link linkend="gnutls-session-t">gnutls_session_t</link> session);</programlisting>
<para>
This function clears all buffers associated with the <parameter>session</parameter>.
This function will also remove session data from the session
database if the session was terminated abnormally.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&#160;:</term>
<listitem><simpara> is a <link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> structure.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-bye" role="function">
<title>gnutls_bye ()</title>
<indexterm zone="gnutls-bye"><primary sortas="gnutls_bye">gnutls_bye</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_bye                          (<link linkend="gnutls-session-t">gnutls_session_t</link> session,
                                                         <link linkend="gnutls-close-request-t">gnutls_close_request_t</link> how);</programlisting>
<para>
Terminates the current TLS/SSL connection. The connection should
have been initiated using <link linkend="gnutls-handshake"><function>gnutls_handshake()</function></link>.  <parameter>how</parameter> should be one
of <link linkend="GNUTLS-SHUT-RDWR--CAPS"><literal>GNUTLS_SHUT_RDWR</literal></link>, <link linkend="GNUTLS-SHUT-WR--CAPS"><literal>GNUTLS_SHUT_WR</literal></link>.
</para>
<para>
In case of <link linkend="GNUTLS-SHUT-RDWR--CAPS"><literal>GNUTLS_SHUT_RDWR</literal></link> then the TLS connection gets
terminated and further receives and sends will be disallowed.  If
the return value is zero you may continue using the connection.
<link linkend="GNUTLS-SHUT-RDWR--CAPS"><literal>GNUTLS_SHUT_RDWR</literal></link> actually sends an alert containing a close
request and waits for the peer to reply with the same message.
</para>
<para>
In case of <link linkend="GNUTLS-SHUT-WR--CAPS"><literal>GNUTLS_SHUT_WR</literal></link> then the TLS connection gets terminated
and further sends will be disallowed. In order to reuse the
connection you should wait for an EOF from the peer.
<link linkend="GNUTLS-SHUT-WR--CAPS"><literal>GNUTLS_SHUT_WR</literal></link> sends an alert containing a close request.
</para>
<para>
Note that not all implementations will properly terminate a TLS
connection.  Some of them, usually for performance reasons, will
terminate only the underlying transport layer, thus causing a
transmission error to the peer.  This error cannot be
distinguished from a malicious party prematurely terminating the
session, thus this behavior is not recommended.
</para>
<para>
This function may also return <link linkend="GNUTLS-E-AGAIN--CAPS"><literal>GNUTLS_E_AGAIN</literal></link> or
<link linkend="GNUTLS-E-INTERRUPTED--CAPS"><literal>GNUTLS_E_INTERRUPTED</literal></link>; cf.  <link linkend="gnutls-record-get-direction"><function>gnutls_record_get_direction()</function></link>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&#160;:</term>
<listitem><simpara> is a <link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> structure.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>how</parameter>&#160;:</term>
<listitem><simpara> is an integer
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> <link linkend="GNUTLS-E-SUCCESS--CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> on success, or an error code, see
  function documentation for entire semantics.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-handshake" role="function">
<title>gnutls_handshake ()</title>
<indexterm zone="gnutls-handshake"><primary sortas="gnutls_handshake">gnutls_handshake</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_handshake                    (<link linkend="gnutls-session-t">gnutls_session_t</link> session);</programlisting>
<para>
This function does the handshake of the TLS/SSL protocol, and
initializes the TLS connection.
</para>
<para>
This function will fail if any problem is encountered, and will
return a negative error code. In case of a client, if the client
has asked to resume a session, but the server couldn't, then a
full handshake will be performed.
</para>
<para>
The non-fatal errors such as <link linkend="GNUTLS-E-AGAIN--CAPS"><literal>GNUTLS_E_AGAIN</literal></link> and
<link linkend="GNUTLS-E-INTERRUPTED--CAPS"><literal>GNUTLS_E_INTERRUPTED</literal></link> interrupt the handshake procedure, which
should be later be resumed.  Call this function again, until it
returns 0; cf.  <link linkend="gnutls-record-get-direction"><function>gnutls_record_get_direction()</function></link> and
<link linkend="gnutls-error-is-fatal"><function>gnutls_error_is_fatal()</function></link>.
</para>
<para>
If this function is called by a server after a rehandshake request
then <link linkend="GNUTLS-E-GOT-APPLICATION-DATA--CAPS"><literal>GNUTLS_E_GOT_APPLICATION_DATA</literal></link> or
<link linkend="GNUTLS-E-WARNING-ALERT-RECEIVED--CAPS"><literal>GNUTLS_E_WARNING_ALERT_RECEIVED</literal></link> may be returned.  Note that these
are non fatal errors, only in the specific case of a rehandshake.
Their meaning is that the client rejected the rehandshake request.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&#160;:</term>
<listitem><simpara> is a <link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> structure.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> <link linkend="GNUTLS-E-SUCCESS--CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> on success, otherwise an error.

</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-rehandshake" role="function">
<title>gnutls_rehandshake ()</title>
<indexterm zone="gnutls-rehandshake"><primary sortas="gnutls_rehandshake">gnutls_rehandshake</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_rehandshake                  (<link linkend="gnutls-session-t">gnutls_session_t</link> session);</programlisting>
<para>
This function will renegotiate security parameters with the
client.  This should only be called in case of a server.
</para>
<para>
This message informs the peer that we want to renegotiate
parameters (perform a handshake).
</para>
<para>
If this function succeeds (returns 0), you must call the
<link linkend="gnutls-handshake"><function>gnutls_handshake()</function></link> function in order to negotiate the new
parameters.
</para>
<para>
If the client does not wish to renegotiate parameters he will
should with an alert message, thus the return code will be
<link linkend="GNUTLS-E-WARNING-ALERT-RECEIVED--CAPS"><literal>GNUTLS_E_WARNING_ALERT_RECEIVED</literal></link> and the alert will be
<link linkend="GNUTLS-A-NO-RENEGOTIATION--CAPS"><literal>GNUTLS_A_NO_RENEGOTIATION</literal></link>.  A client may also choose to ignore
this message.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&#160;:</term>
<listitem><simpara> is a <link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> structure.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> <link linkend="GNUTLS-E-SUCCESS--CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> on success, otherwise an error.

</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-alert-get" role="function">
<title>gnutls_alert_get ()</title>
<indexterm zone="gnutls-alert-get"><primary sortas="gnutls_alert_get">gnutls_alert_get</primary></indexterm><programlisting><link linkend="gnutls-alert-description-t">gnutls_alert_description_t</link>  gnutls_alert_get            (<link linkend="gnutls-session-t">gnutls_session_t</link> session);</programlisting>
<para>
This function will return the last alert number received.  This
function should be called if <link linkend="GNUTLS-E-WARNING-ALERT-RECEIVED--CAPS"><literal>GNUTLS_E_WARNING_ALERT_RECEIVED</literal></link> or
<link linkend="GNUTLS-E-FATAL-ALERT-RECEIVED--CAPS"><literal>GNUTLS_E_FATAL_ALERT_RECEIVED</literal></link> has been returned by a gnutls
function.  The peer may send alerts if he thinks some things were
not right. Check gnutls.h for the available alert descriptions.
</para>
<para>
If no alert has been received the returned value is undefined.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&#160;:</term>
<listitem><simpara> is a <link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> structure.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> returns the last alert received, a
  <link linkend="gnutls-alert-description-t"><type>gnutls_alert_description_t</type></link> value.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-alert-send" role="function">
<title>gnutls_alert_send ()</title>
<indexterm zone="gnutls-alert-send"><primary sortas="gnutls_alert_send">gnutls_alert_send</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_alert_send                   (<link linkend="gnutls-session-t">gnutls_session_t</link> session,
                                                         <link linkend="gnutls-alert-level-t">gnutls_alert_level_t</link> level,
                                                         <link linkend="gnutls-alert-description-t">gnutls_alert_description_t</link> desc);</programlisting>
<para>
This function will send an alert to the peer in order to inform
him of something important (eg. his Certificate could not be verified).
If the alert level is Fatal then the peer is expected to close the
connection, otherwise he may ignore the alert and continue.
</para>
<para>
The error code of the underlying record send function will be
returned, so you may also receive <link linkend="GNUTLS-E-INTERRUPTED--CAPS"><literal>GNUTLS_E_INTERRUPTED</literal></link> or
<link linkend="GNUTLS-E-AGAIN--CAPS"><literal>GNUTLS_E_AGAIN</literal></link> as well.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&#160;:</term>
<listitem><simpara> is a <link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> structure.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>level</parameter>&#160;:</term>
<listitem><simpara> is the level of the alert
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>desc</parameter>&#160;:</term>
<listitem><simpara> is the alert description
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> On success, <link linkend="GNUTLS-E-SUCCESS--CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> (0) is returned, otherwise
  an error code is returned.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-alert-send-appropriate" role="function">
<title>gnutls_alert_send_appropriate ()</title>
<indexterm zone="gnutls-alert-send-appropriate"><primary sortas="gnutls_alert_send_appropriate">gnutls_alert_send_appropriate</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_alert_send_appropriate       (<link linkend="gnutls-session-t">gnutls_session_t</link> session,
                                                         <link linkend="int">int</link> err);</programlisting>
<para>
Sends an alert to the peer depending on the error code returned by
a gnutls function. This function will call <link linkend="gnutls-error-to-alert"><function>gnutls_error_to_alert()</function></link>
to determine the appropriate alert to send.
</para>
<para>
This function may also return <link linkend="GNUTLS-E-AGAIN--CAPS"><literal>GNUTLS_E_AGAIN</literal></link>, or
<link linkend="GNUTLS-E-INTERRUPTED--CAPS"><literal>GNUTLS_E_INTERRUPTED</literal></link>.
</para>
<para>
If the return value is <link linkend="GNUTLS-E-INVALID-REQUEST--CAPS"><literal>GNUTLS_E_INVALID_REQUEST</literal></link>, then no alert has
been sent to the peer.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&#160;:</term>
<listitem><simpara> is a <link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> structure.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>err</parameter>&#160;:</term>
<listitem><simpara> is an integer
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> On success, <link linkend="GNUTLS-E-SUCCESS--CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> (0) is returned, otherwise
  an error code is returned.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-alert-get-name" role="function">
<title>gnutls_alert_get_name ()</title>
<indexterm zone="gnutls-alert-get-name"><primary sortas="gnutls_alert_get_name">gnutls_alert_get_name</primary></indexterm><programlisting>const <link linkend="char">char</link> *        gnutls_alert_get_name               (<link linkend="gnutls-alert-description-t">gnutls_alert_description_t</link> alert);</programlisting>
<para>
This function will return a string that describes the given alert
number, or <link linkend="NULL--CAPS"><literal>NULL</literal></link>.  See <link linkend="gnutls-alert-get"><function>gnutls_alert_get()</function></link>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>alert</parameter>&#160;:</term>
<listitem><simpara> is an alert number <link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> structure.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> string corresponding to <link linkend="gnutls-alert-description-t"><type>gnutls_alert_description_t</type></link> value.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-cipher-get" role="function">
<title>gnutls_cipher_get ()</title>
<indexterm zone="gnutls-cipher-get"><primary sortas="gnutls_cipher_get">gnutls_cipher_get</primary></indexterm><programlisting><link linkend="gnutls-cipher-algorithm-t">gnutls_cipher_algorithm_t</link>  gnutls_cipher_get            (<link linkend="gnutls-session-t">gnutls_session_t</link> session);</programlisting>
<para>
Get currently used cipher.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&#160;:</term>
<listitem><simpara> is a <link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> structure.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> the currently used cipher, a <link linkend="gnutls-cipher-algorithm-t"><type>gnutls_cipher_algorithm_t</type></link>
  type.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-kx-get" role="function">
<title>gnutls_kx_get ()</title>
<indexterm zone="gnutls-kx-get"><primary sortas="gnutls_kx_get">gnutls_kx_get</primary></indexterm><programlisting><link linkend="gnutls-kx-algorithm-t">gnutls_kx_algorithm_t</link>  gnutls_kx_get                    (<link linkend="gnutls-session-t">gnutls_session_t</link> session);</programlisting>
<para>
Get currently used key exchange algorithm.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&#160;:</term>
<listitem><simpara> is a <link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> structure.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> the key exchange algorithm used in the last handshake, a
  <link linkend="gnutls-kx-algorithm-t"><type>gnutls_kx_algorithm_t</type></link> value.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-mac-get" role="function">
<title>gnutls_mac_get ()</title>
<indexterm zone="gnutls-mac-get"><primary sortas="gnutls_mac_get">gnutls_mac_get</primary></indexterm><programlisting><link linkend="gnutls-mac-algorithm-t">gnutls_mac_algorithm_t</link>  gnutls_mac_get                  (<link linkend="gnutls-session-t">gnutls_session_t</link> session);</programlisting>
<para>
Get currently used MAC algorithm.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&#160;:</term>
<listitem><simpara> is a <link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> structure.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> the currently used mac algorithm, a
  <link linkend="gnutls-mac-algorithm-t"><type>gnutls_mac_algorithm_t</type></link> value.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-compression-get" role="function">
<title>gnutls_compression_get ()</title>
<indexterm zone="gnutls-compression-get"><primary sortas="gnutls_compression_get">gnutls_compression_get</primary></indexterm><programlisting><link linkend="gnutls-compression-method-t">gnutls_compression_method_t</link>  gnutls_compression_get     (<link linkend="gnutls-session-t">gnutls_session_t</link> session);</programlisting>
<para>
Get currently used compression algorithm.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&#160;:</term>
<listitem><simpara> is a <link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> structure.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> the currently used compression method, a
  <link linkend="gnutls-compression-method-t"><type>gnutls_compression_method_t</type></link> value.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-certificate-type-get" role="function">
<title>gnutls_certificate_type_get ()</title>
<indexterm zone="gnutls-certificate-type-get"><primary sortas="gnutls_certificate_type_get">gnutls_certificate_type_get</primary></indexterm><programlisting><link linkend="gnutls-certificate-type-t">gnutls_certificate_type_t</link>  gnutls_certificate_type_get  (<link linkend="gnutls-session-t">gnutls_session_t</link> session);</programlisting>
<para>
The certificate type is by default X.509, unless it is negotiated
as a TLS extension.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&#160;:</term>
<listitem><simpara> is a <link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> structure.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> the currently used <link linkend="gnutls-certificate-type-t"><type>gnutls_certificate_type_t</type></link> certificate
  type.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-cipher-get-key-size" role="function">
<title>gnutls_cipher_get_key_size ()</title>
<indexterm zone="gnutls-cipher-get-key-size"><primary sortas="gnutls_cipher_get_key_size">gnutls_cipher_get_key_size</primary></indexterm><programlisting><link linkend="size-t">size_t</link>              gnutls_cipher_get_key_size          (<link linkend="gnutls-cipher-algorithm-t">gnutls_cipher_algorithm_t</link> algorithm);</programlisting>
<para>
Get key size for cipher.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>algorithm</parameter>&#160;:</term>
<listitem><simpara> is an encryption algorithm
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> length (in bytes) of the given cipher's key size, or 0 if
  the given cipher is invalid.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-mac-get-key-size" role="function">
<title>gnutls_mac_get_key_size ()</title>
<indexterm zone="gnutls-mac-get-key-size"><primary sortas="gnutls_mac_get_key_size">gnutls_mac_get_key_size</primary></indexterm><programlisting><link linkend="size-t">size_t</link>              gnutls_mac_get_key_size             (<link linkend="gnutls-mac-algorithm-t">gnutls_mac_algorithm_t</link> algorithm);</programlisting>
<para>
Get size of MAC key.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>algorithm</parameter>&#160;:</term>
<listitem><simpara> is an encryption algorithm
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> length (in bytes) of the given MAC key size, or 0 if the
  given MAC algorithm is invalid.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-cipher-get-name" role="function">
<title>gnutls_cipher_get_name ()</title>
<indexterm zone="gnutls-cipher-get-name"><primary sortas="gnutls_cipher_get_name">gnutls_cipher_get_name</primary></indexterm><programlisting>const <link linkend="char">char</link> *        gnutls_cipher_get_name              (<link linkend="gnutls-cipher-algorithm-t">gnutls_cipher_algorithm_t</link> algorithm);</programlisting>
<para>
Convert a <link linkend="gnutls-cipher-algorithm-t"><type>gnutls_cipher_algorithm_t</type></link> type to a string.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>algorithm</parameter>&#160;:</term>
<listitem><simpara> is an encryption algorithm
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a pointer to a string that contains the name of the
  specified cipher, or <link linkend="NULL--CAPS"><literal>NULL</literal></link>.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-mac-get-name" role="function">
<title>gnutls_mac_get_name ()</title>
<indexterm zone="gnutls-mac-get-name"><primary sortas="gnutls_mac_get_name">gnutls_mac_get_name</primary></indexterm><programlisting>const <link linkend="char">char</link> *        gnutls_mac_get_name                 (<link linkend="gnutls-mac-algorithm-t">gnutls_mac_algorithm_t</link> algorithm);</programlisting>
<para>
Convert a <link linkend="gnutls-mac-algorithm-t"><type>gnutls_mac_algorithm_t</type></link> value to a string.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>algorithm</parameter>&#160;:</term>
<listitem><simpara> is a MAC algorithm
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a string that contains the name of the specified MAC
  algorithm, or <link linkend="NULL--CAPS"><literal>NULL</literal></link>.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-compression-get-name" role="function">
<title>gnutls_compression_get_name ()</title>
<indexterm zone="gnutls-compression-get-name"><primary sortas="gnutls_compression_get_name">gnutls_compression_get_name</primary></indexterm><programlisting>const <link linkend="char">char</link> *        gnutls_compression_get_name         (<link linkend="gnutls-compression-method-t">gnutls_compression_method_t</link> algorithm);</programlisting>
<para>
Convert a <link linkend="gnutls-compression-method-t"><type>gnutls_compression_method_t</type></link> value to a string.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>algorithm</parameter>&#160;:</term>
<listitem><simpara> is a Compression algorithm
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a pointer to a string that contains the name of the
  specified compression algorithm, or <link linkend="NULL--CAPS"><literal>NULL</literal></link>.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-kx-get-name" role="function">
<title>gnutls_kx_get_name ()</title>
<indexterm zone="gnutls-kx-get-name"><primary sortas="gnutls_kx_get_name">gnutls_kx_get_name</primary></indexterm><programlisting>const <link linkend="char">char</link> *        gnutls_kx_get_name                  (<link linkend="gnutls-kx-algorithm-t">gnutls_kx_algorithm_t</link> algorithm);</programlisting>
<para>
Convert a <link linkend="gnutls-kx-algorithm-t"><type>gnutls_kx_algorithm_t</type></link> value to a string.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>algorithm</parameter>&#160;:</term>
<listitem><simpara> is a key exchange algorithm
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a pointer to a string that contains the name of the
  specified key exchange algorithm, or <link linkend="NULL--CAPS"><literal>NULL</literal></link>.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-certificate-type-get-name" role="function">
<title>gnutls_certificate_type_get_name ()</title>
<indexterm zone="gnutls-certificate-type-get-name"><primary sortas="gnutls_certificate_type_get_name">gnutls_certificate_type_get_name</primary></indexterm><programlisting>const <link linkend="char">char</link> *        gnutls_certificate_type_get_name    (<link linkend="gnutls-certificate-type-t">gnutls_certificate_type_t</link> type);</programlisting>
<para>
Convert a <link linkend="gnutls-certificate-type-t"><type>gnutls_certificate_type_t</type></link> type to a string.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>type</parameter>&#160;:</term>
<listitem><simpara> is a certificate type
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a string that contains the name of the specified
  certificate type, or <link linkend="NULL--CAPS"><literal>NULL</literal></link> in case of unknown types.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-pk-get-name" role="function" condition="since:2.6.0">
<title>gnutls_pk_get_name ()</title>
<indexterm zone="gnutls-pk-get-name" role="2.6.0"><primary sortas="gnutls_pk_get_name">gnutls_pk_get_name</primary></indexterm><programlisting>const <link linkend="char">char</link> *        gnutls_pk_get_name                  (<link linkend="gnutls-pk-algorithm-t">gnutls_pk_algorithm_t</link> algorithm);</programlisting>
<para>
Convert a <link linkend="gnutls-pk-algorithm-t"><type>gnutls_pk_algorithm_t</type></link> value to a string.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>algorithm</parameter>&#160;:</term>
<listitem><simpara> is a public key algorithm
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a pointer to a string that contains the name of the
  specified public key algorithm, or <link linkend="NULL--CAPS"><literal>NULL</literal></link>.

</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 2.6.0</para></refsect2>
<refsect2 id="gnutls-sign-get-name" role="function" condition="since:2.6.0">
<title>gnutls_sign_get_name ()</title>
<indexterm zone="gnutls-sign-get-name" role="2.6.0"><primary sortas="gnutls_sign_get_name">gnutls_sign_get_name</primary></indexterm><programlisting>const <link linkend="char">char</link> *        gnutls_sign_get_name                (<link linkend="gnutls-sign-algorithm-t">gnutls_sign_algorithm_t</link> algorithm);</programlisting>
<para>
Convert a <link linkend="gnutls-sign-algorithm-t"><type>gnutls_sign_algorithm_t</type></link> value to a string.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>algorithm</parameter>&#160;:</term>
<listitem><simpara> is a public key signature algorithm
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a pointer to a string that contains the name of the
  specified public key signature algorithm, or <link linkend="NULL--CAPS"><literal>NULL</literal></link>.

</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 2.6.0</para></refsect2>
<refsect2 id="gnutls-mac-get-id" role="function">
<title>gnutls_mac_get_id ()</title>
<indexterm zone="gnutls-mac-get-id"><primary sortas="gnutls_mac_get_id">gnutls_mac_get_id</primary></indexterm><programlisting><link linkend="gnutls-mac-algorithm-t">gnutls_mac_algorithm_t</link>  gnutls_mac_get_id               (const <link linkend="char">char</link> *name);</programlisting>
<para>
Convert a string to a <link linkend="gnutls-mac-algorithm-t"><type>gnutls_mac_algorithm_t</type></link> value.  The names are
compared in a case insensitive way.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>name</parameter>&#160;:</term>
<listitem><simpara> is a MAC algorithm name
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a <link linkend="gnutls-mac-algorithm-t"><type>gnutls_mac_algorithm_t</type></link> id of the specified MAC
  algorithm string, or <link linkend="GNUTLS-MAC-UNKNOWN--CAPS"><literal>GNUTLS_MAC_UNKNOWN</literal></link> on failures.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-compression-get-id" role="function">
<title>gnutls_compression_get_id ()</title>
<indexterm zone="gnutls-compression-get-id"><primary sortas="gnutls_compression_get_id">gnutls_compression_get_id</primary></indexterm><programlisting><link linkend="gnutls-compression-method-t">gnutls_compression_method_t</link>  gnutls_compression_get_id  (const <link linkend="char">char</link> *name);</programlisting>
<para>
The names are compared in a case insensitive way.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>name</parameter>&#160;:</term>
<listitem><simpara> is a compression method name
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> an id of the specified in a string compression method, or
  <link linkend="GNUTLS-COMP-UNKNOWN--CAPS"><literal>GNUTLS_COMP_UNKNOWN</literal></link> on error.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-cipher-get-id" role="function">
<title>gnutls_cipher_get_id ()</title>
<indexterm zone="gnutls-cipher-get-id"><primary sortas="gnutls_cipher_get_id">gnutls_cipher_get_id</primary></indexterm><programlisting><link linkend="gnutls-cipher-algorithm-t">gnutls_cipher_algorithm_t</link>  gnutls_cipher_get_id         (const <link linkend="char">char</link> *name);</programlisting>
<para>
The names are compared in a case insensitive way.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>name</parameter>&#160;:</term>
<listitem><simpara> is a MAC algorithm name
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> return a <link linkend="gnutls-cipher-algorithm-t"><type>gnutls_cipher_algorithm_t</type></link> value corresponding to
  the specified cipher, or <link linkend="GNUTLS-CIPHER-UNKNOWN--CAPS"><literal>GNUTLS_CIPHER_UNKNOWN</literal></link> on error.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-kx-get-id" role="function">
<title>gnutls_kx_get_id ()</title>
<indexterm zone="gnutls-kx-get-id"><primary sortas="gnutls_kx_get_id">gnutls_kx_get_id</primary></indexterm><programlisting><link linkend="gnutls-kx-algorithm-t">gnutls_kx_algorithm_t</link>  gnutls_kx_get_id                 (const <link linkend="char">char</link> *name);</programlisting>
<para>
Convert a string to a <link linkend="gnutls-kx-algorithm-t"><type>gnutls_kx_algorithm_t</type></link> value.  The names are
compared in a case insensitive way.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>name</parameter>&#160;:</term>
<listitem><simpara> is a KX name
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> an id of the specified KX algorithm, or <link linkend="GNUTLS-KX-UNKNOWN--CAPS"><literal>GNUTLS_KX_UNKNOWN</literal></link>
  on error.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-protocol-get-id" role="function">
<title>gnutls_protocol_get_id ()</title>
<indexterm zone="gnutls-protocol-get-id"><primary sortas="gnutls_protocol_get_id">gnutls_protocol_get_id</primary></indexterm><programlisting><link linkend="gnutls-protocol-t">gnutls_protocol_t</link>   gnutls_protocol_get_id              (const <link linkend="char">char</link> *name);</programlisting>
<para>
The names are compared in a case insensitive way.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>name</parameter>&#160;:</term>
<listitem><simpara> is a protocol name
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> an id of the specified protocol, or
<link linkend="GNUTLS-VERSION-UNKNOWN--CAPS"><literal>GNUTLS_VERSION_UNKNOWN</literal></link> on error.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-certificate-type-get-id" role="function">
<title>gnutls_certificate_type_get_id ()</title>
<indexterm zone="gnutls-certificate-type-get-id"><primary sortas="gnutls_certificate_type_get_id">gnutls_certificate_type_get_id</primary></indexterm><programlisting><link linkend="gnutls-certificate-type-t">gnutls_certificate_type_t</link>  gnutls_certificate_type_get_id
                                                        (const <link linkend="char">char</link> *name);</programlisting>
<para>
The names are compared in a case insensitive way.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>name</parameter>&#160;:</term>
<listitem><simpara> is a certificate type name
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a <link linkend="gnutls-certificate-type-t"><type>gnutls_certificate_type_t</type></link> for the specified in a
  string certificate type, or <link linkend="GNUTLS-CRT-UNKNOWN--CAPS"><literal>GNUTLS_CRT_UNKNOWN</literal></link> on error.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-pk-get-id" role="function" condition="since:2.6.0">
<title>gnutls_pk_get_id ()</title>
<indexterm zone="gnutls-pk-get-id" role="2.6.0"><primary sortas="gnutls_pk_get_id">gnutls_pk_get_id</primary></indexterm><programlisting><link linkend="gnutls-pk-algorithm-t">gnutls_pk_algorithm_t</link>  gnutls_pk_get_id                 (const <link linkend="char">char</link> *name);</programlisting>
<para>
Convert a string to a <link linkend="gnutls-pk-algorithm-t"><type>gnutls_pk_algorithm_t</type></link> value.  The names are
compared in a case insensitive way.  For example,
gnutls_pk_get_id("RSA") will return <link linkend="GNUTLS-PK-RSA--CAPS"><literal>GNUTLS_PK_RSA</literal></link>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>name</parameter>&#160;:</term>
<listitem><simpara> is a string containing a public key algorithm name.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a <link linkend="gnutls-pk-algorithm-t"><type>gnutls_pk_algorithm_t</type></link> id of the specified public key
  algorithm string, or <link linkend="GNUTLS-PK-UNKNOWN--CAPS"><literal>GNUTLS_PK_UNKNOWN</literal></link> on failures.

</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 2.6.0</para></refsect2>
<refsect2 id="gnutls-sign-get-id" role="function">
<title>gnutls_sign_get_id ()</title>
<indexterm zone="gnutls-sign-get-id"><primary sortas="gnutls_sign_get_id">gnutls_sign_get_id</primary></indexterm><programlisting><link linkend="gnutls-sign-algorithm-t">gnutls_sign_algorithm_t</link>  gnutls_sign_get_id             (const <link linkend="char">char</link> *name);</programlisting>
<para>
The names are compared in a case insensitive way.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>name</parameter>&#160;:</term>
<listitem><simpara> is a MAC algorithm name
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> return a <link linkend="gnutls-sign-algorithm-t"><type>gnutls_sign_algorithm_t</type></link> value corresponding to
  the specified cipher, or <link linkend="GNUTLS-SIGN-UNKNOWN--CAPS"><literal>GNUTLS_SIGN_UNKNOWN</literal></link> on error.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-cipher-list" role="function">
<title>gnutls_cipher_list ()</title>
<indexterm zone="gnutls-cipher-list"><primary sortas="gnutls_cipher_list">gnutls_cipher_list</primary></indexterm><programlisting>const <link linkend="gnutls-cipher-algorithm-t">gnutls_cipher_algorithm_t</link> * gnutls_cipher_list    (void);</programlisting>
<para>
Get a list of supported cipher algorithms.  Note that not
necessarily all ciphers are supported as TLS cipher suites.  For
example, DES is not supported as a cipher suite, but is supported
for other purposes (e.g., PKCS<link linkend="8--CAPS"><type>8</type></link> or similar).</para>
<para>
</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a zero-terminated list of <link linkend="gnutls-cipher-algorithm-t"><type>gnutls_cipher_algorithm_t</type></link>
  integers indicating the available ciphers.

</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-mac-list" role="function">
<title>gnutls_mac_list ()</title>
<indexterm zone="gnutls-mac-list"><primary sortas="gnutls_mac_list">gnutls_mac_list</primary></indexterm><programlisting>const <link linkend="gnutls-mac-algorithm-t">gnutls_mac_algorithm_t</link> * gnutls_mac_list          (void);</programlisting>
<para>
Get a list of hash algorithms for use as MACs.  Note that not
necessarily all MACs are supported in TLS cipher suites.  For
example, MD2 is not supported as a cipher suite, but is supported
for other purposes (e.g., X.509 signature verification or similar).</para>
<para>
</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> Return a zero-terminated list of <link linkend="gnutls-mac-algorithm-t"><type>gnutls_mac_algorithm_t</type></link>
  integers indicating the available MACs.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-compression-list" role="function">
<title>gnutls_compression_list ()</title>
<indexterm zone="gnutls-compression-list"><primary sortas="gnutls_compression_list">gnutls_compression_list</primary></indexterm><programlisting>const <link linkend="gnutls-compression-method-t">gnutls_compression_method_t</link> * gnutls_compression_list
                                                        (void);</programlisting>
<para>
Get a list of compression methods.  Note that to be able to use LZO
compression, you must link to libgnutls-extra and call
<link linkend="gnutls-global-init-extra"><function>gnutls_global_init_extra()</function></link>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a zero-terminated list of <link linkend="gnutls-compression-method-t"><type>gnutls_compression_method_t</type></link>
  integers indicating the available compression methods.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-protocol-list" role="function">
<title>gnutls_protocol_list ()</title>
<indexterm zone="gnutls-protocol-list"><primary sortas="gnutls_protocol_list">gnutls_protocol_list</primary></indexterm><programlisting>const <link linkend="gnutls-protocol-t">gnutls_protocol_t</link> * gnutls_protocol_list          (void);</programlisting>
<para>
Get a list of supported protocols, e.g. SSL 3.0, TLS 1.0 etc.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a zero-terminated list of <link linkend="gnutls-protocol-t"><type>gnutls_protocol_t</type></link> integers
indicating the available protocols.

</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-certificate-type-list" role="function">
<title>gnutls_certificate_type_list ()</title>
<indexterm zone="gnutls-certificate-type-list"><primary sortas="gnutls_certificate_type_list">gnutls_certificate_type_list</primary></indexterm><programlisting>const <link linkend="gnutls-certificate-type-t">gnutls_certificate_type_t</link> * gnutls_certificate_type_list
                                                        (void);</programlisting>
<para>
Get a list of certificate types.  Note that to be able to use
OpenPGP certificates, you must link to libgnutls-extra and call
<link linkend="gnutls-global-init-extra"><function>gnutls_global_init_extra()</function></link>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a zero-terminated list of <link linkend="gnutls-certificate-type-t"><type>gnutls_certificate_type_t</type></link>
  integers indicating the available certificate types.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-kx-list" role="function">
<title>gnutls_kx_list ()</title>
<indexterm zone="gnutls-kx-list"><primary sortas="gnutls_kx_list">gnutls_kx_list</primary></indexterm><programlisting>const <link linkend="gnutls-kx-algorithm-t">gnutls_kx_algorithm_t</link> * gnutls_kx_list            (void);</programlisting>
<para>
Get a list of supported key exchange algorithms.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a zero-terminated list of <link linkend="gnutls-kx-algorithm-t"><type>gnutls_kx_algorithm_t</type></link> integers
indicating the available key exchange algorithms.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-pk-list" role="function" condition="since:2.6.0">
<title>gnutls_pk_list ()</title>
<indexterm zone="gnutls-pk-list" role="2.6.0"><primary sortas="gnutls_pk_list">gnutls_pk_list</primary></indexterm><programlisting>const <link linkend="gnutls-pk-algorithm-t">gnutls_pk_algorithm_t</link> * gnutls_pk_list            (void);</programlisting>
<para>
Get a list of supported public key algorithms.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a zero-terminated list of <link linkend="gnutls-pk-algorithm-t"><type>gnutls_pk_algorithm_t</type></link> integers
  indicating the available ciphers.

</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 2.6.0</para></refsect2>
<refsect2 id="gnutls-sign-list" role="function">
<title>gnutls_sign_list ()</title>
<indexterm zone="gnutls-sign-list"><primary sortas="gnutls_sign_list">gnutls_sign_list</primary></indexterm><programlisting>const <link linkend="gnutls-sign-algorithm-t">gnutls_sign_algorithm_t</link> * gnutls_sign_list        (void);</programlisting>
<para>
Get a list of supported public key signature algorithms.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a zero-terminated list of <link linkend="gnutls-sign-algorithm-t"><type>gnutls_sign_algorithm_t</type></link>
  integers indicating the available ciphers.

</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-cipher-suite-info" role="function">
<title>gnutls_cipher_suite_info ()</title>
<indexterm zone="gnutls-cipher-suite-info"><primary sortas="gnutls_cipher_suite_info">gnutls_cipher_suite_info</primary></indexterm><programlisting>const <link linkend="char">char</link> *        gnutls_cipher_suite_info            (<link linkend="size-t">size_t</link> idx,
                                                         <link linkend="char">char</link> *cs_id,
                                                         <link linkend="gnutls-kx-algorithm-t">gnutls_kx_algorithm_t</link> *kx,
                                                         <link linkend="gnutls-cipher-algorithm-t">gnutls_cipher_algorithm_t</link> *cipher,
                                                         <link linkend="gnutls-mac-algorithm-t">gnutls_mac_algorithm_t</link> *mac,
                                                         <link linkend="gnutls-protocol-t">gnutls_protocol_t</link> *version);</programlisting>
<para>
Get information about supported cipher suites.  Use the function
iteratively to get information about all supported cipher suites.
Call with idx=0 to get information about first cipher suite, then
idx=1 and so on until the function returns NULL.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>idx</parameter>&#160;:</term>
<listitem><simpara> index of cipher suite to get information about, starts on 0.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>cs_id</parameter>&#160;:</term>
<listitem><simpara> output buffer with room for 2 bytes, indicating cipher suite value
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>kx</parameter>&#160;:</term>
<listitem><simpara> output variable indicating key exchange algorithm, or <link linkend="NULL--CAPS"><literal>NULL</literal></link>.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>cipher</parameter>&#160;:</term>
<listitem><simpara> output variable indicating cipher, or <link linkend="NULL--CAPS"><literal>NULL</literal></link>.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>mac</parameter>&#160;:</term>
<listitem><simpara> output variable indicating MAC algorithm, or <link linkend="NULL--CAPS"><literal>NULL</literal></link>.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>version</parameter>&#160;:</term>
<listitem><simpara> output variable indicating TLS protocol version, or <link linkend="NULL--CAPS"><literal>NULL</literal></link>.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> the name of <parameter>idx</parameter> cipher suite, and set the information
about the cipher suite in the output variables.  If <parameter>idx</parameter> is out of
bounds, <link linkend="NULL--CAPS"><literal>NULL</literal></link> is returned.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-error-is-fatal" role="function">
<title>gnutls_error_is_fatal ()</title>
<indexterm zone="gnutls-error-is-fatal"><primary sortas="gnutls_error_is_fatal">gnutls_error_is_fatal</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_error_is_fatal               (<link linkend="int">int</link> error);</programlisting>
<para>
If a GnuTLS function returns a negative value you may feed that
value to this function to see if the error condition is fatal.
</para>
<para>
Note that you may want to check the error code manually, since some
non-fatal errors to the protocol may be fatal for you program.
</para>
<para>
This function is only useful if you are dealing with errors from
the record layer or the handshake layer.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>error</parameter>&#160;:</term>
<listitem><simpara> is a GnuTLS error code, a negative value
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> 1 if the error code is fatal, for positive <parameter>error</parameter> values,
  0 is returned.  For unknown <parameter>error</parameter> values, -1 is returned.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-error-to-alert" role="function">
<title>gnutls_error_to_alert ()</title>
<indexterm zone="gnutls-error-to-alert"><primary sortas="gnutls_error_to_alert">gnutls_error_to_alert</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_error_to_alert               (<link linkend="int">int</link> err,
                                                         <link linkend="int">int</link> *level);</programlisting>
<para>
Get an alert depending on the error code returned by a gnutls
function.  All alerts sent by this function should be considered
fatal.  The only exception is when <parameter>err</parameter> is <link linkend="GNUTLS-E-REHANDSHAKE--CAPS"><literal>GNUTLS_E_REHANDSHAKE</literal></link>,
where a warning alert should be sent to the peer indicating that no
renegotiation will be performed.
</para>
<para>
If there is no mapping to a valid alert the alert to indicate
internal error is returned.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>err</parameter>&#160;:</term>
<listitem><simpara> is a negative integer
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>level</parameter>&#160;:</term>
<listitem><simpara> the alert level will be stored there
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> the alert code to use for a particular error code.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-perror" role="function">
<title>gnutls_perror ()</title>
<indexterm zone="gnutls-perror"><primary sortas="gnutls_perror">gnutls_perror</primary></indexterm><programlisting><link linkend="void">void</link>                gnutls_perror                       (<link linkend="int">int</link> error);</programlisting>
<para>
This function is like <link linkend="perror"><function>perror()</function></link>. The only difference is that it
accepts an error number returned by a gnutls function.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>error</parameter>&#160;:</term>
<listitem><simpara> is a GnuTLS error code, a negative value
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-strerror" role="function">
<title>gnutls_strerror ()</title>
<indexterm zone="gnutls-strerror"><primary sortas="gnutls_strerror">gnutls_strerror</primary></indexterm><programlisting>const <link linkend="char">char</link> *        gnutls_strerror                     (<link linkend="int">int</link> error);</programlisting>
<para>
This function is similar to <link linkend="strerror"><function>strerror()</function></link>.  Differences: it accepts an
error number returned by a gnutls function; In case of an unknown
error a descriptive string is sent instead of NULL.
</para>
<para>
Error codes are always a negative value.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>error</parameter>&#160;:</term>
<listitem><simpara> is a GnuTLS error code, a negative value
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> A string explaining the GnuTLS error message.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-strerror-name" role="function" condition="since:2.6.0">
<title>gnutls_strerror_name ()</title>
<indexterm zone="gnutls-strerror-name" role="2.6.0"><primary sortas="gnutls_strerror_name">gnutls_strerror_name</primary></indexterm><programlisting>const <link linkend="char">char</link> *        gnutls_strerror_name                (<link linkend="int">int</link> error);</programlisting>
<para>
Return the GnuTLS error code define as a string.  For example,
gnutls_strerror_name (GNUTLS_E_DH_PRIME_UNACCEPTABLE) will return
the string "GNUTLS_E_DH_PRIME_UNACCEPTABLE".</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>error</parameter>&#160;:</term>
<listitem><simpara> is an error returned by a gnutls function.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> A string corresponding to the symbol name of the error
code.

</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 2.6.0</para></refsect2>
<refsect2 id="gnutls-handshake-set-private-extensions" role="function">
<title>gnutls_handshake_set_private_extensions ()</title>
<indexterm zone="gnutls-handshake-set-private-extensions"><primary sortas="gnutls_handshake_set_private_extensions">gnutls_handshake_set_private_extensions</primary></indexterm><programlisting><link linkend="void">void</link>                gnutls_handshake_set_private_extensions
                                                        (<link linkend="gnutls-session-t">gnutls_session_t</link> session,
                                                         <link linkend="int">int</link> allow);</programlisting>
<para>
This function will enable or disable the use of private cipher
suites (the ones that start with 0xFF).  By default or if <parameter>allow</parameter>
is 0 then these cipher suites will not be advertized nor used.
</para>
<para>
Unless this function is called with the option to allow (1), then
no compression algorithms, like LZO.  That is because these
algorithms are not yet defined in any RFC or even internet draft.
</para>
<para>
Enabling the private ciphersuites when talking to other than
gnutls servers and clients may cause interoperability problems.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&#160;:</term>
<listitem><simpara> is a <link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> structure.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>allow</parameter>&#160;:</term>
<listitem><simpara> is an integer (0 or 1)
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-handshake-get-last-out" role="function">
<title>gnutls_handshake_get_last_out ()</title>
<indexterm zone="gnutls-handshake-get-last-out"><primary sortas="gnutls_handshake_get_last_out">gnutls_handshake_get_last_out</primary></indexterm><programlisting><link linkend="gnutls-handshake-description-t">gnutls_handshake_description_t</link>  gnutls_handshake_get_last_out
                                                        (<link linkend="gnutls-session-t">gnutls_session_t</link> session);</programlisting>
<para>
This function is only useful to check where the last performed
handshake failed.  If the previous handshake succeed or was not
performed at all then no meaningful value will be returned.
</para>
<para>
Check <link linkend="gnutls-handshake-description-t"><literal>gnutls_handshake_description_t</literal></link> in gnutls.h for the
available handshake descriptions.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&#160;:</term>
<listitem><simpara> is a <link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> structure.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> the last handshake message type sent, a
<link linkend="gnutls-handshake-description-t"><literal>gnutls_handshake_description_t</literal></link>.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-handshake-get-last-in" role="function">
<title>gnutls_handshake_get_last_in ()</title>
<indexterm zone="gnutls-handshake-get-last-in"><primary sortas="gnutls_handshake_get_last_in">gnutls_handshake_get_last_in</primary></indexterm><programlisting><link linkend="gnutls-handshake-description-t">gnutls_handshake_description_t</link>  gnutls_handshake_get_last_in
                                                        (<link linkend="gnutls-session-t">gnutls_session_t</link> session);</programlisting>
<para>
This function is only useful to check where the last performed
handshake failed.  If the previous handshake succeed or was not
performed at all then no meaningful value will be returned.
</para>
<para>
Check <link linkend="gnutls-handshake-description-t"><literal>gnutls_handshake_description_t</literal></link> in gnutls.h for the
available handshake descriptions.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&#160;:</term>
<listitem><simpara> is a <link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> structure.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> the last handshake message type received, a
<link linkend="gnutls-handshake-description-t"><literal>gnutls_handshake_description_t</literal></link>.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-record-send" role="function">
<title>gnutls_record_send ()</title>
<indexterm zone="gnutls-record-send"><primary sortas="gnutls_record_send">gnutls_record_send</primary></indexterm><programlisting><link linkend="ssize-t">ssize_t</link>             gnutls_record_send                  (<link linkend="gnutls-session-t">gnutls_session_t</link> session,
                                                         const <link linkend="void">void</link> *data,
                                                         <link linkend="size-t">size_t</link> sizeofdata);</programlisting>
<para>
This function has the similar semantics with <link linkend="send"><function>send()</function></link>.  The only
difference is that it accepts a GnuTLS session, and uses different
error codes.
</para>
<para>
Note that if the send buffer is full, <link linkend="send"><function>send()</function></link> will block this
function.  See the <link linkend="send"><function>send()</function></link> documentation for full information.  You
can replace the default push function by using
<link linkend="gnutls-transport-set-ptr2"><function>gnutls_transport_set_ptr2()</function></link> with a call to <link linkend="send"><function>send()</function></link> with a
MSG_DONTWAIT flag if blocking is a problem.
</para>
<para>
If the EINTR is returned by the internal push function (the
default is <link linkend="send"><function>send()</function></link>} then <link linkend="GNUTLS-E-INTERRUPTED--CAPS"><literal>GNUTLS_E_INTERRUPTED</literal></link> will be returned. If
<link linkend="GNUTLS-E-INTERRUPTED--CAPS"><literal>GNUTLS_E_INTERRUPTED</literal></link> or <link linkend="GNUTLS-E-AGAIN--CAPS"><literal>GNUTLS_E_AGAIN</literal></link> is returned, you must
call this function again, with the same parameters; alternatively
you could provide a <link linkend="NULL--CAPS"><literal>NULL</literal></link> pointer for data, and 0 for
size. cf. <link linkend="gnutls-record-get-direction"><function>gnutls_record_get_direction()</function></link>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&#160;:</term>
<listitem><simpara> is a <link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> structure.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>data</parameter>&#160;:</term>
<listitem><simpara> contains the data to send
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>sizeofdata</parameter>&#160;:</term>
<listitem><simpara> is the length of the data
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> the number of bytes sent, or a negative error code.  The
number of bytes sent might be less than <parameter>sizeofdata</parameter>.  The maximum
number of bytes this function can send in a single call depends on
the negotiated maximum record size.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-record-recv" role="function">
<title>gnutls_record_recv ()</title>
<indexterm zone="gnutls-record-recv"><primary sortas="gnutls_record_recv">gnutls_record_recv</primary></indexterm><programlisting><link linkend="ssize-t">ssize_t</link>             gnutls_record_recv                  (<link linkend="gnutls-session-t">gnutls_session_t</link> session,
                                                         <link linkend="void">void</link> *data,
                                                         <link linkend="size-t">size_t</link> sizeofdata);</programlisting>
<para>
This function has the similar semantics with <link linkend="recv"><function>recv()</function></link>.  The only
difference is that it accepts a GnuTLS session, and uses different
error codes.
</para>
<para>
In the special case that a server requests a renegotiation, the
client may receive an error code of <link linkend="GNUTLS-E-REHANDSHAKE--CAPS"><literal>GNUTLS_E_REHANDSHAKE</literal></link>.  This
message may be simply ignored, replied with an alert
<link linkend="GNUTLS-A-NO-RENEGOTIATION--CAPS"><literal>GNUTLS_A_NO_RENEGOTIATION</literal></link>, or replied with a new handshake,
depending on the client's will.
</para>
<para>
If <link linkend="EINTR--CAPS"><literal>EINTR</literal></link> is returned by the internal push function (the default
is <link linkend="recv"><function>recv()</function></link>) then <link linkend="GNUTLS-E-INTERRUPTED--CAPS"><literal>GNUTLS_E_INTERRUPTED</literal></link> will be returned.  If
<link linkend="GNUTLS-E-INTERRUPTED--CAPS"><literal>GNUTLS_E_INTERRUPTED</literal></link> or <link linkend="GNUTLS-E-AGAIN--CAPS"><literal>GNUTLS_E_AGAIN</literal></link> is returned, you must
call this function again to get the data.  See also
<link linkend="gnutls-record-get-direction"><function>gnutls_record_get_direction()</function></link>.
</para>
<para>
A server may also receive <link linkend="GNUTLS-E-REHANDSHAKE--CAPS"><literal>GNUTLS_E_REHANDSHAKE</literal></link> when a client has
initiated a handshake. In that case the server can only initiate a
handshake or terminate the connection.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&#160;:</term>
<listitem><simpara> is a <link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> structure.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>data</parameter>&#160;:</term>
<listitem><simpara> the buffer that the data will be read into
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>sizeofdata</parameter>&#160;:</term>
<listitem><simpara> the number of requested bytes
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> the number of bytes received and zero on EOF.  A negative
error code is returned in case of an error.  The number of bytes
received might be less than <parameter>sizeofdata</parameter>.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-read" role="macro">
<title>gnutls_read</title>
<indexterm zone="gnutls-read"><primary sortas="gnutls_read">gnutls_read</primary></indexterm><programlisting>#define gnutls_read gnutls_record_recv
</programlisting>
<para>
</para></refsect2>
<refsect2 id="gnutls-write" role="macro">
<title>gnutls_write</title>
<indexterm zone="gnutls-write"><primary sortas="gnutls_write">gnutls_write</primary></indexterm><programlisting>#define gnutls_write gnutls_record_send
</programlisting>
<para>
</para></refsect2>
<refsect2 id="gnutls-session-enable-compatibility-mode" role="function">
<title>gnutls_session_enable_compatibility_mode ()</title>
<indexterm zone="gnutls-session-enable-compatibility-mode"><primary sortas="gnutls_session_enable_compatibility_mode">gnutls_session_enable_compatibility_mode</primary></indexterm><programlisting><link linkend="void">void</link>                gnutls_session_enable_compatibility_mode
                                                        (<link linkend="gnutls-session-t">gnutls_session_t</link> session);</programlisting>
<para>
This function can be used to disable certain (security) features in
TLS in order to maintain maximum compatibility with buggy
clients. It is equivalent to calling:
<link linkend="gnutls-record-disable-padding"><function>gnutls_record_disable_padding()</function></link>
</para>
<para>
Normally only servers that require maximum compatibility with
everything out there, need to call this function.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&#160;:</term>
<listitem><simpara> is a <link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> structure.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-record-disable-padding" role="function">
<title>gnutls_record_disable_padding ()</title>
<indexterm zone="gnutls-record-disable-padding"><primary sortas="gnutls_record_disable_padding">gnutls_record_disable_padding</primary></indexterm><programlisting><link linkend="void">void</link>                gnutls_record_disable_padding       (<link linkend="gnutls-session-t">gnutls_session_t</link> session);</programlisting>
<para>
Used to disabled padding in TLS 1.0 and above.  Normally you do
not need to use this function, but there are buggy clients that
complain if a server pads the encrypted data.  This of course will
disable protection against statistical attacks on the data.
</para>
<para>
Normally only servers that require maximum compatibility with everything
out there, need to call this function.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&#160;:</term>
<listitem><simpara> is a <link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> structure.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-record-get-direction" role="function">
<title>gnutls_record_get_direction ()</title>
<indexterm zone="gnutls-record-get-direction"><primary sortas="gnutls_record_get_direction">gnutls_record_get_direction</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_record_get_direction         (<link linkend="gnutls-session-t">gnutls_session_t</link> session);</programlisting>
<para>
This function provides information about the internals of the
record protocol and is only useful if a prior gnutls function call
(e.g.  <link linkend="gnutls-handshake"><function>gnutls_handshake()</function></link>) was interrupted for some reason, that
is, if a function returned <link linkend="GNUTLS-E-INTERRUPTED--CAPS"><literal>GNUTLS_E_INTERRUPTED</literal></link> or
<link linkend="GNUTLS-E-AGAIN--CAPS"><literal>GNUTLS_E_AGAIN</literal></link>.  In such a case, you might want to call <link linkend="select"><function>select()</function></link>
or <link linkend="poll"><function>poll()</function></link> before calling the interrupted gnutls function again.  To
tell you whether a file descriptor should be selected for either
reading or writing, <link linkend="gnutls-record-get-direction"><function>gnutls_record_get_direction()</function></link> returns 0 if the
interrupted function was trying to read data, and 1 if it was
trying to write data.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&#160;:</term>
<listitem><simpara> is a <link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> structure.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> 0 if trying to read data, 1 if trying to write data.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-record-get-max-size" role="function">
<title>gnutls_record_get_max_size ()</title>
<indexterm zone="gnutls-record-get-max-size"><primary sortas="gnutls_record_get_max_size">gnutls_record_get_max_size</primary></indexterm><programlisting><link linkend="size-t">size_t</link>              gnutls_record_get_max_size          (<link linkend="gnutls-session-t">gnutls_session_t</link> session);</programlisting>
<para>
Get the record size.  The maximum record size is negotiated by the
client after the first handshake message.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&#160;:</term>
<listitem><simpara> is a <link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> structure.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> The maximum record packet size in this connection.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-record-set-max-size" role="function">
<title>gnutls_record_set_max_size ()</title>
<indexterm zone="gnutls-record-set-max-size"><primary sortas="gnutls_record_set_max_size">gnutls_record_set_max_size</primary></indexterm><programlisting><link linkend="ssize-t">ssize_t</link>             gnutls_record_set_max_size          (<link linkend="gnutls-session-t">gnutls_session_t</link> session,
                                                         <link linkend="size-t">size_t</link> size);</programlisting>
<para>
This function sets the maximum record packet size in this
connection.  This property can only be set to clients.  The server
may choose not to accept the requested size.
</para>
<para>
Acceptable values are 512(=2^9), 1024(=2^10), 2048(=2^11) and
4096(=2^12).  The requested record size does get in effect
immediately only while sending data. The receive part will take
effect after a successful handshake.
</para>
<para>
This function uses a TLS extension called 'max record size'.  Not
all TLS implementations use or even understand this extension.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&#160;:</term>
<listitem><simpara> is a <link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> structure.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>size</parameter>&#160;:</term>
<listitem><simpara> is the new size
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> On success, <link linkend="GNUTLS-E-SUCCESS--CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> (zero) is returned,
  otherwise an error code is returned.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-record-check-pending" role="function">
<title>gnutls_record_check_pending ()</title>
<indexterm zone="gnutls-record-check-pending"><primary sortas="gnutls_record_check_pending">gnutls_record_check_pending</primary></indexterm><programlisting><link linkend="size-t">size_t</link>              gnutls_record_check_pending         (<link linkend="gnutls-session-t">gnutls_session_t</link> session);</programlisting>
<para>
This function checks if there are any data to receive in the gnutls
buffers.
</para>
<para>
Notice that you may also use <link linkend="select"><function>select()</function></link> to check for data in a TCP
connection, instead of this function.  GnuTLS leaves some data in
the tcp buffer in order for select to work.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&#160;:</term>
<listitem><simpara> is a <link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> structure.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> the size of that data or 0.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-prf" role="function">
<title>gnutls_prf ()</title>
<indexterm zone="gnutls-prf"><primary sortas="gnutls_prf">gnutls_prf</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_prf                          (<link linkend="gnutls-session-t">gnutls_session_t</link> session,
                                                         <link linkend="size-t">size_t</link> label_size,
                                                         const <link linkend="char">char</link> *label,
                                                         <link linkend="int">int</link> server_random_first,
                                                         <link linkend="size-t">size_t</link> extra_size,
                                                         const <link linkend="char">char</link> *extra,
                                                         <link linkend="size-t">size_t</link> outsize,
                                                         <link linkend="char">char</link> *out);</programlisting>
<para>
Apply the TLS Pseudo-Random-Function (PRF) using the master secret
on some data, seeded with the client and server random fields.
</para>
<para>
The <parameter>label</parameter> variable usually contain a string denoting the purpose
for the generated data.  The <parameter>server_random_first</parameter> indicate whether
the client random field or the server random field should be first
in the seed.  Non-0 indicate that the server random field is first,
0 that the client random field is first.
</para>
<para>
The <parameter>extra</parameter> variable can be used to add more data to the seed, after
the random variables.  It can be used to tie make sure the
generated output is strongly connected to some additional data
(e.g., a string used in user authentication).
</para>
<para>
The output is placed in *<parameter>OUT</parameter>, which must be pre-allocated.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&#160;:</term>
<listitem><simpara> is a <link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> structure.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>label_size</parameter>&#160;:</term>
<listitem><simpara> length of the <parameter>label</parameter> variable.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>label</parameter>&#160;:</term>
<listitem><simpara> label used in PRF computation, typically a short string.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>server_random_first</parameter>&#160;:</term>
<listitem><simpara> non-0 if server random field should be first in seed
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>extra_size</parameter>&#160;:</term>
<listitem><simpara> length of the <parameter>extra</parameter> variable.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>extra</parameter>&#160;:</term>
<listitem><simpara> optional extra data to seed the PRF with.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>outsize</parameter>&#160;:</term>
<listitem><simpara> size of pre-allocated output buffer to hold the output.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>out</parameter>&#160;:</term>
<listitem><simpara> pre-allocate buffer to hold the generated data.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> <link linkend="GNUTLS-E-SUCCESS--CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> on success, or an error code.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-prf-raw" role="function">
<title>gnutls_prf_raw ()</title>
<indexterm zone="gnutls-prf-raw"><primary sortas="gnutls_prf_raw">gnutls_prf_raw</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_prf_raw                      (<link linkend="gnutls-session-t">gnutls_session_t</link> session,
                                                         <link linkend="size-t">size_t</link> label_size,
                                                         const <link linkend="char">char</link> *label,
                                                         <link linkend="size-t">size_t</link> seed_size,
                                                         const <link linkend="char">char</link> *seed,
                                                         <link linkend="size-t">size_t</link> outsize,
                                                         <link linkend="char">char</link> *out);</programlisting>
<para>
Apply the TLS Pseudo-Random-Function (PRF) using the master secret
on some data.
</para>
<para>
The <parameter>label</parameter> variable usually contain a string denoting the purpose
for the generated data.  The <parameter>seed</parameter> usually contain data such as the
client and server random, perhaps together with some additional
data that is added to guarantee uniqueness of the output for a
particular purpose.
</para>
<para>
Because the output is not guaranteed to be unique for a particular
session unless <parameter>seed</parameter> include the client random and server random
fields (the PRF would output the same data on another connection
resumed from the first one), it is not recommended to use this
function directly.  The <link linkend="gnutls-prf"><function>gnutls_prf()</function></link> function seed the PRF with the
client and server random fields directly, and is recommended if you
want to generate pseudo random data unique for each session.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&#160;:</term>
<listitem><simpara> is a <link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> structure.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>label_size</parameter>&#160;:</term>
<listitem><simpara> length of the <parameter>label</parameter> variable.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>label</parameter>&#160;:</term>
<listitem><simpara> label used in PRF computation, typically a short string.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>seed_size</parameter>&#160;:</term>
<listitem><simpara> length of the <parameter>seed</parameter> variable.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>seed</parameter>&#160;:</term>
<listitem><simpara> optional extra data to seed the PRF with.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>outsize</parameter>&#160;:</term>
<listitem><simpara> size of pre-allocated output buffer to hold the output.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>out</parameter>&#160;:</term>
<listitem><simpara> pre-allocate buffer to hold the generated data.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> <link linkend="GNUTLS-E-SUCCESS--CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> on success, or an error code.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-ext-recv-func" role="function">
<title>gnutls_ext_recv_func ()</title>
<indexterm zone="gnutls-ext-recv-func"><primary sortas="gnutls_ext_recv_func">gnutls_ext_recv_func</primary></indexterm><programlisting><link linkend="int">int</link>                 (*gnutls_ext_recv_func)             (<link linkend="gnutls-session-t">gnutls_session_t</link> session,
                                                         unsigned <link linkend="char">char</link> *data,
                                                         <link linkend="size-t">size_t</link> len);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>data</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>len</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-ext-send-func" role="function">
<title>gnutls_ext_send_func ()</title>
<indexterm zone="gnutls-ext-send-func"><primary sortas="gnutls_ext_send_func">gnutls_ext_send_func</primary></indexterm><programlisting><link linkend="int">int</link>                 (*gnutls_ext_send_func)             (<link linkend="gnutls-session-t">gnutls_session_t</link> session,
                                                         unsigned <link linkend="char">char</link> *data,
                                                         <link linkend="size-t">size_t</link> len);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>data</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>len</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-ext-parse-type-t" role="enum">
<title>enum gnutls_ext_parse_type_t</title>
<indexterm zone="gnutls-ext-parse-type-t"><primary sortas="gnutls_ext_parse_type_t">gnutls_ext_parse_type_t</primary></indexterm><programlisting>  typedef enum
    {
      GNUTLS_EXT_ANY,
      GNUTLS_EXT_APPLICATION,
      GNUTLS_EXT_TLS
    } gnutls_ext_parse_type_t;
</programlisting>
<para>
</para></refsect2>
<refsect2 id="gnutls-ext-register" role="function" condition="since:2.6.0">
<title>gnutls_ext_register ()</title>
<indexterm zone="gnutls-ext-register" role="2.6.0"><primary sortas="gnutls_ext_register">gnutls_ext_register</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_ext_register                 (<link linkend="int">int</link> type,
                                                         const <link linkend="char">char</link> *name,
                                                         <link linkend="gnutls-ext-parse-type-t">gnutls_ext_parse_type_t</link> parse_type,
                                                         <link linkend="gnutls-ext-recv-func">gnutls_ext_recv_func</link> recv_func,
                                                         <link linkend="gnutls-ext-send-func">gnutls_ext_send_func</link> send_func);</programlisting>
<para>
This function is used to register a new TLS extension handler.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>type</parameter>&#160;:</term>
<listitem><simpara> the 16-bit integer referring to the extension type
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>name</parameter>&#160;:</term>
<listitem><simpara> human printable name of the extension used for debugging
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>parse_type</parameter>&#160;:</term>
<listitem><simpara> either <link linkend="GNUTLS-EXT-TLS--CAPS"><type>GNUTLS_EXT_TLS</type></link> or <link linkend="GNUTLS-EXT-APPLICATION--CAPS"><literal>GNUTLS_EXT_APPLICATION</literal></link>.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>recv_func</parameter>&#160;:</term>
<listitem><simpara> a function to receive extension data
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>send_func</parameter>&#160;:</term>
<listitem><simpara> a function to send extension data
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> <link linkend="GNUTLS-E-SUCCESS--CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> on success, or an error code.

</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 2.6.0</para></refsect2>
<refsect2 id="gnutls-server-name-type-t" role="enum">
<title>enum gnutls_server_name_type_t</title>
<indexterm zone="gnutls-server-name-type-t"><primary sortas="gnutls_server_name_type_t">gnutls_server_name_type_t</primary></indexterm><programlisting>  typedef enum
  {
    GNUTLS_NAME_DNS = 1
  } gnutls_server_name_type_t;
</programlisting>
<para>
</para></refsect2>
<refsect2 id="gnutls-server-name-set" role="function">
<title>gnutls_server_name_set ()</title>
<indexterm zone="gnutls-server-name-set"><primary sortas="gnutls_server_name_set">gnutls_server_name_set</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_server_name_set              (<link linkend="gnutls-session-t">gnutls_session_t</link> session,
                                                         <link linkend="gnutls-server-name-type-t">gnutls_server_name_type_t</link> type,
                                                         const <link linkend="void">void</link> *name,
                                                         <link linkend="size-t">size_t</link> name_length);</programlisting>
<para>
This function is to be used by clients that want to inform (via a
TLS extension mechanism) the server of the name they connected to.
This should be used by clients that connect to servers that do
virtual hosting.
</para>
<para>
The value of <parameter>name</parameter> depends on the <parameter>ind</parameter> type. In case of
GNUTLS_NAME_DNS, an ASCII or UTF-8 null terminated string, without
the trailing dot, is expected.  IPv4 or IPv6 addresses are not
permitted.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&#160;:</term>
<listitem><simpara> is a <link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> structure.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>type</parameter>&#160;:</term>
<listitem><simpara> specifies the indicator type
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>name</parameter>&#160;:</term>
<listitem><simpara> is a string that contains the server name.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>name_length</parameter>&#160;:</term>
<listitem><simpara> holds the length of name
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> On success, <link linkend="GNUTLS-E-SUCCESS--CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> (zero) is returned,
  otherwise an error code is returned.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-server-name-get" role="function">
<title>gnutls_server_name_get ()</title>
<indexterm zone="gnutls-server-name-get"><primary sortas="gnutls_server_name_get">gnutls_server_name_get</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_server_name_get              (<link linkend="gnutls-session-t">gnutls_session_t</link> session,
                                                         <link linkend="void">void</link> *data,
                                                         <link linkend="size-t">size_t</link> *data_length,
                                                         unsigned <link linkend="int">int</link> *type,
                                                         unsigned <link linkend="int">int</link> indx);</programlisting>
<para>
This function will allow you to get the name indication (if any), a
client has sent.  The name indication may be any of the enumeration
gnutls_server_name_type_t.
</para>
<para>
If <parameter>type</parameter> is GNUTLS_NAME_DNS, then this function is to be used by
servers that support virtual hosting, and the data will be a null
terminated UTF-8 string.
</para>
<para>
If <parameter>data</parameter> has not enough size to hold the server name
GNUTLS_E_SHORT_MEMORY_BUFFER is returned, and <parameter>data_length</parameter> will
hold the required size.
</para>
<para>
<parameter>index</parameter> is used to retrieve more than one server names (if sent by
the client).  The first server name has an index of 0, the second 1
and so on.  If no name with the given index exists
GNUTLS_E_REQUESTED_DATA_NOT_AVAILABLE is returned.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&#160;:</term>
<listitem><simpara> is a <link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> structure.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>data</parameter>&#160;:</term>
<listitem><simpara> will hold the data
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>data_length</parameter>&#160;:</term>
<listitem><simpara> will hold the data length. Must hold the maximum size of data.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>type</parameter>&#160;:</term>
<listitem><simpara> will hold the server name indicator type
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>indx</parameter>&#160;:</term>
<listitem><simpara> is the index of the server_name
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> On success, <link linkend="GNUTLS-E-SUCCESS--CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> (zero) is returned,
  otherwise an error code is returned.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-oprfi-enable-client" role="function">
<title>gnutls_oprfi_enable_client ()</title>
<indexterm zone="gnutls-oprfi-enable-client"><primary sortas="gnutls_oprfi_enable_client">gnutls_oprfi_enable_client</primary></indexterm><programlisting><link linkend="void">void</link>                gnutls_oprfi_enable_client          (<link linkend="gnutls-session-t">gnutls_session_t</link> session,
                                                         <link linkend="size-t">size_t</link> len,
                                                         unsigned <link linkend="char">char</link> *data);</programlisting>
<para>
Request that the client should attempt to negotiate the Opaque PRF
Input TLS extension, using the given data as the client's Opaque
PRF input.
</para>
<para>
The data is copied into the session context after this call, so you
may de-allocate it immediately after calling this function.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&#160;:</term>
<listitem><simpara> is a <link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> structure.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>len</parameter>&#160;:</term>
<listitem><simpara> length of Opaque PRF data to use in client.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>data</parameter>&#160;:</term>
<listitem><simpara> Opaque PRF data to use in client.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-oprfi-callback-func" role="function">
<title>gnutls_oprfi_callback_func ()</title>
<indexterm zone="gnutls-oprfi-callback-func"><primary sortas="gnutls_oprfi_callback_func">gnutls_oprfi_callback_func</primary></indexterm><programlisting><link linkend="int">int</link>                 (*gnutls_oprfi_callback_func)       (<link linkend="gnutls-session-t">gnutls_session_t</link> session,
                                                         <link linkend="void">void</link> *userdata,
                                                         <link linkend="size-t">size_t</link> oprfi_len,
                                                         unsigned <link linkend="char">char</link> *in_oprfi,
                                                         unsigned <link linkend="char">char</link> *out_oprfi);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>userdata</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>oprfi_len</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>in_oprfi</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>out_oprfi</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-oprfi-enable-server" role="function">
<title>gnutls_oprfi_enable_server ()</title>
<indexterm zone="gnutls-oprfi-enable-server"><primary sortas="gnutls_oprfi_enable_server">gnutls_oprfi_enable_server</primary></indexterm><programlisting><link linkend="void">void</link>                gnutls_oprfi_enable_server          (<link linkend="gnutls-session-t">gnutls_session_t</link> session,
                                                         <link linkend="gnutls-oprfi-callback-func">gnutls_oprfi_callback_func</link> cb,
                                                         <link linkend="void">void</link> *userdata);</programlisting>
<para>
Request that the server should attempt to accept the Opaque PRF
Input TLS extension.  If the client requests the extension, the
provided callback <parameter>cb</parameter> will be invoked.  The callback must have the
following prototype:
</para>
<para>
int callback (gnutls_session_t session, void *userdata,
              size_t oprfi_len, const unsigned char *in_oprfi,
              unsigned char *out_oprfi);
</para>
<para>
The callback can inspect the client-provided data in the input
parameters, and specify its own opaque prf input data in the output
variable.  The function must return 0 on success, otherwise the
handshake will be aborted.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&#160;:</term>
<listitem><simpara> is a <link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> structure.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>cb</parameter>&#160;:</term>
<listitem><simpara> function pointer to Opaque PRF extension server callback.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>userdata</parameter>&#160;:</term>
<listitem><simpara> hook passed to callback function for passing application state.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-supplemental-data-format-type-t" role="enum">
<title>enum gnutls_supplemental_data_format_type_t</title>
<indexterm zone="gnutls-supplemental-data-format-type-t"><primary sortas="gnutls_supplemental_data_format_type_t">gnutls_supplemental_data_format_type_t</primary></indexterm><programlisting>  typedef enum
    {
      GNUTLS_SUPPLEMENTAL_USER_MAPPING_DATA = 0
    } gnutls_supplemental_data_format_type_t;
</programlisting>
<para>
</para></refsect2>
<refsect2 id="gnutls-supplemental-get-name" role="function">
<title>gnutls_supplemental_get_name ()</title>
<indexterm zone="gnutls-supplemental-get-name"><primary sortas="gnutls_supplemental_get_name">gnutls_supplemental_get_name</primary></indexterm><programlisting>const <link linkend="char">char</link> *        gnutls_supplemental_get_name        (<link linkend="gnutls-supplemental-data-format-type-t">gnutls_supplemental_data_format_type_t</link> type);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>type</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-cipher-set-priority" role="function">
<title>gnutls_cipher_set_priority ()</title>
<indexterm zone="gnutls-cipher-set-priority"><primary sortas="gnutls_cipher_set_priority">gnutls_cipher_set_priority</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_cipher_set_priority          (<link linkend="gnutls-session-t">gnutls_session_t</link> session,
                                                         const <link linkend="int">int</link> *list);</programlisting>
<para>
Sets the priority on the ciphers supported by gnutls.
Priority is higher for elements specified before others.
After specifying the ciphers you want, you must append a 0.
Note that the priority is set on the client. The server does
not use the algorithm's priority except for disabling
algorithms that were not specified.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&#160;:</term>
<listitem><simpara> is a <link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> structure.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>list</parameter>&#160;:</term>
<listitem><simpara> is a 0 terminated list of gnutls_cipher_algorithm_t elements.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> <link linkend="GNUTLS-E-SUCCESS--CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> on success, or an error code.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-mac-set-priority" role="function">
<title>gnutls_mac_set_priority ()</title>
<indexterm zone="gnutls-mac-set-priority"><primary sortas="gnutls_mac_set_priority">gnutls_mac_set_priority</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_mac_set_priority             (<link linkend="gnutls-session-t">gnutls_session_t</link> session,
                                                         const <link linkend="int">int</link> *list);</programlisting>
<para>
Sets the priority on the mac algorithms supported by gnutls.
Priority is higher for elements specified before others.
After specifying the algorithms you want, you must append a 0.
Note that the priority is set on the client. The server does
not use the algorithm's priority except for disabling
algorithms that were not specified.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&#160;:</term>
<listitem><simpara> is a <link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> structure.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>list</parameter>&#160;:</term>
<listitem><simpara> is a 0 terminated list of gnutls_mac_algorithm_t elements.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> <link linkend="GNUTLS-E-SUCCESS--CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> on success, or an error code.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-compression-set-priority" role="function">
<title>gnutls_compression_set_priority ()</title>
<indexterm zone="gnutls-compression-set-priority"><primary sortas="gnutls_compression_set_priority">gnutls_compression_set_priority</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_compression_set_priority     (<link linkend="gnutls-session-t">gnutls_session_t</link> session,
                                                         const <link linkend="int">int</link> *list);</programlisting>
<para>
Sets the priority on the compression algorithms supported by gnutls.
Priority is higher for elements specified before others.
After specifying the algorithms you want, you must append a 0.
Note that the priority is set on the client. The server does
not use the algorithm's priority except for disabling
algorithms that were not specified.
</para>
<para>
TLS 1.0 does not define any compression algorithms except
NULL. Other compression algorithms are to be considered
as gnutls extensions.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&#160;:</term>
<listitem><simpara> is a <link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> structure.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>list</parameter>&#160;:</term>
<listitem><simpara> is a 0 terminated list of gnutls_compression_method_t elements.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> <link linkend="GNUTLS-E-SUCCESS--CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> on success, or an error code.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-kx-set-priority" role="function">
<title>gnutls_kx_set_priority ()</title>
<indexterm zone="gnutls-kx-set-priority"><primary sortas="gnutls_kx_set_priority">gnutls_kx_set_priority</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_kx_set_priority              (<link linkend="gnutls-session-t">gnutls_session_t</link> session,
                                                         const <link linkend="int">int</link> *list);</programlisting>
<para>
Sets the priority on the key exchange algorithms supported by gnutls.
Priority is higher for elements specified before others.
After specifying the algorithms you want, you must append a 0.
Note that the priority is set on the client. The server does
not use the algorithm's priority except for disabling
algorithms that were not specified.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&#160;:</term>
<listitem><simpara> is a <link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> structure.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>list</parameter>&#160;:</term>
<listitem><simpara> is a 0 terminated list of gnutls_kx_algorithm_t elements.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> <link linkend="GNUTLS-E-SUCCESS--CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> on success, or an error code.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-protocol-set-priority" role="function">
<title>gnutls_protocol_set_priority ()</title>
<indexterm zone="gnutls-protocol-set-priority"><primary sortas="gnutls_protocol_set_priority">gnutls_protocol_set_priority</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_protocol_set_priority        (<link linkend="gnutls-session-t">gnutls_session_t</link> session,
                                                         const <link linkend="int">int</link> *list);</programlisting>
<para>
Sets the priority on the protocol versions supported by gnutls.
This function actually enables or disables protocols. Newer protocol
versions always have highest priority.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&#160;:</term>
<listitem><simpara> is a <link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> structure.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>list</parameter>&#160;:</term>
<listitem><simpara> is a 0 terminated list of gnutls_protocol_t elements.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> <link linkend="GNUTLS-E-SUCCESS--CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> on success, or an error code.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-certificate-type-set-priority" role="function">
<title>gnutls_certificate_type_set_priority ()</title>
<indexterm zone="gnutls-certificate-type-set-priority"><primary sortas="gnutls_certificate_type_set_priority">gnutls_certificate_type_set_priority</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_certificate_type_set_priority
                                                        (<link linkend="gnutls-session-t">gnutls_session_t</link> session,
                                                         const <link linkend="int">int</link> *list);</programlisting>
<para>
Sets the priority on the certificate types supported by gnutls.
Priority is higher for elements specified before others.
After specifying the types you want, you must append a 0.
Note that the certificate type priority is set on the client. 
The server does not use the cert type priority except for disabling
types that were not specified.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&#160;:</term>
<listitem><simpara> is a <link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> structure.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>list</parameter>&#160;:</term>
<listitem><simpara> is a 0 terminated list of gnutls_certificate_type_t elements.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> <link linkend="GNUTLS-E-SUCCESS--CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> on success, or an error code.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-priority-init" role="function">
<title>gnutls_priority_init ()</title>
<indexterm zone="gnutls-priority-init"><primary sortas="gnutls_priority_init">gnutls_priority_init</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_priority_init                (<link linkend="gnutls-priority-t">gnutls_priority_t</link> *priority_cache,
                                                         const <link linkend="char">char</link> *priorities,
                                                         const <link linkend="char">char</link> **err_pos);</programlisting>
<para>
Sets priorities for the ciphers, key exchange methods, macs and
compression methods. This is to avoid using the
gnutls_*<link linkend="priority"><function>_priority()</function></link> functions.
</para>
<para>
The <link linkend="priorities"><type>priorities</type></link> option allows you to specify a semi-colon
separated list of the cipher priorities to enable.
</para>
<para>
Unless the first keyword is "NONE" the defaults (in preference
order) are for TLS protocols TLS1.1, TLS1.0, SSL3.0; for
compression NULL; for certificate types X.509, OpenPGP.
</para>
<para>
For key exchange algorithms when in NORMAL or SECURE levels the
perfect forward secrecy algorithms take precendence of the other
protocols.  In all cases all the supported key exchange algorithms
are enabled (except for the RSA-EXPORT which is only enabled in
EXPORT level).
</para>
<para>
Note that although one can select very long key sizes (such as 256 bits)
for symmetric algorithms, to actually increase security the public key
algorithms have to use longer key sizes as well.
</para>
<para>
For all the current available algorithms and protocols use
"gnutls-cli -l" to get a listing.
</para>
<para>
Common keywords: Some keywords are defined to provide quick access
to common preferences.
</para>
<para>
"PERFORMANCE" means all the "secure" ciphersuites are enabled,
limited to 128 bit ciphers and sorted by terms of speed
performance.
</para>
<para>
"NORMAL" means all "secure" ciphersuites. The 256-bit ciphers are
included as a fallback only.  The ciphers are sorted by security
margin.
</para>
<para>
"SECURE128" means all "secure" ciphersuites with ciphers up to 128
bits, sorted by security margin.
</para>
<para>
"SECURE256" means all "secure" ciphersuites including the 256 bit
ciphers, sorted by security margin.
</para>
<para>
"EXPORT" means all ciphersuites are enabled, including the
low-security 40 bit ciphers.
</para>
<para>
"NONE" means nothing is enabled.  This disables even protocols and
compression methods.
</para>
<para>
Special keywords:
"!" or "-" appended with an algorithm will remove this algorithm.
</para>
<para>
"+" appended with an algorithm will add this algorithm.
</para>
<para>
"<link linkend="COMPAT--CAPS"><literal>COMPAT</literal></link>" will enable compatibility features for a server.
</para>
<para>
"<link linkend="SSL3-RECORD-VERSION--CAPS"><literal>SSL3_RECORD_VERSION</literal></link>" will use SSL3.0 record version in client hello.
</para>
<para>
"<link linkend="VERIFY-ALLOW-SIGN-RSA-MD5--CAPS"><literal>VERIFY_ALLOW_SIGN_RSA_MD5</literal></link>" will allow RSA-MD5 signatures in
certificate chains.
</para>
<para>
"<link linkend="VERIFY-ALLOW-X509-V1-CA-CRT--CAPS"><literal>VERIFY_ALLOW_X509_V1_CA_CRT</literal></link>" will allow V1 CAs in chains.
</para>
<para>
Namespace concern:
To avoid collisions in order to specify a compression algorithm in
this string you have to prefix it with "COMP-", protocol versions
with "VERS-" and certificate types with "CTYPE-". All other
algorithms don't need a prefix.
</para>
<para>
Examples:
"NORMAL:!AES-128-CBC" means normal ciphers except for AES-128.
</para>
<para>
"EXPORT:!VERS-TLS1.0:+COMP-DEFLATE" means that export ciphers are
enabled, TLS 1.0 is disabled, and libz compression enabled.
</para>
<para>
"NONE:+VERS-TLS1.0:+AES-128-CBC:+RSA:+SHA1:+COMP-NULL", "NORMAL",
"<link linkend="COMPAT--CAPS"><literal>COMPAT</literal></link>".</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>priority_cache</parameter>&#160;:</term>
<listitem><simpara> is a <link linkend="gnutls-prioritity-t"><type>gnutls_prioritity_t</type></link> structure.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>priorities</parameter>&#160;:</term>
<listitem><simpara> is a string describing priorities
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>err_pos</parameter>&#160;:</term>
<listitem><simpara> In case of an error this will have the position in the string the error occured
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> On syntax error <link linkend="GNUTLS-E-INVALID-REQUEST--CAPS"><literal>GNUTLS_E_INVALID_REQUEST</literal></link> is returned,
<link linkend="GNUTLS-E-SUCCESS--CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> on success, or an error code.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-priority-deinit" role="function">
<title>gnutls_priority_deinit ()</title>
<indexterm zone="gnutls-priority-deinit"><primary sortas="gnutls_priority_deinit">gnutls_priority_deinit</primary></indexterm><programlisting><link linkend="void">void</link>                gnutls_priority_deinit              (<link linkend="gnutls-priority-t">gnutls_priority_t</link> priority_cache);</programlisting>
<para>
Deinitializes the priority cache.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>priority_cache</parameter>&#160;:</term>
<listitem><simpara> is a <link linkend="gnutls-prioritity-t"><type>gnutls_prioritity_t</type></link> structure.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-priority-set" role="function">
<title>gnutls_priority_set ()</title>
<indexterm zone="gnutls-priority-set"><primary sortas="gnutls_priority_set">gnutls_priority_set</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_priority_set                 (<link linkend="gnutls-session-t">gnutls_session_t</link> session,
                                                         <link linkend="gnutls-priority-t">gnutls_priority_t</link> priority);</programlisting>
<para>
Sets the priorities to use on the ciphers, key exchange methods,
macs and compression methods.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&#160;:</term>
<listitem><simpara> is a <link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> structure.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>priority</parameter>&#160;:</term>
<listitem><simpara> is a <link linkend="gnutls-priority-t"><type>gnutls_priority_t</type></link> structure.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> <link linkend="GNUTLS-E-SUCCESS--CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> on success, or an error code.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-priority-set-direct" role="function">
<title>gnutls_priority_set_direct ()</title>
<indexterm zone="gnutls-priority-set-direct"><primary sortas="gnutls_priority_set_direct">gnutls_priority_set_direct</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_priority_set_direct          (<link linkend="gnutls-session-t">gnutls_session_t</link> session,
                                                         const <link linkend="char">char</link> *priorities,
                                                         const <link linkend="char">char</link> **err_pos);</programlisting>
<para>
Sets the priorities to use on the ciphers, key exchange methods,
macs and compression methods.  This function avoids keeping a
priority cache and is used to directly set string priorities to a
TLS session.  For documentation check the <link linkend="gnutls-priority-init"><function>gnutls_priority_init()</function></link>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&#160;:</term>
<listitem><simpara> is a <link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> structure.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>priorities</parameter>&#160;:</term>
<listitem><simpara> is a string describing priorities
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>err_pos</parameter>&#160;:</term>
<listitem><simpara> In case of an error this will have the position in the string the error occured
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> On syntax error <link linkend="GNUTLS-E-INVALID-REQUEST--CAPS"><literal>GNUTLS_E_INVALID_REQUEST</literal></link> is returned,
<link linkend="GNUTLS-E-SUCCESS--CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> on success, or an error code.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-set-default-priority" role="function">
<title>gnutls_set_default_priority ()</title>
<indexterm zone="gnutls-set-default-priority"><primary sortas="gnutls_set_default_priority">gnutls_set_default_priority</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_set_default_priority         (<link linkend="gnutls-session-t">gnutls_session_t</link> session);</programlisting>
<para>
Sets some default priority on the ciphers, key exchange methods,
macs and compression methods.
</para>
<para>
This is the same as calling:
</para>
<para>
gnutls_priority_set_direct (session, "NORMAL", NULL);
</para>
<para>
This function is kept around for backwards compatibility, but
because of its wide use it is still fully supported.  If you wish
to allow users to provide a string that specify which ciphers to
use (which is recommended), you should use
<link linkend="gnutls-priority-set-direct"><function>gnutls_priority_set_direct()</function></link> or <link linkend="gnutls-priority-set"><function>gnutls_priority_set()</function></link> instead.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&#160;:</term>
<listitem><simpara> is a <link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> structure.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> <link linkend="GNUTLS-E-SUCCESS--CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> on success, or an error code.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-set-default-export-priority" role="function">
<title>gnutls_set_default_export_priority ()</title>
<indexterm zone="gnutls-set-default-export-priority"><primary sortas="gnutls_set_default_export_priority">gnutls_set_default_export_priority</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_set_default_export_priority  (<link linkend="gnutls-session-t">gnutls_session_t</link> session);</programlisting>
<para>
Sets some default priority on the ciphers, key exchange methods, macs
and compression methods.  This function also includes weak algorithms.
</para>
<para>
This is the same as calling:
</para>
<para>
gnutls_priority_set_direct (session, "EXPORT", NULL);
</para>
<para>
This function is kept around for backwards compatibility, but
because of its wide use it is still fully supported.  If you wish
to allow users to provide a string that specify which ciphers to
use (which is recommended), you should use
<link linkend="gnutls-priority-set-direct"><function>gnutls_priority_set_direct()</function></link> or <link linkend="gnutls-priority-set"><function>gnutls_priority_set()</function></link> instead.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&#160;:</term>
<listitem><simpara> is a <link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> structure.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> <link linkend="GNUTLS-E-SUCCESS--CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> on success, or an error code.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-cipher-suite-get-name" role="function">
<title>gnutls_cipher_suite_get_name ()</title>
<indexterm zone="gnutls-cipher-suite-get-name"><primary sortas="gnutls_cipher_suite_get_name">gnutls_cipher_suite_get_name</primary></indexterm><programlisting>const <link linkend="char">char</link> *        gnutls_cipher_suite_get_name        (<link linkend="gnutls-kx-algorithm-t">gnutls_kx_algorithm_t</link> kx_algorithm,
                                                         <link linkend="gnutls-cipher-algorithm-t">gnutls_cipher_algorithm_t</link> cipher_algorithm,
                                                         <link linkend="gnutls-mac-algorithm-t">gnutls_mac_algorithm_t</link> mac_algorithm);</programlisting>
<para>
Note that the full cipher suite name must be prepended by TLS or
SSL depending of the protocol in use.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>kx_algorithm</parameter>&#160;:</term>
<listitem><simpara> is a Key exchange algorithm
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>cipher_algorithm</parameter>&#160;:</term>
<listitem><simpara> is a cipher algorithm
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>mac_algorithm</parameter>&#160;:</term>
<listitem><simpara> is a MAC algorithm
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a string that contains the name of a TLS cipher suite,
specified by the given algorithms, or <link linkend="NULL--CAPS"><literal>NULL</literal></link>.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-protocol-get-version" role="function">
<title>gnutls_protocol_get_version ()</title>
<indexterm zone="gnutls-protocol-get-version"><primary sortas="gnutls_protocol_get_version">gnutls_protocol_get_version</primary></indexterm><programlisting><link linkend="gnutls-protocol-t">gnutls_protocol_t</link>   gnutls_protocol_get_version         (<link linkend="gnutls-session-t">gnutls_session_t</link> session);</programlisting>
<para>
Get TLS version, a <link linkend="gnutls-protocol-t"><type>gnutls_protocol_t</type></link> value.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&#160;:</term>
<listitem><simpara> is a <link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> structure.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> the version of the currently used protocol.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-protocol-get-name" role="function">
<title>gnutls_protocol_get_name ()</title>
<indexterm zone="gnutls-protocol-get-name"><primary sortas="gnutls_protocol_get_name">gnutls_protocol_get_name</primary></indexterm><programlisting>const <link linkend="char">char</link> *        gnutls_protocol_get_name            (<link linkend="gnutls-protocol-t">gnutls_protocol_t</link> version);</programlisting>
<para>
Convert a <link linkend="gnutls-protocol-t"><type>gnutls_protocol_t</type></link> value to a string.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>version</parameter>&#160;:</term>
<listitem><simpara> is a (gnutls) version number
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a string that contains the name of the specified TLS
  version (e.g., "TLS1.0"), or <link linkend="NULL--CAPS"><literal>NULL</literal></link>.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-session-set-data" role="function">
<title>gnutls_session_set_data ()</title>
<indexterm zone="gnutls-session-set-data"><primary sortas="gnutls_session_set_data">gnutls_session_set_data</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_session_set_data             (<link linkend="gnutls-session-t">gnutls_session_t</link> session,
                                                         const <link linkend="void">void</link> *session_data,
                                                         <link linkend="size-t">size_t</link> session_data_size);</programlisting>
<para>
Sets all session parameters, in order to resume a previously
established session.  The session data given must be the one
returned by <link linkend="gnutls-session-get-data"><function>gnutls_session_get_data()</function></link>.  This function should be
called before <link linkend="gnutls-handshake"><function>gnutls_handshake()</function></link>.
</para>
<para>
Keep in mind that session resuming is advisory. The server may
choose not to resume the session, thus a full handshake will be
performed.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&#160;:</term>
<listitem><simpara> is a <link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> structure.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>session_data</parameter>&#160;:</term>
<listitem><simpara> is a pointer to space to hold the session.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>session_data_size</parameter>&#160;:</term>
<listitem><simpara> is the session's size
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> On success, <link linkend="GNUTLS-E-SUCCESS--CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> (0) is returned, otherwise
  an error code is returned.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-session-get-data" role="function">
<title>gnutls_session_get_data ()</title>
<indexterm zone="gnutls-session-get-data"><primary sortas="gnutls_session_get_data">gnutls_session_get_data</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_session_get_data             (<link linkend="gnutls-session-t">gnutls_session_t</link> session,
                                                         <link linkend="void">void</link> *session_data,
                                                         <link linkend="size-t">size_t</link> *session_data_size);</programlisting>
<para>
Returns all session parameters, in order to support resuming.  The
client should call this, and keep the returned session, if he
wants to resume that current version later by calling
<link linkend="gnutls-session-set-data"><function>gnutls_session_set_data()</function></link> This function must be called after a
successful handshake.
</para>
<para>
Resuming sessions is really useful and speedups connections after
a succesful one.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&#160;:</term>
<listitem><simpara> is a <link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> structure.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>session_data</parameter>&#160;:</term>
<listitem><simpara> is a pointer to space to hold the session.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>session_data_size</parameter>&#160;:</term>
<listitem><simpara> is the session_data's size, or it will be set by the function.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> On success, <link linkend="GNUTLS-E-SUCCESS--CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> (0) is returned, otherwise
  an error code is returned.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-session-get-data2" role="function">
<title>gnutls_session_get_data2 ()</title>
<indexterm zone="gnutls-session-get-data2"><primary sortas="gnutls_session_get_data2">gnutls_session_get_data2</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_session_get_data2            (<link linkend="gnutls-session-t">gnutls_session_t</link> session,
                                                         <link linkend="gnutls-datum-t">gnutls_datum_t</link> *data);</programlisting>
<para>
Returns all session parameters, in order to support resuming.  The
client should call this, and keep the returned session, if he wants
to resume that current version later by calling
<link linkend="gnutls-session-set-data"><function>gnutls_session_set_data()</function></link>.  This function must be called after a
successful handshake.  The returned datum must be freed with
<link linkend="gnutls-free"><function>gnutls_free()</function></link>.
</para>
<para>
Resuming sessions is really useful and speedups connections after
a succesful one.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&#160;:</term>
<listitem><simpara> is a <link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> structure.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>data</parameter>&#160;:</term>
<listitem><simpara> is a pointer to a datum that will hold the session.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> On success, <link linkend="GNUTLS-E-SUCCESS--CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> (0) is returned, otherwise
  an error code is returned.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="GNUTLS-MAX-SESSION-ID--CAPS" role="macro">
<title>GNUTLS_MAX_SESSION_ID</title>
<indexterm zone="GNUTLS-MAX-SESSION-ID--CAPS"><primary sortas="GNUTLS_MAX_SESSION_ID">GNUTLS_MAX_SESSION_ID</primary></indexterm><programlisting>#define GNUTLS_MAX_SESSION_ID 32
</programlisting>
<para>
</para></refsect2>
<refsect2 id="gnutls-session-get-id" role="function">
<title>gnutls_session_get_id ()</title>
<indexterm zone="gnutls-session-get-id"><primary sortas="gnutls_session_get_id">gnutls_session_get_id</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_session_get_id               (<link linkend="gnutls-session-t">gnutls_session_t</link> session,
                                                         <link linkend="void">void</link> *session_id,
                                                         <link linkend="size-t">size_t</link> *session_id_size);</programlisting>
<para>
Returns the current session id. This can be used if you want to
check if the next session you tried to resume was actually
resumed.  This is because resumed sessions have the same sessionID
with the original session.
</para>
<para>
Session id is some data set by the server, that identify the
current session.  In TLS 1.0 and SSL 3.0 session id is always less
than 32 bytes.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&#160;:</term>
<listitem><simpara> is a <link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> structure.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>session_id</parameter>&#160;:</term>
<listitem><simpara> is a pointer to space to hold the session id.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>session_id_size</parameter>&#160;:</term>
<listitem><simpara> is the session id's size, or it will be set by the function.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> On success, <link linkend="GNUTLS-E-SUCCESS--CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> (0) is returned, otherwise
  an error code is returned.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="GNUTLS-MASTER-SIZE--CAPS" role="macro">
<title>GNUTLS_MASTER_SIZE</title>
<indexterm zone="GNUTLS-MASTER-SIZE--CAPS"><primary sortas="GNUTLS_MASTER_SIZE">GNUTLS_MASTER_SIZE</primary></indexterm><programlisting>#define GNUTLS_MASTER_SIZE 48
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-RANDOM-SIZE--CAPS" role="macro">
<title>GNUTLS_RANDOM_SIZE</title>
<indexterm zone="GNUTLS-RANDOM-SIZE--CAPS"><primary sortas="GNUTLS_RANDOM_SIZE">GNUTLS_RANDOM_SIZE</primary></indexterm><programlisting>#define GNUTLS_RANDOM_SIZE 32
</programlisting>
<para>
</para></refsect2>
<refsect2 id="gnutls-session-get-server-random" role="function">
<title>gnutls_session_get_server_random ()</title>
<indexterm zone="gnutls-session-get-server-random"><primary sortas="gnutls_session_get_server_random">gnutls_session_get_server_random</primary></indexterm><programlisting>const <link linkend="void">void</link> *        gnutls_session_get_server_random    (<link linkend="gnutls-session-t">gnutls_session_t</link> session);</programlisting>
<para>
Return a pointer to the 32-byte server random field used in the
session.  The pointer must not be modified or deallocated.
</para>
<para>
If a server random value has not yet been established, the output
will be garbage; in particular, a <link linkend="NULL--CAPS"><literal>NULL</literal></link> return value should not be
expected.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&#160;:</term>
<listitem><simpara> is a <link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> structure.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> pointer to server random data.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-session-get-client-random" role="function">
<title>gnutls_session_get_client_random ()</title>
<indexterm zone="gnutls-session-get-client-random"><primary sortas="gnutls_session_get_client_random">gnutls_session_get_client_random</primary></indexterm><programlisting>const <link linkend="void">void</link> *        gnutls_session_get_client_random    (<link linkend="gnutls-session-t">gnutls_session_t</link> session);</programlisting>
<para>
Return a pointer to the 32-byte client random field used in the
session.  The pointer must not be modified or deallocated.
</para>
<para>
If a client random value has not yet been established, the output
will be garbage; in particular, a <link linkend="NULL--CAPS"><literal>NULL</literal></link> return value should not be
expected.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&#160;:</term>
<listitem><simpara> is a <link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> structure.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> pointer to client random data.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-session-get-master-secret" role="function">
<title>gnutls_session_get_master_secret ()</title>
<indexterm zone="gnutls-session-get-master-secret"><primary sortas="gnutls_session_get_master_secret">gnutls_session_get_master_secret</primary></indexterm><programlisting>const <link linkend="void">void</link> *        gnutls_session_get_master_secret    (<link linkend="gnutls-session-t">gnutls_session_t</link> session);</programlisting>
<para>
Return a pointer to the 48-byte master secret in the session.  The
pointer must not be modified or deallocated.
</para>
<para>
If a master secret value has not yet been established, the output
will be garbage; in particular, a <link linkend="NULL--CAPS"><literal>NULL</literal></link> return value should not be
expected.
</para>
<para>
Consider using <link linkend="gnutls-prf"><function>gnutls_prf()</function></link> rather than extracting the master
secret and use it to derive further data.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&#160;:</term>
<listitem><simpara> is a <link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> structure.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> pointer to master secret data.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-finished-callback-func" role="function">
<title>gnutls_finished_callback_func ()</title>
<indexterm zone="gnutls-finished-callback-func"><primary sortas="gnutls_finished_callback_func">gnutls_finished_callback_func</primary></indexterm><programlisting><link linkend="void">void</link>                (*gnutls_finished_callback_func)    (<link linkend="gnutls-session-t">gnutls_session_t</link> session,
                                                         const <link linkend="void">void</link> *finished,
                                                         <link linkend="size-t">size_t</link> len);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>finished</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>len</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-session-set-finished-function" role="function" condition="since:2.6.0">
<title>gnutls_session_set_finished_function ()</title>
<indexterm zone="gnutls-session-set-finished-function" role="2.6.0"><primary sortas="gnutls_session_set_finished_function">gnutls_session_set_finished_function</primary></indexterm><programlisting><link linkend="void">void</link>                gnutls_session_set_finished_function
                                                        (<link linkend="gnutls-session-t">gnutls_session_t</link> session,
                                                         <link linkend="gnutls-finished-callback-func">gnutls_finished_callback_func</link> func);</programlisting>
<para>
Register a callback function for the session that will be called
when a TLS Finished message has been generated.  The function is
typically used to copy away the TLS finished message for later use
as a channel binding or similar purpose.
</para>
<para>
The callback should follow this prototype:
</para>
<para>
void callback (gnutls_session_t <parameter>session</parameter>, const void *<parameter>finished</parameter>, size_t <parameter>len</parameter>);
</para>
<para>
The <parameter>finished</parameter> parameter will contain the binary TLS finished
message, and <parameter>len</parameter> will contains its length.  For SSLv3 connections,
the <parameter>len</parameter> parameter will be 36 and for TLS connections it will be
12.
</para>
<para>
It is recommended that the function returns quickly in order to not
delay the handshake.  Use the function to store a copy of the TLS
finished message for later use.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&#160;:</term>
<listitem><simpara> is a <link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> structure.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>func</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="gnutls-finished-callback-func"><type>gnutls_finished_callback_func</type></link> callback.
</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 2.6.0</para></refsect2>
<refsect2 id="gnutls-session-is-resumed" role="function">
<title>gnutls_session_is_resumed ()</title>
<indexterm zone="gnutls-session-is-resumed"><primary sortas="gnutls_session_is_resumed">gnutls_session_is_resumed</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_session_is_resumed           (<link linkend="gnutls-session-t">gnutls_session_t</link> session);</programlisting>
<para>
Check whether session is resumed or not.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&#160;:</term>
<listitem><simpara> is a <link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> structure.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> non zero if this session is resumed, or a zero if this is
  a new session.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-db-store-func" role="function">
<title>gnutls_db_store_func ()</title>
<indexterm zone="gnutls-db-store-func"><primary sortas="gnutls_db_store_func">gnutls_db_store_func</primary></indexterm><programlisting><link linkend="int">int</link>                 (*gnutls_db_store_func)             (<link linkend="void">void</link> *,
                                                         <link linkend="gnutls-datum-t">gnutls_datum_t</link> key,
                                                         <link linkend="gnutls-datum-t">gnutls_datum_t</link> data);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>Param1</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>key</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>data</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-db-remove-func" role="function">
<title>gnutls_db_remove_func ()</title>
<indexterm zone="gnutls-db-remove-func"><primary sortas="gnutls_db_remove_func">gnutls_db_remove_func</primary></indexterm><programlisting><link linkend="int">int</link>                 (*gnutls_db_remove_func)            (<link linkend="void">void</link> *,
                                                         <link linkend="gnutls-datum-t">gnutls_datum_t</link> key);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>Param1</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>key</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-db-retr-func" role="function">
<title>gnutls_db_retr_func ()</title>
<indexterm zone="gnutls-db-retr-func"><primary sortas="gnutls_db_retr_func">gnutls_db_retr_func</primary></indexterm><programlisting><link linkend="gnutls-datum-t">gnutls_datum_t</link>      (*gnutls_db_retr_func)              (<link linkend="void">void</link> *,
                                                         <link linkend="gnutls-datum-t">gnutls_datum_t</link> key);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>Param1</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>key</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-db-set-cache-expiration" role="function">
<title>gnutls_db_set_cache_expiration ()</title>
<indexterm zone="gnutls-db-set-cache-expiration"><primary sortas="gnutls_db_set_cache_expiration">gnutls_db_set_cache_expiration</primary></indexterm><programlisting><link linkend="void">void</link>                gnutls_db_set_cache_expiration      (<link linkend="gnutls-session-t">gnutls_session_t</link> session,
                                                         <link linkend="int">int</link> seconds);</programlisting>
<para>
Set the expiration time for resumed sessions. The default is 3600
(one hour) at the time writing this.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&#160;:</term>
<listitem><simpara> is a <link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> structure.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>seconds</parameter>&#160;:</term>
<listitem><simpara> is the number of seconds.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-db-remove-session" role="function">
<title>gnutls_db_remove_session ()</title>
<indexterm zone="gnutls-db-remove-session"><primary sortas="gnutls_db_remove_session">gnutls_db_remove_session</primary></indexterm><programlisting><link linkend="void">void</link>                gnutls_db_remove_session            (<link linkend="gnutls-session-t">gnutls_session_t</link> session);</programlisting>
<para>
This function will remove the current session data from the
session database.  This will prevent future handshakes reusing
these session data.  This function should be called if a session
was terminated abnormally, and before <link linkend="gnutls-deinit"><function>gnutls_deinit()</function></link> is called.
</para>
<para>
Normally <link linkend="gnutls-deinit"><function>gnutls_deinit()</function></link> will remove abnormally terminated
sessions.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&#160;:</term>
<listitem><simpara> is a <link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> structure.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-db-set-retrieve-function" role="function">
<title>gnutls_db_set_retrieve_function ()</title>
<indexterm zone="gnutls-db-set-retrieve-function"><primary sortas="gnutls_db_set_retrieve_function">gnutls_db_set_retrieve_function</primary></indexterm><programlisting><link linkend="void">void</link>                gnutls_db_set_retrieve_function     (<link linkend="gnutls-session-t">gnutls_session_t</link> session,
                                                         <link linkend="gnutls-db-retr-func">gnutls_db_retr_func</link> retr_func);</programlisting>
<para>
Sets the function that will be used to retrieve data from the
resumed sessions database.  This function must return a
gnutls_datum_t containing the data on success, or a gnutls_datum_t
containing null and 0 on failure.
</para>
<para>
The datum's data must be allocated using the function
<link linkend="gnutls-malloc"><function>gnutls_malloc()</function></link>.
</para>
<para>
The first argument to <link linkend="retr-func"><function>retr_func()</function></link> will be null unless
<link linkend="gnutls-db-set-ptr"><function>gnutls_db_set_ptr()</function></link> has been called.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&#160;:</term>
<listitem><simpara> is a <link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> structure.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>retr_func</parameter>&#160;:</term>
<listitem><simpara> is the function.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-db-set-remove-function" role="function">
<title>gnutls_db_set_remove_function ()</title>
<indexterm zone="gnutls-db-set-remove-function"><primary sortas="gnutls_db_set_remove_function">gnutls_db_set_remove_function</primary></indexterm><programlisting><link linkend="void">void</link>                gnutls_db_set_remove_function       (<link linkend="gnutls-session-t">gnutls_session_t</link> session,
                                                         <link linkend="gnutls-db-remove-func">gnutls_db_remove_func</link> rem_func);</programlisting>
<para>
Sets the function that will be used to remove data from the
resumed sessions database. This function must return 0 on success.
</para>
<para>
The first argument to <link linkend="rem-func"><function>rem_func()</function></link> will be null unless
<link linkend="gnutls-db-set-ptr"><function>gnutls_db_set_ptr()</function></link> has been called.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&#160;:</term>
<listitem><simpara> is a <link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> structure.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>rem_func</parameter>&#160;:</term>
<listitem><simpara> is the function.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-db-set-store-function" role="function">
<title>gnutls_db_set_store_function ()</title>
<indexterm zone="gnutls-db-set-store-function"><primary sortas="gnutls_db_set_store_function">gnutls_db_set_store_function</primary></indexterm><programlisting><link linkend="void">void</link>                gnutls_db_set_store_function        (<link linkend="gnutls-session-t">gnutls_session_t</link> session,
                                                         <link linkend="gnutls-db-store-func">gnutls_db_store_func</link> store_func);</programlisting>
<para>
Sets the function that will be used to store data from the resumed
sessions database. This function must remove 0 on success.
</para>
<para>
The first argument to <link linkend="store-func"><function>store_func()</function></link> will be null unless
<link linkend="gnutls-db-set-ptr"><function>gnutls_db_set_ptr()</function></link> has been called.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&#160;:</term>
<listitem><simpara> is a <link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> structure.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>store_func</parameter>&#160;:</term>
<listitem><simpara> is the function
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-db-set-ptr" role="function">
<title>gnutls_db_set_ptr ()</title>
<indexterm zone="gnutls-db-set-ptr"><primary sortas="gnutls_db_set_ptr">gnutls_db_set_ptr</primary></indexterm><programlisting><link linkend="void">void</link>                gnutls_db_set_ptr                   (<link linkend="gnutls-session-t">gnutls_session_t</link> session,
                                                         <link linkend="void">void</link> *ptr);</programlisting>
<para>
Sets the pointer that will be provided to db store, retrieve and
delete functions, as the first argument.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&#160;:</term>
<listitem><simpara> is a <link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> structure.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> is the pointer
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-db-get-ptr" role="function">
<title>gnutls_db_get_ptr ()</title>
<indexterm zone="gnutls-db-get-ptr"><primary sortas="gnutls_db_get_ptr">gnutls_db_get_ptr</primary></indexterm><programlisting><link linkend="void">void</link> *              gnutls_db_get_ptr                   (<link linkend="gnutls-session-t">gnutls_session_t</link> session);</programlisting>
<para>
Get db function pointer.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&#160;:</term>
<listitem><simpara> is a <link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> structure.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> the pointer that will be sent to db store, retrieve and
  delete functions, as the first argument.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-db-check-entry" role="function">
<title>gnutls_db_check_entry ()</title>
<indexterm zone="gnutls-db-check-entry"><primary sortas="gnutls_db_check_entry">gnutls_db_check_entry</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_db_check_entry               (<link linkend="gnutls-session-t">gnutls_session_t</link> session,
                                                         <link linkend="gnutls-datum-t">gnutls_datum_t</link> session_entry);</programlisting>
<para>
Check if database entry has expired.  This function is to be used
when you want to clear unnesessary session which occupy space in
your backend.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&#160;:</term>
<listitem><simpara> is a <link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> structure.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>session_entry</parameter>&#160;:</term>
<listitem><simpara> is the session data (not key)
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> Returns <link linkend="GNUTLS-E-EXPIRED--CAPS"><literal>GNUTLS_E_EXPIRED</literal></link>, if the database entry has
  expired or 0 otherwise.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-handshake-post-client-hello-func" role="function">
<title>gnutls_handshake_post_client_hello_func ()</title>
<indexterm zone="gnutls-handshake-post-client-hello-func"><primary sortas="gnutls_handshake_post_client_hello_func">gnutls_handshake_post_client_hello_func</primary></indexterm><programlisting><link linkend="int">int</link>                 (*gnutls_handshake_post_client_hello_func)
                                                        (<link linkend="gnutls-session-t">gnutls_session_t</link> );</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>Param1</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-handshake-set-post-client-hello-function" role="function">
<title>gnutls_handshake_set_post_client_hello_function ()</title>
<indexterm zone="gnutls-handshake-set-post-client-hello-function"><primary sortas="gnutls_handshake_set_post_client_hello_function">gnutls_handshake_set_post_client_hello_function</primary></indexterm><programlisting><link linkend="void">void</link>                gnutls_handshake_set_post_client_hello_function
                                                        (<link linkend="gnutls-session-t">gnutls_session_t</link> session,
                                                         <link linkend="gnutls-handshake-post-client-hello-func">gnutls_handshake_post_client_hello_func</link> func);</programlisting>
<para>
This function will set a callback to be called after the client
hello has been received (callback valid in server side only). This
allows the server to adjust settings based on received extensions.
</para>
<para>
Those settings could be ciphersuites, requesting certificate, or
anything else except for version negotiation (this is done before
the hello message is parsed).
</para>
<para>
This callback must return 0 on success or a gnutls error code to
terminate the handshake.
</para>
<para>
Warning: You should not use this function to terminate the
handshake based on client input unless you know what you are
doing. Before the handshake is finished there is no way to know if
there is a man-in-the-middle attack being performed.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&#160;:</term>
<listitem><simpara> is a <link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> structure.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>func</parameter>&#160;:</term>
<listitem><simpara> is the function to be called
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-handshake-set-max-packet-length" role="function">
<title>gnutls_handshake_set_max_packet_length ()</title>
<indexterm zone="gnutls-handshake-set-max-packet-length"><primary sortas="gnutls_handshake_set_max_packet_length">gnutls_handshake_set_max_packet_length</primary></indexterm><programlisting><link linkend="void">void</link>                gnutls_handshake_set_max_packet_length
                                                        (<link linkend="gnutls-session-t">gnutls_session_t</link> session,
                                                         <link linkend="size-t">size_t</link> max);</programlisting>
<para>
This function will set the maximum size of all handshake messages.
Handshakes over this size are rejected with
<link linkend="GNUTLS-E-HANDSHAKE-TOO-LARGE--CAPS"><literal>GNUTLS_E_HANDSHAKE_TOO_LARGE</literal></link> error code.  The default value is
48kb which is typically large enough.  Set this to 0 if you do not
want to set an upper limit.
</para>
<para>
The reason for restricting the handshake message sizes are to
limit Denial of Service attacks.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&#160;:</term>
<listitem><simpara> is a <link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> structure.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>max</parameter>&#160;:</term>
<listitem><simpara> is the maximum number.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-check-version" role="function">
<title>gnutls_check_version ()</title>
<indexterm zone="gnutls-check-version"><primary sortas="gnutls_check_version">gnutls_check_version</primary></indexterm><programlisting>const <link linkend="char">char</link> *        gnutls_check_version                (const <link linkend="char">char</link> *req_version);</programlisting>
<para>
Check GnuTLS Library version.
</para>
<para>
See <link linkend="GNUTLS-VERSION--CAPS"><literal>GNUTLS_VERSION</literal></link> for a suitable <parameter>req_version</parameter> string.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>req_version</parameter>&#160;:</term>
<listitem><simpara> version string to compare with, or <link linkend="NULL--CAPS"><literal>NULL</literal></link>.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> Check that the version of the library is at
  minimum the one given as a string in <parameter>req_version</parameter> and return the
  actual version string of the library; return <link linkend="NULL--CAPS"><literal>NULL</literal></link> if the
  condition is not met.  If <link linkend="NULL--CAPS"><literal>NULL</literal></link> is passed to this function no
  check is done and only the version string is returned.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-credentials-clear" role="function">
<title>gnutls_credentials_clear ()</title>
<indexterm zone="gnutls-credentials-clear"><primary sortas="gnutls_credentials_clear">gnutls_credentials_clear</primary></indexterm><programlisting><link linkend="void">void</link>                gnutls_credentials_clear            (<link linkend="gnutls-session-t">gnutls_session_t</link> session);</programlisting>
<para>
Clears all the credentials previously set in this session.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&#160;:</term>
<listitem><simpara> is a <link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> structure.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-credentials-set" role="function">
<title>gnutls_credentials_set ()</title>
<indexterm zone="gnutls-credentials-set"><primary sortas="gnutls_credentials_set">gnutls_credentials_set</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_credentials_set              (<link linkend="gnutls-session-t">gnutls_session_t</link> session,
                                                         <link linkend="gnutls-credentials-type-t">gnutls_credentials_type_t</link> type,
                                                         <link linkend="void">void</link> *cred);</programlisting>
<para>
Sets the needed credentials for the specified type.  Eg username,
password - or public and private keys etc.  The <parameter>cred</parameter> parameter is
a structure that depends on the specified type and on the current
session (client or server).
</para>
<para>
In order to minimize memory usage, and share credentials between
several threads gnutls keeps a pointer to cred, and not the whole
cred structure.  Thus you will have to keep the structure allocated
until you call <link linkend="gnutls-deinit"><function>gnutls_deinit()</function></link>.
</para>
<para>
For <link linkend="GNUTLS-CRD-ANON--CAPS"><literal>GNUTLS_CRD_ANON</literal></link>, <parameter>cred</parameter> should be
<link linkend="gnutls-anon-client-credentials-t"><type>gnutls_anon_client_credentials_t</type></link> in case of a client.  In case of
a server it should be <link linkend="gnutls-anon-server-credentials-t"><type>gnutls_anon_server_credentials_t</type></link>.
</para>
<para>
For <link linkend="GNUTLS-CRD-SRP--CAPS"><literal>GNUTLS_CRD_SRP</literal></link>, <parameter>cred</parameter> should be <link linkend="gnutls-srp-client-credentials-t"><type>gnutls_srp_client_credentials_t</type></link>
in case of a client, and <link linkend="gnutls-srp-server-credentials-t"><type>gnutls_srp_server_credentials_t</type></link>, in case
of a server.
</para>
<para>
For <link linkend="GNUTLS-CRD-CERTIFICATE--CAPS"><literal>GNUTLS_CRD_CERTIFICATE</literal></link>, <parameter>cred</parameter> should be
<link linkend="gnutls-certificate-credentials-t"><type>gnutls_certificate_credentials_t</type></link>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&#160;:</term>
<listitem><simpara> is a <link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> structure.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>type</parameter>&#160;:</term>
<listitem><simpara> is the type of the credentials
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>cred</parameter>&#160;:</term>
<listitem><simpara> is a pointer to a structure.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> On success, <link linkend="GNUTLS-E-SUCCESS--CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> (zero) is returned,
  otherwise an error code is returned.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-cred-set" role="macro">
<title>gnutls_cred_set</title>
<indexterm zone="gnutls-cred-set"><primary sortas="gnutls_cred_set">gnutls_cred_set</primary></indexterm><programlisting>#define gnutls_cred_set	gnutls_credentials_set
</programlisting>
<para>
</para></refsect2>
<refsect2 id="gnutls-certificate-credentials-st" role="struct">
<title>struct gnutls_certificate_credentials_st</title>
<indexterm zone="gnutls-certificate-credentials-st"><primary sortas="gnutls_certificate_credentials_st">gnutls_certificate_credentials_st</primary></indexterm><programlisting>struct gnutls_certificate_credentials_st;</programlisting>
<para>
</para></refsect2>
<refsect2 id="gnutls-anon-free-server-credentials" role="function">
<title>gnutls_anon_free_server_credentials ()</title>
<indexterm zone="gnutls-anon-free-server-credentials"><primary sortas="gnutls_anon_free_server_credentials">gnutls_anon_free_server_credentials</primary></indexterm><programlisting><link linkend="void">void</link>                gnutls_anon_free_server_credentials (<link linkend="gnutls-anon-server-credentials-t">gnutls_anon_server_credentials_t</link> sc);</programlisting>
<para>
This structure is complex enough to manipulate directly thus this
helper function is provided in order to free (deallocate) it.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>sc</parameter>&#160;:</term>
<listitem><simpara> is a <link linkend="gnutls-anon-server-credentials-t"><type>gnutls_anon_server_credentials_t</type></link> structure.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-anon-allocate-server-credentials" role="function">
<title>gnutls_anon_allocate_server_credentials ()</title>
<indexterm zone="gnutls-anon-allocate-server-credentials"><primary sortas="gnutls_anon_allocate_server_credentials">gnutls_anon_allocate_server_credentials</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_anon_allocate_server_credentials
                                                        (<link linkend="gnutls-anon-server-credentials-t">gnutls_anon_server_credentials_t</link> *sc);</programlisting>
<para>
This structure is complex enough to manipulate directly thus this
helper function is provided in order to allocate it.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>sc</parameter>&#160;:</term>
<listitem><simpara> is a pointer to a <link linkend="gnutls-anon-server-credentials-t"><type>gnutls_anon_server_credentials_t</type></link> structure.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> <link linkend="GNUTLS-E-SUCCESS--CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> on success, or an error code.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-anon-set-server-dh-params" role="function">
<title>gnutls_anon_set_server_dh_params ()</title>
<indexterm zone="gnutls-anon-set-server-dh-params"><primary sortas="gnutls_anon_set_server_dh_params">gnutls_anon_set_server_dh_params</primary></indexterm><programlisting><link linkend="void">void</link>                gnutls_anon_set_server_dh_params    (<link linkend="gnutls-anon-server-credentials-t">gnutls_anon_server_credentials_t</link> res,
                                                         <link linkend="gnutls-dh-params-t">gnutls_dh_params_t</link> dh_params);</programlisting>
<para>
This function will set the Diffie-Hellman parameters for an
anonymous server to use.  These parameters will be used in
Anonymous Diffie-Hellman cipher suites.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>res</parameter>&#160;:</term>
<listitem><simpara> is a gnutls_anon_server_credentials_t structure
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>dh_params</parameter>&#160;:</term>
<listitem><simpara> is a structure that holds Diffie-Hellman parameters.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-anon-set-server-params-function" role="function">
<title>gnutls_anon_set_server_params_function ()</title>
<indexterm zone="gnutls-anon-set-server-params-function"><primary sortas="gnutls_anon_set_server_params_function">gnutls_anon_set_server_params_function</primary></indexterm><programlisting><link linkend="void">void</link>                gnutls_anon_set_server_params_function
                                                        (<link linkend="gnutls-anon-server-credentials-t">gnutls_anon_server_credentials_t</link> res,
                                                         <link linkend="gnutls-params-function">gnutls_params_function</link> *func);</programlisting>
<para>
This function will set a callback in order for the server to get
the Diffie-Hellman parameters for anonymous authentication.  The
callback should return zero on success.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>res</parameter>&#160;:</term>
<listitem><simpara> is a gnutls_certificate_credentials_t structure
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>func</parameter>&#160;:</term>
<listitem><simpara> is the function to be called
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-anon-free-client-credentials" role="function">
<title>gnutls_anon_free_client_credentials ()</title>
<indexterm zone="gnutls-anon-free-client-credentials"><primary sortas="gnutls_anon_free_client_credentials">gnutls_anon_free_client_credentials</primary></indexterm><programlisting><link linkend="void">void</link>                gnutls_anon_free_client_credentials (<link linkend="gnutls-anon-client-credentials-t">gnutls_anon_client_credentials_t</link> sc);</programlisting>
<para>
This structure is complex enough to manipulate directly thus this
helper function is provided in order to free (deallocate) it.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>sc</parameter>&#160;:</term>
<listitem><simpara> is a <link linkend="gnutls-anon-client-credentials-t"><type>gnutls_anon_client_credentials_t</type></link> structure.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-anon-allocate-client-credentials" role="function">
<title>gnutls_anon_allocate_client_credentials ()</title>
<indexterm zone="gnutls-anon-allocate-client-credentials"><primary sortas="gnutls_anon_allocate_client_credentials">gnutls_anon_allocate_client_credentials</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_anon_allocate_client_credentials
                                                        (<link linkend="gnutls-anon-client-credentials-t">gnutls_anon_client_credentials_t</link> *sc);</programlisting>
<para>
This structure is complex enough to manipulate directly thus
this helper function is provided in order to allocate it.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>sc</parameter>&#160;:</term>
<listitem><simpara> is a pointer to a <link linkend="gnutls-anon-client-credentials-t"><type>gnutls_anon_client_credentials_t</type></link> structure.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> <link linkend="GNUTLS-E-SUCCESS--CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> on success, or an error code.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-certificate-free-credentials" role="function">
<title>gnutls_certificate_free_credentials ()</title>
<indexterm zone="gnutls-certificate-free-credentials"><primary sortas="gnutls_certificate_free_credentials">gnutls_certificate_free_credentials</primary></indexterm><programlisting><link linkend="void">void</link>                gnutls_certificate_free_credentials (<link linkend="gnutls-certificate-credentials-t">gnutls_certificate_credentials_t</link> sc);</programlisting>
<para>
This structure is complex enough to manipulate directly thus
this helper function is provided in order to free (deallocate) it.
</para>
<para>
This function does not free any temporary parameters associated
with this structure (ie RSA and DH parameters are not freed by
this function).</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>sc</parameter>&#160;:</term>
<listitem><simpara> is a <link linkend="gnutls-certificate-credentials-t"><type>gnutls_certificate_credentials_t</type></link> structure.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-certificate-allocate-credentials" role="function">
<title>gnutls_certificate_allocate_credentials ()</title>
<indexterm zone="gnutls-certificate-allocate-credentials"><primary sortas="gnutls_certificate_allocate_credentials">gnutls_certificate_allocate_credentials</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_certificate_allocate_credentials
                                                        (<link linkend="gnutls-certificate-credentials-t">gnutls_certificate_credentials_t</link> *res);</programlisting>
<para>
This structure is complex enough to manipulate directly thus this
helper function is provided in order to allocate it.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>res</parameter>&#160;:</term>
<listitem><simpara> is a pointer to a <link linkend="gnutls-certificate-credentials-t"><type>gnutls_certificate_credentials_t</type></link> structure.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> <link linkend="GNUTLS-E-SUCCESS--CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> on success, or an error code.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-certificate-free-keys" role="function">
<title>gnutls_certificate_free_keys ()</title>
<indexterm zone="gnutls-certificate-free-keys"><primary sortas="gnutls_certificate_free_keys">gnutls_certificate_free_keys</primary></indexterm><programlisting><link linkend="void">void</link>                gnutls_certificate_free_keys        (<link linkend="gnutls-certificate-credentials-t">gnutls_certificate_credentials_t</link> sc);</programlisting>
<para>
This function will delete all the keys and the certificates associated
with the given credentials. This function must not be called when a
TLS negotiation that uses the credentials is in progress.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>sc</parameter>&#160;:</term>
<listitem><simpara> is a <link linkend="gnutls-certificate-credentials-t"><type>gnutls_certificate_credentials_t</type></link> structure.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-certificate-free-cas" role="function">
<title>gnutls_certificate_free_cas ()</title>
<indexterm zone="gnutls-certificate-free-cas"><primary sortas="gnutls_certificate_free_cas">gnutls_certificate_free_cas</primary></indexterm><programlisting><link linkend="void">void</link>                gnutls_certificate_free_cas         (<link linkend="gnutls-certificate-credentials-t">gnutls_certificate_credentials_t</link> sc);</programlisting>
<para>
This function will delete all the CAs associated
with the given credentials. Servers that do not use
<link linkend="gnutls-certificate-verify-peers2"><function>gnutls_certificate_verify_peers2()</function></link> may call this to
save some memory.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>sc</parameter>&#160;:</term>
<listitem><simpara> is a <link linkend="gnutls-certificate-credentials-t"><type>gnutls_certificate_credentials_t</type></link> structure.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-certificate-free-ca-names" role="function">
<title>gnutls_certificate_free_ca_names ()</title>
<indexterm zone="gnutls-certificate-free-ca-names"><primary sortas="gnutls_certificate_free_ca_names">gnutls_certificate_free_ca_names</primary></indexterm><programlisting><link linkend="void">void</link>                gnutls_certificate_free_ca_names    (<link linkend="gnutls-certificate-credentials-t">gnutls_certificate_credentials_t</link> sc);</programlisting>
<para>
This function will delete all the CA name in the
given credentials. Clients may call this to save some memory
since in client side the CA names are not used.
</para>
<para>
CA names are used by servers to advertize the CAs they
support to clients.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>sc</parameter>&#160;:</term>
<listitem><simpara> is a <link linkend="gnutls-certificate-credentials-t"><type>gnutls_certificate_credentials_t</type></link> structure.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-certificate-free-crls" role="function">
<title>gnutls_certificate_free_crls ()</title>
<indexterm zone="gnutls-certificate-free-crls"><primary sortas="gnutls_certificate_free_crls">gnutls_certificate_free_crls</primary></indexterm><programlisting><link linkend="void">void</link>                gnutls_certificate_free_crls        (<link linkend="gnutls-certificate-credentials-t">gnutls_certificate_credentials_t</link> sc);</programlisting>
<para>
This function will delete all the CRLs associated
with the given credentials.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>sc</parameter>&#160;:</term>
<listitem><simpara> is a <link linkend="gnutls-certificate-credentials-t"><type>gnutls_certificate_credentials_t</type></link> structure.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-certificate-set-dh-params" role="function">
<title>gnutls_certificate_set_dh_params ()</title>
<indexterm zone="gnutls-certificate-set-dh-params"><primary sortas="gnutls_certificate_set_dh_params">gnutls_certificate_set_dh_params</primary></indexterm><programlisting><link linkend="void">void</link>                gnutls_certificate_set_dh_params    (<link linkend="gnutls-certificate-credentials-t">gnutls_certificate_credentials_t</link> res,
                                                         <link linkend="gnutls-dh-params-t">gnutls_dh_params_t</link> dh_params);</programlisting>
<para>
This function will set the Diffie-Hellman parameters for a
certificate server to use. These parameters will be used in
Ephemeral Diffie-Hellman cipher suites.  Note that only a pointer
to the parameters are stored in the certificate handle, so if you
deallocate the parameters before the certificate is deallocated,
you must change the parameters stored in the certificate first.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>res</parameter>&#160;:</term>
<listitem><simpara> is a gnutls_certificate_credentials_t structure
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>dh_params</parameter>&#160;:</term>
<listitem><simpara> is a structure that holds Diffie-Hellman parameters.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-certificate-set-rsa-export-params" role="function">
<title>gnutls_certificate_set_rsa_export_params ()</title>
<indexterm zone="gnutls-certificate-set-rsa-export-params"><primary sortas="gnutls_certificate_set_rsa_export_params">gnutls_certificate_set_rsa_export_params</primary></indexterm><programlisting><link linkend="void">void</link>                gnutls_certificate_set_rsa_export_params
                                                        (<link linkend="gnutls-certificate-credentials-t">gnutls_certificate_credentials_t</link> res,
                                                         <link linkend="gnutls-rsa-params-t">gnutls_rsa_params_t</link> rsa_params);</programlisting>
<para>
This function will set the temporary RSA parameters for a
certificate server to use.  These parameters will be used in
RSA-EXPORT cipher suites.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>res</parameter>&#160;:</term>
<listitem><simpara> is a gnutls_certificate_credentials_t structure
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>rsa_params</parameter>&#160;:</term>
<listitem><simpara> is a structure that holds temporary RSA parameters.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-certificate-set-verify-flags" role="function">
<title>gnutls_certificate_set_verify_flags ()</title>
<indexterm zone="gnutls-certificate-set-verify-flags"><primary sortas="gnutls_certificate_set_verify_flags">gnutls_certificate_set_verify_flags</primary></indexterm><programlisting><link linkend="void">void</link>                gnutls_certificate_set_verify_flags (<link linkend="gnutls-certificate-credentials-t">gnutls_certificate_credentials_t</link> res,
                                                         unsigned <link linkend="int">int</link> flags);</programlisting>
<para>
This function will set the flags to be used at verification of the
certificates.  Flags must be OR of the
<link linkend="gnutls-certificate-verify-flags"><type>gnutls_certificate_verify_flags</type></link> enumerations.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>res</parameter>&#160;:</term>
<listitem><simpara> is a gnutls_certificate_credentials_t structure
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>flags</parameter>&#160;:</term>
<listitem><simpara> are the flags
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-certificate-set-verify-limits" role="function">
<title>gnutls_certificate_set_verify_limits ()</title>
<indexterm zone="gnutls-certificate-set-verify-limits"><primary sortas="gnutls_certificate_set_verify_limits">gnutls_certificate_set_verify_limits</primary></indexterm><programlisting><link linkend="void">void</link>                gnutls_certificate_set_verify_limits
                                                        (<link linkend="gnutls-certificate-credentials-t">gnutls_certificate_credentials_t</link> res,
                                                         unsigned <link linkend="int">int</link> max_bits,
                                                         unsigned <link linkend="int">int</link> max_depth);</programlisting>
<para>
This function will set some upper limits for the default
verification function, <link linkend="gnutls-certificate-verify-peers2"><function>gnutls_certificate_verify_peers2()</function></link>, to avoid
denial of service attacks.  You can set them to zero to disable
limits.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>res</parameter>&#160;:</term>
<listitem><simpara> is a gnutls_certificate_credentials structure
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>max_bits</parameter>&#160;:</term>
<listitem><simpara> is the number of bits of an acceptable certificate (default 8200)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>max_depth</parameter>&#160;:</term>
<listitem><simpara> is maximum depth of the verification of a certificate chain (default 5)
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-certificate-set-x509-trust-file" role="function">
<title>gnutls_certificate_set_x509_trust_file ()</title>
<indexterm zone="gnutls-certificate-set-x509-trust-file"><primary sortas="gnutls_certificate_set_x509_trust_file">gnutls_certificate_set_x509_trust_file</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_certificate_set_x509_trust_file
                                                        (<link linkend="gnutls-certificate-credentials-t">gnutls_certificate_credentials_t</link> res,
                                                         const <link linkend="char">char</link> *cafile,
                                                         <link linkend="gnutls-x509-crt-fmt-t">gnutls_x509_crt_fmt_t</link> type);</programlisting>
<para>
This function adds the trusted CAs in order to verify client or
server certificates. In case of a client this is not required to
be called if the certificates are not verified using
<link linkend="gnutls-certificate-verify-peers2"><function>gnutls_certificate_verify_peers2()</function></link>.  This function may be called
multiple times.
</para>
<para>
In case of a server the names of the CAs set here will be sent to
the client if a certificate request is sent. This can be disabled
using <link linkend="gnutls-certificate-send-x509-rdn-sequence"><function>gnutls_certificate_send_x509_rdn_sequence()</function></link>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>res</parameter>&#160;:</term>
<listitem><simpara> is a <link linkend="gnutls-certificate-credentials-t"><type>gnutls_certificate_credentials_t</type></link> structure.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>cafile</parameter>&#160;:</term>
<listitem><simpara> is a file containing the list of trusted CAs (DER or PEM list)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>type</parameter>&#160;:</term>
<listitem><simpara> is PEM or DER
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> number of certificates processed, or a negative value on
error.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-certificate-set-x509-trust-mem" role="function">
<title>gnutls_certificate_set_x509_trust_mem ()</title>
<indexterm zone="gnutls-certificate-set-x509-trust-mem"><primary sortas="gnutls_certificate_set_x509_trust_mem">gnutls_certificate_set_x509_trust_mem</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_certificate_set_x509_trust_mem
                                                        (<link linkend="gnutls-certificate-credentials-t">gnutls_certificate_credentials_t</link> res,
                                                         const <link linkend="gnutls-datum-t">gnutls_datum_t</link> *ca,
                                                         <link linkend="gnutls-x509-crt-fmt-t">gnutls_x509_crt_fmt_t</link> type);</programlisting>
<para>
This function adds the trusted CAs in order to verify client or
server certificates. In case of a client this is not required to
be called if the certificates are not verified using
<link linkend="gnutls-certificate-verify-peers2"><function>gnutls_certificate_verify_peers2()</function></link>.  This function may be called
multiple times.
</para>
<para>
In case of a server the CAs set here will be sent to the client if
a certificate request is sent. This can be disabled using
<link linkend="gnutls-certificate-send-x509-rdn-sequence"><function>gnutls_certificate_send_x509_rdn_sequence()</function></link>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>res</parameter>&#160;:</term>
<listitem><simpara> is a <link linkend="gnutls-certificate-credentials-t"><type>gnutls_certificate_credentials_t</type></link> structure.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ca</parameter>&#160;:</term>
<listitem><simpara> is a list of trusted CAs or a DER certificate
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>type</parameter>&#160;:</term>
<listitem><simpara> is DER or PEM
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> the number of certificates processed or a negative value
on error.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-certificate-set-x509-crl-file" role="function">
<title>gnutls_certificate_set_x509_crl_file ()</title>
<indexterm zone="gnutls-certificate-set-x509-crl-file"><primary sortas="gnutls_certificate_set_x509_crl_file">gnutls_certificate_set_x509_crl_file</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_certificate_set_x509_crl_file
                                                        (<link linkend="gnutls-certificate-credentials-t">gnutls_certificate_credentials_t</link> res,
                                                         const <link linkend="char">char</link> *crlfile,
                                                         <link linkend="gnutls-x509-crt-fmt-t">gnutls_x509_crt_fmt_t</link> type);</programlisting>
<para>
This function adds the trusted CRLs in order to verify client or server
certificates.  In case of a client this is not required
to be called if the certificates are not verified using
<link linkend="gnutls-certificate-verify-peers2"><function>gnutls_certificate_verify_peers2()</function></link>.
This function may be called multiple times.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>res</parameter>&#160;:</term>
<listitem><simpara> is a <link linkend="gnutls-certificate-credentials-t"><type>gnutls_certificate_credentials_t</type></link> structure.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>crlfile</parameter>&#160;:</term>
<listitem><simpara> is a file containing the list of verified CRLs (DER or PEM list)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>type</parameter>&#160;:</term>
<listitem><simpara> is PEM or DER
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> number of CRLs processed or a negative value on error.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-certificate-set-x509-crl-mem" role="function">
<title>gnutls_certificate_set_x509_crl_mem ()</title>
<indexterm zone="gnutls-certificate-set-x509-crl-mem"><primary sortas="gnutls_certificate_set_x509_crl_mem">gnutls_certificate_set_x509_crl_mem</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_certificate_set_x509_crl_mem (<link linkend="gnutls-certificate-credentials-t">gnutls_certificate_credentials_t</link> res,
                                                         const <link linkend="gnutls-datum-t">gnutls_datum_t</link> *CRL,
                                                         <link linkend="gnutls-x509-crt-fmt-t">gnutls_x509_crt_fmt_t</link> type);</programlisting>
<para>
This function adds the trusted CRLs in order to verify client or
server certificates.  In case of a client this is not required to
be called if the certificates are not verified using
<link linkend="gnutls-certificate-verify-peers2"><function>gnutls_certificate_verify_peers2()</function></link>.  This function may be called
multiple times.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>res</parameter>&#160;:</term>
<listitem><simpara> is a <link linkend="gnutls-certificate-credentials-t"><type>gnutls_certificate_credentials_t</type></link> structure.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>CRL</parameter>&#160;:</term>
<listitem><simpara> is a list of trusted CRLs. They should have been verified before.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>type</parameter>&#160;:</term>
<listitem><simpara> is DER or PEM
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> number of CRLs processed, or a negative value on error.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-certificate-set-x509-key-file" role="function">
<title>gnutls_certificate_set_x509_key_file ()</title>
<indexterm zone="gnutls-certificate-set-x509-key-file"><primary sortas="gnutls_certificate_set_x509_key_file">gnutls_certificate_set_x509_key_file</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_certificate_set_x509_key_file
                                                        (<link linkend="gnutls-certificate-credentials-t">gnutls_certificate_credentials_t</link> res,
                                                         const <link linkend="char">char</link> *certfile,
                                                         const <link linkend="char">char</link> *keyfile,
                                                         <link linkend="gnutls-x509-crt-fmt-t">gnutls_x509_crt_fmt_t</link> type);</programlisting>
<para>
This function sets a certificate/private key pair in the
gnutls_certificate_credentials_t structure.  This function may be
called more than once (in case multiple keys/certificates exist
for the server).
</para>
<para>
Currently only PKCS-1 encoded RSA and DSA private keys are accepted by
this function.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>res</parameter>&#160;:</term>
<listitem><simpara> is a <link linkend="gnutls-certificate-credentials-t"><type>gnutls_certificate_credentials_t</type></link> structure.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>certfile</parameter>&#160;:</term>
<listitem><simpara> is a file that containing the certificate list (path) for
  the specified private key, in PKCS7 format, or a list of certificates
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>keyfile</parameter>&#160;:</term>
<listitem><simpara> is a file that contains the private key
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>type</parameter>&#160;:</term>
<listitem><simpara> is PEM or DER
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> <link linkend="GNUTLS-E-SUCCESS--CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> on success, or an error code.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-certificate-set-x509-key-mem" role="function">
<title>gnutls_certificate_set_x509_key_mem ()</title>
<indexterm zone="gnutls-certificate-set-x509-key-mem"><primary sortas="gnutls_certificate_set_x509_key_mem">gnutls_certificate_set_x509_key_mem</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_certificate_set_x509_key_mem (<link linkend="gnutls-certificate-credentials-t">gnutls_certificate_credentials_t</link> res,
                                                         const <link linkend="gnutls-datum-t">gnutls_datum_t</link> *cert,
                                                         const <link linkend="gnutls-datum-t">gnutls_datum_t</link> *key,
                                                         <link linkend="gnutls-x509-crt-fmt-t">gnutls_x509_crt_fmt_t</link> type);</programlisting>
<para>
This function sets a certificate/private key pair in the
gnutls_certificate_credentials_t structure. This function may be called
more than once (in case multiple keys/certificates exist for the
server).
</para>
<para>
Currently are supported: RSA PKCS-1 encoded private keys,
DSA private keys.
</para>
<para>
DSA private keys are encoded the OpenSSL way, which is an ASN.1
DER sequence of 6 INTEGERs - version, p, q, g, pub, priv.
</para>
<para>
Note that the keyUsage (2.5.29.15) PKIX extension in X.509 certificates
is supported. This means that certificates intended for signing cannot
be used for ciphersuites that require encryption.
</para>
<para>
If the certificate and the private key are given in PEM encoding
then the strings that hold their values must be null terminated.
</para>
<para>
The <parameter>key</parameter> may be <link linkend="NULL--CAPS"><literal>NULL</literal></link> if you are using a sign callback, see
<link linkend="gnutls-sign-callback-set"><function>gnutls_sign_callback_set()</function></link>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>res</parameter>&#160;:</term>
<listitem><simpara> is a <link linkend="gnutls-certificate-credentials-t"><type>gnutls_certificate_credentials_t</type></link> structure.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>cert</parameter>&#160;:</term>
<listitem><simpara> contains a certificate list (path) for the specified private key
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>key</parameter>&#160;:</term>
<listitem><simpara> is the private key, or <link linkend="NULL--CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>type</parameter>&#160;:</term>
<listitem><simpara> is PEM or DER
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> <link linkend="GNUTLS-E-SUCCESS--CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> on success, or an error code.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-certificate-send-x509-rdn-sequence" role="function">
<title>gnutls_certificate_send_x509_rdn_sequence ()</title>
<indexterm zone="gnutls-certificate-send-x509-rdn-sequence"><primary sortas="gnutls_certificate_send_x509_rdn_sequence">gnutls_certificate_send_x509_rdn_sequence</primary></indexterm><programlisting><link linkend="void">void</link>                gnutls_certificate_send_x509_rdn_sequence
                                                        (<link linkend="gnutls-session-t">gnutls_session_t</link> session,
                                                         <link linkend="int">int</link> status);</programlisting>
<para>
If status is non zero, this function will order gnutls not to send
the rdnSequence in the certificate request message. That is the
server will not advertize it's trusted CAs to the peer. If status
is zero then the default behaviour will take effect, which is to
advertize the server's trusted CAs.
</para>
<para>
This function has no effect in clients, and in authentication
methods other than certificate with X.509 certificates.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&#160;:</term>
<listitem><simpara> is a pointer to a <link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> structure.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>status</parameter>&#160;:</term>
<listitem><simpara> is 0 or 1
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-certificate-set-x509-simple-pkcs12-file" role="function">
<title>gnutls_certificate_set_x509_simple_pkcs12_file ()</title>
<indexterm zone="gnutls-certificate-set-x509-simple-pkcs12-file"><primary sortas="gnutls_certificate_set_x509_simple_pkcs12_file">gnutls_certificate_set_x509_simple_pkcs12_file</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_certificate_set_x509_simple_pkcs12_file
                                                        (<link linkend="gnutls-certificate-credentials-t">gnutls_certificate_credentials_t</link> res,
                                                         const <link linkend="char">char</link> *pkcs12file,
                                                         <link linkend="gnutls-x509-crt-fmt-t">gnutls_x509_crt_fmt_t</link> type,
                                                         const <link linkend="char">char</link> *password);</programlisting>
<para>
This function sets a certificate/private key pair and/or a CRL in
the gnutls_certificate_credentials_t structure.  This function may
be called more than once (in case multiple keys/certificates exist
for the server).
</para>
<para>
MAC:ed PKCS<link linkend="12--CAPS"><type>12</type></link> files are supported.  Encrypted PKCS<link linkend="12--CAPS"><type>12</type></link> bags are
supported.  Encrypted PKCS<link linkend="8--CAPS"><type>8</type></link> private keys are supported.  However,
only password based security, and the same password for all
operations, are supported.
</para>
<para>
The private keys may be RSA PKCS<link linkend="1--CAPS"><type>1</type></link> or DSA private keys encoded in
the OpenSSL way.
</para>
<para>
PKCS<link linkend="12--CAPS"><type>12</type></link> file may contain many keys and/or certificates, and there
is no way to identify which key/certificate pair you want.  You
should make sure the PKCS<link linkend="12--CAPS"><type>12</type></link> file only contain one key/certificate
pair and/or one CRL.
</para>
<para>
It is believed that the limitations of this function is acceptable
for most usage, and that any more flexibility would introduce
complexity that would make it harder to use this functionality at
all.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>res</parameter>&#160;:</term>
<listitem><simpara> is a <link linkend="gnutls-certificate-credentials-t"><type>gnutls_certificate_credentials_t</type></link> structure.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>pkcs12file</parameter>&#160;:</term>
<listitem><simpara> filename of file containing PKCS<link linkend="12--CAPS"><type>12</type></link> blob.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>type</parameter>&#160;:</term>
<listitem><simpara> is PEM or DER of the <parameter>pkcs12file</parameter>.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>password</parameter>&#160;:</term>
<listitem><simpara> optional password used to decrypt PKCS<link linkend="12--CAPS"><type>12</type></link> file, bags and keys.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> <link linkend="GNUTLS-E-SUCCESS--CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> on success, or an error code.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-certificate-set-x509-simple-pkcs12-mem" role="function" condition="since:2.8.0">
<title>gnutls_certificate_set_x509_simple_pkcs12_mem ()</title>
<indexterm zone="gnutls-certificate-set-x509-simple-pkcs12-mem" role="2.8.0"><primary sortas="gnutls_certificate_set_x509_simple_pkcs12_mem">gnutls_certificate_set_x509_simple_pkcs12_mem</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_certificate_set_x509_simple_pkcs12_mem
                                                        (<link linkend="gnutls-certificate-credentials-t">gnutls_certificate_credentials_t</link> res,
                                                         const <link linkend="gnutls-datum">gnutls_datum</link> *p12blob,
                                                         <link linkend="gnutls-x509-crt-fmt-t">gnutls_x509_crt_fmt_t</link> type,
                                                         const <link linkend="char">char</link> *password);</programlisting>
<para>
This function sets a certificate/private key pair and/or a CRL in
the gnutls_certificate_credentials_t structure.  This function may
be called more than once (in case multiple keys/certificates exist
for the server).
</para>
<para>
MAC:ed PKCS<link linkend="12--CAPS"><type>12</type></link> files are supported.  Encrypted PKCS<link linkend="12--CAPS"><type>12</type></link> bags are
supported.  Encrypted PKCS<link linkend="8--CAPS"><type>8</type></link> private keys are supported.  However,
only password based security, and the same password for all
operations, are supported.
</para>
<para>
The private keys may be RSA PKCS<link linkend="1--CAPS"><type>1</type></link> or DSA private keys encoded in
the OpenSSL way.
</para>
<para>
PKCS<link linkend="12--CAPS"><type>12</type></link> file may contain many keys and/or certificates, and there
is no way to identify which key/certificate pair you want.  You
should make sure the PKCS<link linkend="12--CAPS"><type>12</type></link> file only contain one key/certificate
pair and/or one CRL.
</para>
<para>
It is believed that the limitations of this function is acceptable
for most usage, and that any more flexibility would introduce
complexity that would make it harder to use this functionality at
all.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>res</parameter>&#160;:</term>
<listitem><simpara> is a <link linkend="gnutls-certificate-credentials-t"><type>gnutls_certificate_credentials_t</type></link> structure.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>p12blob</parameter>&#160;:</term>
<listitem><simpara> the PKCS<link linkend="12--CAPS"><type>12</type></link> blob.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>type</parameter>&#160;:</term>
<listitem><simpara> is PEM or DER of the <parameter>pkcs12file</parameter>.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>password</parameter>&#160;:</term>
<listitem><simpara> optional password used to decrypt PKCS<link linkend="12--CAPS"><type>12</type></link> file, bags and keys.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> <link linkend="GNUTLS-E-SUCCESS--CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> on success, or an error code.

</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 2.8.0</para></refsect2>
<refsect2 id="gnutls-x509-privkey-t" role="typedef">
<title>gnutls_x509_privkey_t</title>
<indexterm zone="gnutls-x509-privkey-t"><primary sortas="gnutls_x509_privkey_t">gnutls_x509_privkey_t</primary></indexterm><programlisting>  typedef struct gnutls_x509_privkey_int *gnutls_x509_privkey_t;
</programlisting>
<para>
</para></refsect2>
<refsect2 id="gnutls-x509-crl-int" role="struct">
<title>struct gnutls_x509_crl_int</title>
<indexterm zone="gnutls-x509-crl-int"><primary sortas="gnutls_x509_crl_int">gnutls_x509_crl_int</primary></indexterm><programlisting>struct gnutls_x509_crl_int;</programlisting>
<para>
</para></refsect2>
<refsect2 id="gnutls-x509-crl-t" role="typedef">
<title>gnutls_x509_crl_t</title>
<indexterm zone="gnutls-x509-crl-t"><primary sortas="gnutls_x509_crl_t">gnutls_x509_crl_t</primary></indexterm><programlisting>  typedef struct gnutls_x509_crl_int *gnutls_x509_crl_t;
</programlisting>
<para>
</para></refsect2>
<refsect2 id="gnutls-x509-crt-int" role="struct">
<title>struct gnutls_x509_crt_int</title>
<indexterm zone="gnutls-x509-crt-int"><primary sortas="gnutls_x509_crt_int">gnutls_x509_crt_int</primary></indexterm><programlisting>struct gnutls_x509_crt_int;</programlisting>
<para>
</para></refsect2>
<refsect2 id="gnutls-x509-crt-t" role="typedef">
<title>gnutls_x509_crt_t</title>
<indexterm zone="gnutls-x509-crt-t"><primary sortas="gnutls_x509_crt_t">gnutls_x509_crt_t</primary></indexterm><programlisting>  typedef struct gnutls_x509_crt_int *gnutls_x509_crt_t;
</programlisting>
<para>
</para></refsect2>
<refsect2 id="gnutls-openpgp-keyring-int" role="struct">
<title>struct gnutls_openpgp_keyring_int</title>
<indexterm zone="gnutls-openpgp-keyring-int"><primary sortas="gnutls_openpgp_keyring_int">gnutls_openpgp_keyring_int</primary></indexterm><programlisting>struct gnutls_openpgp_keyring_int;</programlisting>
<para>
</para></refsect2>
<refsect2 id="gnutls-openpgp-keyring-t" role="typedef">
<title>gnutls_openpgp_keyring_t</title>
<indexterm zone="gnutls-openpgp-keyring-t"><primary sortas="gnutls_openpgp_keyring_t">gnutls_openpgp_keyring_t</primary></indexterm><programlisting>  typedef struct gnutls_openpgp_keyring_int *gnutls_openpgp_keyring_t;
</programlisting>
<para>
</para></refsect2>
<refsect2 id="gnutls-certificate-set-x509-key" role="function" condition="since:2.4.0">
<title>gnutls_certificate_set_x509_key ()</title>
<indexterm zone="gnutls-certificate-set-x509-key" role="2.4.0"><primary sortas="gnutls_certificate_set_x509_key">gnutls_certificate_set_x509_key</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_certificate_set_x509_key     (<link linkend="gnutls-certificate-credentials-t">gnutls_certificate_credentials_t</link> res,
                                                         <link linkend="gnutls-x509-crt-t">gnutls_x509_crt_t</link> *cert_list,
                                                         <link linkend="int">int</link> cert_list_size,
                                                         <link linkend="gnutls-x509-privkey-t">gnutls_x509_privkey_t</link> key);</programlisting>
<para>
This function sets a certificate/private key pair in the
gnutls_certificate_credentials_t structure.  This function may be
called more than once (in case multiple keys/certificates exist
for the server).</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>res</parameter>&#160;:</term>
<listitem><simpara> is a <link linkend="gnutls-certificate-credentials-t"><type>gnutls_certificate_credentials_t</type></link> structure.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>cert_list</parameter>&#160;:</term>
<listitem><simpara> contains a certificate list (path) for the specified private key
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>cert_list_size</parameter>&#160;:</term>
<listitem><simpara> holds the size of the certificate list
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>key</parameter>&#160;:</term>
<listitem><simpara> is a gnutls_x509_privkey_t key
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> <link linkend="GNUTLS-E-SUCCESS--CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> on success, or an error code.

</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 2.4.0</para></refsect2>
<refsect2 id="gnutls-certificate-set-x509-trust" role="function" condition="since:2.4.0">
<title>gnutls_certificate_set_x509_trust ()</title>
<indexterm zone="gnutls-certificate-set-x509-trust" role="2.4.0"><primary sortas="gnutls_certificate_set_x509_trust">gnutls_certificate_set_x509_trust</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_certificate_set_x509_trust   (<link linkend="gnutls-certificate-credentials-t">gnutls_certificate_credentials_t</link> res,
                                                         <link linkend="gnutls-x509-crt-t">gnutls_x509_crt_t</link> *ca_list,
                                                         <link linkend="int">int</link> ca_list_size);</programlisting>
<para>
This function adds the trusted CAs in order to verify client
or server certificates. In case of a client this is not required
to be called if the certificates are not verified using
<link linkend="gnutls-certificate-verify-peers2"><function>gnutls_certificate_verify_peers2()</function></link>.
This function may be called multiple times.
</para>
<para>
In case of a server the CAs set here will be sent to the client if
a certificate request is sent. This can be disabled using
<link linkend="gnutls-certificate-send-x509-rdn-sequence"><function>gnutls_certificate_send_x509_rdn_sequence()</function></link>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>res</parameter>&#160;:</term>
<listitem><simpara> is a <link linkend="gnutls-certificate-credentials-t"><type>gnutls_certificate_credentials_t</type></link> structure.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ca_list</parameter>&#160;:</term>
<listitem><simpara> is a list of trusted CAs
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ca_list_size</parameter>&#160;:</term>
<listitem><simpara> holds the size of the CA list
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> <link linkend="GNUTLS-E-SUCCESS--CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> on success, or an error code.

</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 2.4.0</para></refsect2>
<refsect2 id="gnutls-certificate-set-x509-crl" role="function" condition="since:2.4.0">
<title>gnutls_certificate_set_x509_crl ()</title>
<indexterm zone="gnutls-certificate-set-x509-crl" role="2.4.0"><primary sortas="gnutls_certificate_set_x509_crl">gnutls_certificate_set_x509_crl</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_certificate_set_x509_crl     (<link linkend="gnutls-certificate-credentials-t">gnutls_certificate_credentials_t</link> res,
                                                         <link linkend="gnutls-x509-crl-t">gnutls_x509_crl_t</link> *crl_list,
                                                         <link linkend="int">int</link> crl_list_size);</programlisting>
<para>
This function adds the trusted CRLs in order to verify client or
server certificates.  In case of a client this is not required to
be called if the certificates are not verified using
<link linkend="gnutls-certificate-verify-peers2"><function>gnutls_certificate_verify_peers2()</function></link>.  This function may be called
multiple times.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>res</parameter>&#160;:</term>
<listitem><simpara> is a <link linkend="gnutls-certificate-credentials-t"><type>gnutls_certificate_credentials_t</type></link> structure.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>crl_list</parameter>&#160;:</term>
<listitem><simpara> is a list of trusted CRLs. They should have been verified before.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>crl_list_size</parameter>&#160;:</term>
<listitem><simpara> holds the size of the crl_list
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> <link linkend="GNUTLS-E-SUCCESS--CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> on success, or an error code.

</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 2.4.0</para></refsect2>
<refsect2 id="gnutls-certificate-get-x509-cas" role="function" condition="since:2.4.0">
<title>gnutls_certificate_get_x509_cas ()</title>
<indexterm zone="gnutls-certificate-get-x509-cas" role="2.4.0"><primary sortas="gnutls_certificate_get_x509_cas">gnutls_certificate_get_x509_cas</primary></indexterm><programlisting><link linkend="void">void</link>                gnutls_certificate_get_x509_cas     (<link linkend="gnutls-certificate-credentials-t">gnutls_certificate_credentials_t</link> sc,
                                                         <link linkend="gnutls-x509-crt-t">gnutls_x509_crt_t</link> **x509_ca_list,
                                                         unsigned <link linkend="int">int</link> *ncas);</programlisting>
<para>
This function will export all the CAs associated
with the given credentials.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>sc</parameter>&#160;:</term>
<listitem><simpara> is a <link linkend="gnutls-certificate-credentials-t"><type>gnutls_certificate_credentials_t</type></link> structure.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>x509_ca_list</parameter>&#160;:</term>
<listitem><simpara> will point to the CA list. Should be treated as constant
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ncas</parameter>&#160;:</term>
<listitem><simpara> the number of CAs
</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 2.4.0</para></refsect2>
<refsect2 id="gnutls-certificate-get-x509-crls" role="function" condition="since:2.4.0">
<title>gnutls_certificate_get_x509_crls ()</title>
<indexterm zone="gnutls-certificate-get-x509-crls" role="2.4.0"><primary sortas="gnutls_certificate_get_x509_crls">gnutls_certificate_get_x509_crls</primary></indexterm><programlisting><link linkend="void">void</link>                gnutls_certificate_get_x509_crls    (<link linkend="gnutls-certificate-credentials-t">gnutls_certificate_credentials_t</link> sc,
                                                         <link linkend="gnutls-x509-crl-t">gnutls_x509_crl_t</link> **x509_crl_list,
                                                         unsigned <link linkend="int">int</link> *ncrls);</programlisting>
<para>
This function will export all the CRLs associated with the given
credentials.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>sc</parameter>&#160;:</term>
<listitem><simpara> is a <link linkend="gnutls-certificate-credentials-t"><type>gnutls_certificate_credentials_t</type></link> structure.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>x509_crl_list</parameter>&#160;:</term>
<listitem><simpara> the exported CRL list. Should be treated as constant
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ncrls</parameter>&#160;:</term>
<listitem><simpara> the number of exported CRLs
</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 2.4.0</para></refsect2>
<refsect2 id="gnutls-certificate-get-openpgp-keyring" role="function" condition="since:2.4.0">
<title>gnutls_certificate_get_openpgp_keyring ()</title>
<indexterm zone="gnutls-certificate-get-openpgp-keyring" role="2.4.0"><primary sortas="gnutls_certificate_get_openpgp_keyring">gnutls_certificate_get_openpgp_keyring</primary></indexterm><programlisting><link linkend="void">void</link>                gnutls_certificate_get_openpgp_keyring
                                                        (<link linkend="gnutls-certificate-credentials-t">gnutls_certificate_credentials_t</link> sc,
                                                         <link linkend="gnutls-openpgp-keyring-t">gnutls_openpgp_keyring_t</link> *keyring);</programlisting>
<para>
This function will export the OpenPGP keyring associated with the
given credentials.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>sc</parameter>&#160;:</term>
<listitem><simpara> is a <link linkend="gnutls-certificate-credentials-t"><type>gnutls_certificate_credentials_t</type></link> structure.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>keyring</parameter>&#160;:</term>
<listitem><simpara> the exported keyring. Should be treated as constant
</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 2.4.0</para></refsect2>
<refsect2 id="gnutls-global-init" role="function">
<title>gnutls_global_init ()</title>
<indexterm zone="gnutls-global-init"><primary sortas="gnutls_global_init">gnutls_global_init</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_global_init                  (void);</programlisting>
<para>
This function initializes the global data to defaults.  Every
gnutls application has a global data which holds common parameters
shared by gnutls session structures.  You should call
<link linkend="gnutls-global-deinit"><function>gnutls_global_deinit()</function></link> when gnutls usage is no longer needed
</para>
<para>
Note that this function will also initialize libgcrypt, if it has
not been initialized before.  Thus if you want to manually
initialize libgcrypt you must do it before calling this function.
This is useful in cases you want to disable libgcrypt's internal
lockings etc.
</para>
<para>
This function increment a global counter, so that
<link linkend="gnutls-global-deinit"><function>gnutls_global_deinit()</function></link> only releases resources when it has been
called as many times as <link linkend="gnutls-global-init"><function>gnutls_global_init()</function></link>.  This is useful when
GnuTLS is used by more than one library in an application.  This
function can be called many times, but will only do something the
first time.
</para>
<para>
Note!  This function is not thread safe.  If two threads call this
function simultaneously, they can cause a race between checking
the global counter and incrementing it, causing both threads to
execute the library initialization code.  That would lead to a
memory leak.  To handle this, your application could invoke this
function after aquiring a thread mutex.  To ignore the potential
memory leak is also an option.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> On success, <link linkend="GNUTLS-E-SUCCESS--CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> (zero) is returned,
  otherwise an error code is returned.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-global-deinit" role="function">
<title>gnutls_global_deinit ()</title>
<indexterm zone="gnutls-global-deinit"><primary sortas="gnutls_global_deinit">gnutls_global_deinit</primary></indexterm><programlisting><link linkend="void">void</link>                gnutls_global_deinit                (void);</programlisting>
<para>
This function deinitializes the global data, that were initialized
using <link linkend="gnutls-global-init"><function>gnutls_global_init()</function></link>.
</para>
<para>
Note!  This function is not thread safe.  See the discussion for
<link linkend="gnutls-global-init"><function>gnutls_global_init()</function></link> for more information.</para>
<para>
</para></refsect2>
<refsect2 id="gnutls-alloc-function" role="function">
<title>gnutls_alloc_function ()</title>
<indexterm zone="gnutls-alloc-function"><primary sortas="gnutls_alloc_function">gnutls_alloc_function</primary></indexterm><programlisting><link linkend="void">void</link> *              (*gnutls_alloc_function)            (<link linkend="size-t">size_t</link> );</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>Param1</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-calloc-function" role="function">
<title>gnutls_calloc_function ()</title>
<indexterm zone="gnutls-calloc-function"><primary sortas="gnutls_calloc_function">gnutls_calloc_function</primary></indexterm><programlisting><link linkend="void">void</link> *              (*gnutls_calloc_function)           (<link linkend="size-t">size_t</link> ,
                                                         <link linkend="size-t">size_t</link> );</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>Param1</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>Param2</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-is-secure-function" role="function">
<title>gnutls_is_secure_function ()</title>
<indexterm zone="gnutls-is-secure-function"><primary sortas="gnutls_is_secure_function">gnutls_is_secure_function</primary></indexterm><programlisting><link linkend="int">int</link>                 (*gnutls_is_secure_function)        (const <link linkend="void">void</link> *);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>Param1</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-free-function" role="function">
<title>gnutls_free_function ()</title>
<indexterm zone="gnutls-free-function"><primary sortas="gnutls_free_function">gnutls_free_function</primary></indexterm><programlisting><link linkend="void">void</link>                (*gnutls_free_function)             (<link linkend="void">void</link> *);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>Param1</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-realloc-function" role="function">
<title>gnutls_realloc_function ()</title>
<indexterm zone="gnutls-realloc-function"><primary sortas="gnutls_realloc_function">gnutls_realloc_function</primary></indexterm><programlisting><link linkend="void">void</link> *              (*gnutls_realloc_function)          (<link linkend="void">void</link> *,
                                                         <link linkend="size-t">size_t</link> );</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>Param1</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>Param2</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-global-set-mem-functions" role="function">
<title>gnutls_global_set_mem_functions ()</title>
<indexterm zone="gnutls-global-set-mem-functions"><primary sortas="gnutls_global_set_mem_functions">gnutls_global_set_mem_functions</primary></indexterm><programlisting><link linkend="void">void</link>                gnutls_global_set_mem_functions     (<link linkend="gnutls-alloc-function">gnutls_alloc_function</link> alloc_func,
                                                         <link linkend="gnutls-alloc-function">gnutls_alloc_function</link> secure_alloc_func,
                                                         <link linkend="gnutls-is-secure-function">gnutls_is_secure_function</link> is_secure_func,
                                                         <link linkend="gnutls-realloc-function">gnutls_realloc_function</link> realloc_func,
                                                         <link linkend="gnutls-free-function">gnutls_free_function</link> free_func);</programlisting>
<para>
This is the function were you set the memory allocation functions
gnutls is going to use. By default the libc's allocation functions
(<link linkend="malloc"><function>malloc()</function></link>, <link linkend="free"><function>free()</function></link>), are used by gnutls, to allocate both sensitive
and not sensitive data.  This function is provided to set the
memory allocation functions to something other than the defaults
(ie the gcrypt allocation functions).
</para>
<para>
This function must be called before <link linkend="gnutls-global-init"><function>gnutls_global_init()</function></link> is called.
This function is not thread safe.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>alloc_func</parameter>&#160;:</term>
<listitem><simpara> it's the default memory allocation function. Like <link linkend="malloc"><function>malloc()</function></link>.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>secure_alloc_func</parameter>&#160;:</term>
<listitem><simpara> This is the memory allocation function that will be used for sensitive data.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>is_secure_func</parameter>&#160;:</term>
<listitem><simpara> a function that returns 0 if the memory given is not secure. May be NULL.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>realloc_func</parameter>&#160;:</term>
<listitem><simpara> A realloc function
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>free_func</parameter>&#160;:</term>
<listitem><simpara> The function that frees allocated data. Must accept a NULL pointer.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-malloc" role="variable">
<title>gnutls_malloc</title>
<indexterm zone="gnutls-malloc"><primary sortas="gnutls_malloc">gnutls_malloc</primary></indexterm><programlisting>  extern gnutls_alloc_function gnutls_malloc;
</programlisting>
<para>
This function will allocate 's' bytes data, and
return a pointer to memory. This function is supposed
to be used by callbacks.
</para>
<para>
The allocation function used is the one set by <link linkend="gnutls-global-set-mem-functions"><function>gnutls_global_set_mem_functions()</function></link>.</para>
<para>
</para></refsect2>
<refsect2 id="gnutls-secure-malloc" role="variable">
<title>gnutls_secure_malloc</title>
<indexterm zone="gnutls-secure-malloc"><primary sortas="gnutls_secure_malloc">gnutls_secure_malloc</primary></indexterm><programlisting>  extern gnutls_alloc_function gnutls_secure_malloc;
</programlisting>
<para>
</para></refsect2>
<refsect2 id="gnutls-realloc" role="variable">
<title>gnutls_realloc</title>
<indexterm zone="gnutls-realloc"><primary sortas="gnutls_realloc">gnutls_realloc</primary></indexterm><programlisting>  extern gnutls_realloc_function gnutls_realloc;
</programlisting>
<para>
</para></refsect2>
<refsect2 id="gnutls-calloc" role="variable">
<title>gnutls_calloc</title>
<indexterm zone="gnutls-calloc"><primary sortas="gnutls_calloc">gnutls_calloc</primary></indexterm><programlisting>  extern gnutls_calloc_function gnutls_calloc;
</programlisting>
<para>
</para></refsect2>
<refsect2 id="gnutls-free" role="variable">
<title>gnutls_free</title>
<indexterm zone="gnutls-free"><primary sortas="gnutls_free">gnutls_free</primary></indexterm><programlisting>  extern gnutls_free_function gnutls_free;
</programlisting>
<para>
This function will free data pointed by ptr.
</para>
<para>
The deallocation function used is the one set by <link linkend="gnutls-global-set-mem-functions"><function>gnutls_global_set_mem_functions()</function></link>.</para>
<para>
</para></refsect2>
<refsect2 id="gnutls-strdup" role="function">
<title>gnutls_strdup ()</title>
<indexterm zone="gnutls-strdup"><primary sortas="gnutls_strdup">gnutls_strdup</primary></indexterm><programlisting><link linkend="char">char</link> *              gnutls_strdup                       (const <link linkend="char">char</link> *);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>Param1</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-log-func" role="function">
<title>gnutls_log_func ()</title>
<indexterm zone="gnutls-log-func"><primary sortas="gnutls_log_func">gnutls_log_func</primary></indexterm><programlisting><link linkend="void">void</link>                (*gnutls_log_func)                  (...,
                                                         const <link linkend="char">char</link> *);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>...</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>Param2</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-global-set-log-function" role="function">
<title>gnutls_global_set_log_function ()</title>
<indexterm zone="gnutls-global-set-log-function"><primary sortas="gnutls_global_set_log_function">gnutls_global_set_log_function</primary></indexterm><programlisting><link linkend="void">void</link>                gnutls_global_set_log_function      (<link linkend="gnutls-log-func">gnutls_log_func</link> log_func);</programlisting>
<para>
This is the function where you set the logging function gnutls is
going to use.  This function only accepts a character array.
Normally you may not use this function since it is only used for
debugging purposes.
</para>
<para>
gnutls_log_func is of the form,
void (*gnutls_log_func)( int level, const char*);</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>log_func</parameter>&#160;:</term>
<listitem><simpara> it's a log function
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-global-set-log-level" role="function">
<title>gnutls_global_set_log_level ()</title>
<indexterm zone="gnutls-global-set-log-level"><primary sortas="gnutls_global_set_log_level">gnutls_global_set_log_level</primary></indexterm><programlisting><link linkend="void">void</link>                gnutls_global_set_log_level         (<link linkend="int">int</link> level);</programlisting>
<para>
This is the function that allows you to set the log level.  The
level is an integer between 0 and 9.  Higher values mean more
verbosity. The default value is 0.  Larger values should only be
used with care, since they may reveal sensitive information.
</para>
<para>
Use a log level over 10 to enable all debugging options.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>level</parameter>&#160;:</term>
<listitem><simpara> it's an integer from 0 to 9.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-dh-params-init" role="function">
<title>gnutls_dh_params_init ()</title>
<indexterm zone="gnutls-dh-params-init"><primary sortas="gnutls_dh_params_init">gnutls_dh_params_init</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_dh_params_init               (<link linkend="gnutls-dh-params-t">gnutls_dh_params_t</link> *dh_params);</programlisting>
<para>
This function will initialize the DH parameters structure.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>dh_params</parameter>&#160;:</term>
<listitem><simpara> Is a structure that will hold the prime numbers
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> On success, <link linkend="GNUTLS-E-SUCCESS--CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> (zero) is returned,
  otherwise an error code is returned.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-dh-params-deinit" role="function">
<title>gnutls_dh_params_deinit ()</title>
<indexterm zone="gnutls-dh-params-deinit"><primary sortas="gnutls_dh_params_deinit">gnutls_dh_params_deinit</primary></indexterm><programlisting><link linkend="void">void</link>                gnutls_dh_params_deinit             (<link linkend="gnutls-dh-params-t">gnutls_dh_params_t</link> dh_params);</programlisting>
<para>
This function will deinitialize the DH parameters structure.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>dh_params</parameter>&#160;:</term>
<listitem><simpara> Is a structure that holds the prime numbers
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-dh-params-import-raw" role="function">
<title>gnutls_dh_params_import_raw ()</title>
<indexterm zone="gnutls-dh-params-import-raw"><primary sortas="gnutls_dh_params_import_raw">gnutls_dh_params_import_raw</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_dh_params_import_raw         (<link linkend="gnutls-dh-params-t">gnutls_dh_params_t</link> dh_params,
                                                         const <link linkend="gnutls-datum-t">gnutls_datum_t</link> *prime,
                                                         const <link linkend="gnutls-datum-t">gnutls_datum_t</link> *generator);</programlisting>
<para>
This function will replace the pair of prime and generator for use
in the Diffie-Hellman key exchange.  The new parameters should be
stored in the appropriate gnutls_datum.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>dh_params</parameter>&#160;:</term>
<listitem><simpara> Is a structure that will hold the prime numbers
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>prime</parameter>&#160;:</term>
<listitem><simpara> holds the new prime
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>generator</parameter>&#160;:</term>
<listitem><simpara> holds the new generator
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> On success, <link linkend="GNUTLS-E-SUCCESS--CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> (zero) is returned,
  otherwise an error code is returned.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-dh-params-import-pkcs3" role="function">
<title>gnutls_dh_params_import_pkcs3 ()</title>
<indexterm zone="gnutls-dh-params-import-pkcs3"><primary sortas="gnutls_dh_params_import_pkcs3">gnutls_dh_params_import_pkcs3</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_dh_params_import_pkcs3       (<link linkend="gnutls-dh-params-t">gnutls_dh_params_t</link> params,
                                                         const <link linkend="gnutls-datum-t">gnutls_datum_t</link> *pkcs3_params,
                                                         <link linkend="gnutls-x509-crt-fmt-t">gnutls_x509_crt_fmt_t</link> format);</programlisting>
<para>
This function will extract the DHParams found in a PKCS3 formatted
structure. This is the format generated by "openssl dhparam" tool.
</para>
<para>
If the structure is PEM encoded, it should have a header
of "BEGIN DH PARAMETERS".</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>params</parameter>&#160;:</term>
<listitem><simpara> A structure where the parameters will be copied to
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>pkcs3_params</parameter>&#160;:</term>
<listitem><simpara> should contain a PKCS3 DHParams structure PEM or DER encoded
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>format</parameter>&#160;:</term>
<listitem><simpara> the format of params. PEM or DER.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> On success, <link linkend="GNUTLS-E-SUCCESS--CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> (zero) is returned,
  otherwise an error code is returned.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-dh-params-generate2" role="function">
<title>gnutls_dh_params_generate2 ()</title>
<indexterm zone="gnutls-dh-params-generate2"><primary sortas="gnutls_dh_params_generate2">gnutls_dh_params_generate2</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_dh_params_generate2          (<link linkend="gnutls-dh-params-t">gnutls_dh_params_t</link> params,
                                                         unsigned <link linkend="int">int</link> bits);</programlisting>
<para>
This function will generate a new pair of prime and generator for use in
the Diffie-Hellman key exchange. The new parameters will be allocated using
<link linkend="gnutls-malloc"><function>gnutls_malloc()</function></link> and will be stored in the appropriate datum.
This function is normally slow.
</para>
<para>
Note that the bits value should be one of 768, 1024, 2048, 3072 or 4096.
Also note that the DH parameters are only useful to servers.
Since clients use the parameters sent by the server, it's of
no use to call this in client side.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>params</parameter>&#160;:</term>
<listitem><simpara> Is the structure that the DH parameters will be stored
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>bits</parameter>&#160;:</term>
<listitem><simpara> is the prime's number of bits
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> On success, <link linkend="GNUTLS-E-SUCCESS--CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> (zero) is returned,
  otherwise an error code is returned.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-dh-params-export-pkcs3" role="function">
<title>gnutls_dh_params_export_pkcs3 ()</title>
<indexterm zone="gnutls-dh-params-export-pkcs3"><primary sortas="gnutls_dh_params_export_pkcs3">gnutls_dh_params_export_pkcs3</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_dh_params_export_pkcs3       (<link linkend="gnutls-dh-params-t">gnutls_dh_params_t</link> params,
                                                         <link linkend="gnutls-x509-crt-fmt-t">gnutls_x509_crt_fmt_t</link> format,
                                                         unsigned <link linkend="char">char</link> *params_data,
                                                         <link linkend="size-t">size_t</link> *params_data_size);</programlisting>
<para>
This function will export the given dh parameters to a PKCS3
DHParams structure. This is the format generated by "openssl dhparam" tool.
If the buffer provided is not long enough to hold the output, then
GNUTLS_E_SHORT_MEMORY_BUFFER will be returned.
</para>
<para>
If the structure is PEM encoded, it will have a header
of "BEGIN DH PARAMETERS".</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>params</parameter>&#160;:</term>
<listitem><simpara> Holds the DH parameters
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>format</parameter>&#160;:</term>
<listitem><simpara> the format of output params. One of PEM or DER.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>params_data</parameter>&#160;:</term>
<listitem><simpara> will contain a PKCS3 DHParams structure PEM or DER encoded
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>params_data_size</parameter>&#160;:</term>
<listitem><simpara> holds the size of params_data (and will be replaced by the actual size of parameters)
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> On success, <link linkend="GNUTLS-E-SUCCESS--CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> (zero) is returned,
  otherwise an error code is returned.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-dh-params-export-raw" role="function">
<title>gnutls_dh_params_export_raw ()</title>
<indexterm zone="gnutls-dh-params-export-raw"><primary sortas="gnutls_dh_params_export_raw">gnutls_dh_params_export_raw</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_dh_params_export_raw         (<link linkend="gnutls-dh-params-t">gnutls_dh_params_t</link> params,
                                                         <link linkend="gnutls-datum-t">gnutls_datum_t</link> *prime,
                                                         <link linkend="gnutls-datum-t">gnutls_datum_t</link> *generator,
                                                         unsigned <link linkend="int">int</link> *bits);</programlisting>
<para>
This function will export the pair of prime and generator for use
in the Diffie-Hellman key exchange.  The new parameters will be
allocated using <link linkend="gnutls-malloc"><function>gnutls_malloc()</function></link> and will be stored in the
appropriate datum.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>params</parameter>&#160;:</term>
<listitem><simpara> Holds the DH parameters
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>prime</parameter>&#160;:</term>
<listitem><simpara> will hold the new prime
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>generator</parameter>&#160;:</term>
<listitem><simpara> will hold the new generator
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>bits</parameter>&#160;:</term>
<listitem><simpara> if non null will hold is the prime's number of bits
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> On success, <link linkend="GNUTLS-E-SUCCESS--CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> (zero) is returned,
  otherwise an error code is returned.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-dh-params-cpy" role="function">
<title>gnutls_dh_params_cpy ()</title>
<indexterm zone="gnutls-dh-params-cpy"><primary sortas="gnutls_dh_params_cpy">gnutls_dh_params_cpy</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_dh_params_cpy                (<link linkend="gnutls-dh-params-t">gnutls_dh_params_t</link> dst,
                                                         <link linkend="gnutls-dh-params-t">gnutls_dh_params_t</link> src);</programlisting>
<para>
This function will copy the DH parameters structure from source
to destination.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>dst</parameter>&#160;:</term>
<listitem><simpara> Is the destination structure, which should be initialized.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>src</parameter>&#160;:</term>
<listitem><simpara> Is the source structure
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> On success, <link linkend="GNUTLS-E-SUCCESS--CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> (zero) is returned,
  otherwise an error code is returned.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-rsa-params-init" role="function">
<title>gnutls_rsa_params_init ()</title>
<indexterm zone="gnutls-rsa-params-init"><primary sortas="gnutls_rsa_params_init">gnutls_rsa_params_init</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_rsa_params_init              (<link linkend="gnutls-rsa-params-t">gnutls_rsa_params_t</link> *rsa_params);</programlisting>
<para>
This function will initialize the temporary RSA parameters structure.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>rsa_params</parameter>&#160;:</term>
<listitem><simpara> Is a structure that will hold the parameters
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> <link linkend="GNUTLS-E-SUCCESS--CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> on success, or an negative error code.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-rsa-params-deinit" role="function">
<title>gnutls_rsa_params_deinit ()</title>
<indexterm zone="gnutls-rsa-params-deinit"><primary sortas="gnutls_rsa_params_deinit">gnutls_rsa_params_deinit</primary></indexterm><programlisting><link linkend="void">void</link>                gnutls_rsa_params_deinit            (<link linkend="gnutls-rsa-params-t">gnutls_rsa_params_t</link> rsa_params);</programlisting>
<para>
This function will deinitialize the RSA parameters structure.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>rsa_params</parameter>&#160;:</term>
<listitem><simpara> Is a structure that holds the parameters
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-rsa-params-cpy" role="function">
<title>gnutls_rsa_params_cpy ()</title>
<indexterm zone="gnutls-rsa-params-cpy"><primary sortas="gnutls_rsa_params_cpy">gnutls_rsa_params_cpy</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_rsa_params_cpy               (<link linkend="gnutls-rsa-params-t">gnutls_rsa_params_t</link> dst,
                                                         <link linkend="gnutls-rsa-params-t">gnutls_rsa_params_t</link> src);</programlisting>
<para>
This function will copy the RSA parameters structure from source
to destination.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>dst</parameter>&#160;:</term>
<listitem><simpara> Is the destination structure, which should be initialized.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>src</parameter>&#160;:</term>
<listitem><simpara> Is the source structure
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> <link linkend="GNUTLS-E-SUCCESS--CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> on success, or an negative error code.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-rsa-params-import-raw" role="function">
<title>gnutls_rsa_params_import_raw ()</title>
<indexterm zone="gnutls-rsa-params-import-raw"><primary sortas="gnutls_rsa_params_import_raw">gnutls_rsa_params_import_raw</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_rsa_params_import_raw        (<link linkend="gnutls-rsa-params-t">gnutls_rsa_params_t</link> rsa_params,
                                                         const <link linkend="gnutls-datum-t">gnutls_datum_t</link> *m,
                                                         const <link linkend="gnutls-datum-t">gnutls_datum_t</link> *e,
                                                         const <link linkend="gnutls-datum-t">gnutls_datum_t</link> *d,
                                                         const <link linkend="gnutls-datum-t">gnutls_datum_t</link> *p,
                                                         const <link linkend="gnutls-datum-t">gnutls_datum_t</link> *q,
                                                         const <link linkend="gnutls-datum-t">gnutls_datum_t</link> *u);</programlisting>
<para>
This function will replace the parameters in the given structure.
The new parameters should be stored in the appropriate
gnutls_datum.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>rsa_params</parameter>&#160;:</term>
<listitem><simpara> Is a structure will hold the parameters
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>m</parameter>&#160;:</term>
<listitem><simpara> holds the modulus
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>e</parameter>&#160;:</term>
<listitem><simpara> holds the public exponent
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>d</parameter>&#160;:</term>
<listitem><simpara> holds the private exponent
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>p</parameter>&#160;:</term>
<listitem><simpara> holds the first prime (p)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>q</parameter>&#160;:</term>
<listitem><simpara> holds the second prime (q)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>u</parameter>&#160;:</term>
<listitem><simpara> holds the coefficient
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> <link linkend="GNUTLS-E-SUCCESS--CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> on success, or an negative error code.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-rsa-params-generate2" role="function">
<title>gnutls_rsa_params_generate2 ()</title>
<indexterm zone="gnutls-rsa-params-generate2"><primary sortas="gnutls_rsa_params_generate2">gnutls_rsa_params_generate2</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_rsa_params_generate2         (<link linkend="gnutls-rsa-params-t">gnutls_rsa_params_t</link> params,
                                                         unsigned <link linkend="int">int</link> bits);</programlisting>
<para>
This function will generate new temporary RSA parameters for use in
RSA-EXPORT ciphersuites.  This function is normally slow.
</para>
<para>
Note that if the parameters are to be used in export cipher suites the
bits value should be 512 or less.
Also note that the generation of new RSA parameters is only useful
to servers. Clients use the parameters sent by the server, thus it's
no use calling this in client side.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>params</parameter>&#160;:</term>
<listitem><simpara> The structure where the parameters will be stored
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>bits</parameter>&#160;:</term>
<listitem><simpara> is the prime's number of bits
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> <link linkend="GNUTLS-E-SUCCESS--CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> on success, or an negative error code.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-rsa-params-export-raw" role="function">
<title>gnutls_rsa_params_export_raw ()</title>
<indexterm zone="gnutls-rsa-params-export-raw"><primary sortas="gnutls_rsa_params_export_raw">gnutls_rsa_params_export_raw</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_rsa_params_export_raw        (<link linkend="gnutls-rsa-params-t">gnutls_rsa_params_t</link> params,
                                                         <link linkend="gnutls-datum-t">gnutls_datum_t</link> *m,
                                                         <link linkend="gnutls-datum-t">gnutls_datum_t</link> *e,
                                                         <link linkend="gnutls-datum-t">gnutls_datum_t</link> *d,
                                                         <link linkend="gnutls-datum-t">gnutls_datum_t</link> *p,
                                                         <link linkend="gnutls-datum-t">gnutls_datum_t</link> *q,
                                                         <link linkend="gnutls-datum-t">gnutls_datum_t</link> *u,
                                                         unsigned <link linkend="int">int</link> *bits);</programlisting>
<para>
This function will export the RSA parameters found in the given
structure. The new parameters will be allocated using
<link linkend="gnutls-malloc"><function>gnutls_malloc()</function></link> and will be stored in the appropriate datum.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>params</parameter>&#160;:</term>
<listitem><simpara> a structure that holds the rsa parameters
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>m</parameter>&#160;:</term>
<listitem><simpara> will hold the modulus
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>e</parameter>&#160;:</term>
<listitem><simpara> will hold the public exponent
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>d</parameter>&#160;:</term>
<listitem><simpara> will hold the private exponent
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>p</parameter>&#160;:</term>
<listitem><simpara> will hold the first prime (p)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>q</parameter>&#160;:</term>
<listitem><simpara> will hold the second prime (q)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>u</parameter>&#160;:</term>
<listitem><simpara> will hold the coefficient
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>bits</parameter>&#160;:</term>
<listitem><simpara> if non null will hold the prime's number of bits
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> <link linkend="GNUTLS-E-SUCCESS--CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> on success, or an negative error code.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-rsa-params-export-pkcs1" role="function">
<title>gnutls_rsa_params_export_pkcs1 ()</title>
<indexterm zone="gnutls-rsa-params-export-pkcs1"><primary sortas="gnutls_rsa_params_export_pkcs1">gnutls_rsa_params_export_pkcs1</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_rsa_params_export_pkcs1      (<link linkend="gnutls-rsa-params-t">gnutls_rsa_params_t</link> params,
                                                         <link linkend="gnutls-x509-crt-fmt-t">gnutls_x509_crt_fmt_t</link> format,
                                                         unsigned <link linkend="char">char</link> *params_data,
                                                         <link linkend="size-t">size_t</link> *params_data_size);</programlisting>
<para>
This function will export the given RSA parameters to a PKCS1
RSAPublicKey structure. If the buffer provided is not long enough to
hold the output, then GNUTLS_E_SHORT_MEMORY_BUFFER will be returned.
</para>
<para>
If the structure is PEM encoded, it will have a header
of "BEGIN RSA PRIVATE KEY".</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>params</parameter>&#160;:</term>
<listitem><simpara> Holds the RSA parameters
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>format</parameter>&#160;:</term>
<listitem><simpara> the format of output params. One of PEM or DER.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>params_data</parameter>&#160;:</term>
<listitem><simpara> will contain a PKCS1 RSAPublicKey structure PEM or DER encoded
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>params_data_size</parameter>&#160;:</term>
<listitem><simpara> holds the size of params_data (and will be replaced by the actual size of parameters)
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> <link linkend="GNUTLS-E-SUCCESS--CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> on success, or an negative error code.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-rsa-params-import-pkcs1" role="function">
<title>gnutls_rsa_params_import_pkcs1 ()</title>
<indexterm zone="gnutls-rsa-params-import-pkcs1"><primary sortas="gnutls_rsa_params_import_pkcs1">gnutls_rsa_params_import_pkcs1</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_rsa_params_import_pkcs1      (<link linkend="gnutls-rsa-params-t">gnutls_rsa_params_t</link> params,
                                                         const <link linkend="gnutls-datum-t">gnutls_datum_t</link> *pkcs1_params,
                                                         <link linkend="gnutls-x509-crt-fmt-t">gnutls_x509_crt_fmt_t</link> format);</programlisting>
<para>
This function will extract the RSAPublicKey found in a PKCS1 formatted
structure.
</para>
<para>
If the structure is PEM encoded, it should have a header
of "BEGIN RSA PRIVATE KEY".</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>params</parameter>&#160;:</term>
<listitem><simpara> A structure where the parameters will be copied to
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>pkcs1_params</parameter>&#160;:</term>
<listitem><simpara> should contain a PKCS1 RSAPublicKey structure PEM or DER encoded
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>format</parameter>&#160;:</term>
<listitem><simpara> the format of params. PEM or DER.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> <link linkend="GNUTLS-E-SUCCESS--CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> on success, or an negative error code.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-pull-func" role="function">
<title>gnutls_pull_func ()</title>
<indexterm zone="gnutls-pull-func"><primary sortas="gnutls_pull_func">gnutls_pull_func</primary></indexterm><programlisting><link linkend="ssize-t">ssize_t</link>             (*gnutls_pull_func)                 (<link linkend="gnutls-transport-ptr-t">gnutls_transport_ptr_t</link> ,
                                                         <link linkend="void">void</link> *,
                                                         <link linkend="size-t">size_t</link> );</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>Param1</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>Param2</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>Param3</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-push-func" role="function">
<title>gnutls_push_func ()</title>
<indexterm zone="gnutls-push-func"><primary sortas="gnutls_push_func">gnutls_push_func</primary></indexterm><programlisting><link linkend="ssize-t">ssize_t</link>             (*gnutls_push_func)                 (<link linkend="gnutls-transport-ptr-t">gnutls_transport_ptr_t</link> ,
                                                         const <link linkend="void">void</link> *,
                                                         <link linkend="size-t">size_t</link> );</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>Param1</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>Param2</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>Param3</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-transport-set-ptr" role="function">
<title>gnutls_transport_set_ptr ()</title>
<indexterm zone="gnutls-transport-set-ptr"><primary sortas="gnutls_transport_set_ptr">gnutls_transport_set_ptr</primary></indexterm><programlisting><link linkend="void">void</link>                gnutls_transport_set_ptr            (<link linkend="gnutls-session-t">gnutls_session_t</link> session,
                                                         <link linkend="gnutls-transport-ptr-t">gnutls_transport_ptr_t</link> ptr);</programlisting>
<para>
Used to set the first argument of the transport function (like
PUSH and PULL).  In berkeley style sockets this function will set
the connection handle.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&#160;:</term>
<listitem><simpara> is a <link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> structure.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> is the value.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-transport-set-ptr2" role="function">
<title>gnutls_transport_set_ptr2 ()</title>
<indexterm zone="gnutls-transport-set-ptr2"><primary sortas="gnutls_transport_set_ptr2">gnutls_transport_set_ptr2</primary></indexterm><programlisting><link linkend="void">void</link>                gnutls_transport_set_ptr2           (<link linkend="gnutls-session-t">gnutls_session_t</link> session,
                                                         <link linkend="gnutls-transport-ptr-t">gnutls_transport_ptr_t</link> recv_ptr,
                                                         <link linkend="gnutls-transport-ptr-t">gnutls_transport_ptr_t</link> send_ptr);</programlisting>
<para>
Used to set the first argument of the transport function (like
PUSH and PULL). In berkeley style sockets this function will set
the connection handle.  With this function you can use two
different pointers for receiving and sending.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&#160;:</term>
<listitem><simpara> is a <link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> structure.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>recv_ptr</parameter>&#160;:</term>
<listitem><simpara> is the value for the pull function
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>send_ptr</parameter>&#160;:</term>
<listitem><simpara> is the value for the push function
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-transport-get-ptr" role="function">
<title>gnutls_transport_get_ptr ()</title>
<indexterm zone="gnutls-transport-get-ptr"><primary sortas="gnutls_transport_get_ptr">gnutls_transport_get_ptr</primary></indexterm><programlisting><link linkend="gnutls-transport-ptr-t">gnutls_transport_ptr_t</link>  gnutls_transport_get_ptr        (<link linkend="gnutls-session-t">gnutls_session_t</link> session);</programlisting>
<para>
Used to get the first argument of the transport function (like
PUSH and PULL).  This must have been set using
<link linkend="gnutls-transport-set-ptr"><function>gnutls_transport_set_ptr()</function></link>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&#160;:</term>
<listitem><simpara> is a <link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> structure.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> first argument of the transport function.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-transport-get-ptr2" role="function">
<title>gnutls_transport_get_ptr2 ()</title>
<indexterm zone="gnutls-transport-get-ptr2"><primary sortas="gnutls_transport_get_ptr2">gnutls_transport_get_ptr2</primary></indexterm><programlisting><link linkend="void">void</link>                gnutls_transport_get_ptr2           (<link linkend="gnutls-session-t">gnutls_session_t</link> session,
                                                         <link linkend="gnutls-transport-ptr-t">gnutls_transport_ptr_t</link> *recv_ptr,
                                                         <link linkend="gnutls-transport-ptr-t">gnutls_transport_ptr_t</link> *send_ptr);</programlisting>
<para>
Used to get the arguments of the transport functions (like PUSH
and PULL).  These should have been set using
<link linkend="gnutls-transport-set-ptr2"><function>gnutls_transport_set_ptr2()</function></link>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&#160;:</term>
<listitem><simpara> is a <link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> structure.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>recv_ptr</parameter>&#160;:</term>
<listitem><simpara> will hold the value for the pull function
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>send_ptr</parameter>&#160;:</term>
<listitem><simpara> will hold the value for the push function
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-transport-set-lowat" role="function">
<title>gnutls_transport_set_lowat ()</title>
<indexterm zone="gnutls-transport-set-lowat"><primary sortas="gnutls_transport_set_lowat">gnutls_transport_set_lowat</primary></indexterm><programlisting><link linkend="void">void</link>                gnutls_transport_set_lowat          (<link linkend="gnutls-session-t">gnutls_session_t</link> session,
                                                         <link linkend="int">int</link> num);</programlisting>
<para>
Used to set the lowat value in order for select to check if there
are pending data to socket buffer. Used only if you have changed
the default low water value (default is 1).  Normally you will not
need that function.  This function is only useful if using
berkeley style sockets.  Otherwise it must be called and set lowat
to zero.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&#160;:</term>
<listitem><simpara> is a <link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> structure.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>num</parameter>&#160;:</term>
<listitem><simpara> is the low water value.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-transport-set-push-function" role="function">
<title>gnutls_transport_set_push_function ()</title>
<indexterm zone="gnutls-transport-set-push-function"><primary sortas="gnutls_transport_set_push_function">gnutls_transport_set_push_function</primary></indexterm><programlisting><link linkend="void">void</link>                gnutls_transport_set_push_function  (<link linkend="gnutls-session-t">gnutls_session_t</link> session,
                                                         <link linkend="gnutls-push-func">gnutls_push_func</link> push_func);</programlisting>
<para>
This is the function where you set a push function for gnutls to
use in order to send data.  If you are going to use berkeley style
sockets, you do not need to use this function since the default
(send(2)) will probably be ok.  Otherwise you should specify this
function for gnutls to be able to send data.
</para>
<para>
PUSH_FUNC is of the form,
ssize_t (*gnutls_push_func)(gnutls_transport_ptr_t, const void*, size_t);</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&#160;:</term>
<listitem><simpara> gnutls session
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>push_func</parameter>&#160;:</term>
<listitem><simpara> a callback function similar to <link linkend="write"><function>write()</function></link>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-transport-set-pull-function" role="function">
<title>gnutls_transport_set_pull_function ()</title>
<indexterm zone="gnutls-transport-set-pull-function"><primary sortas="gnutls_transport_set_pull_function">gnutls_transport_set_pull_function</primary></indexterm><programlisting><link linkend="void">void</link>                gnutls_transport_set_pull_function  (<link linkend="gnutls-session-t">gnutls_session_t</link> session,
                                                         <link linkend="gnutls-pull-func">gnutls_pull_func</link> pull_func);</programlisting>
<para>
This is the function where you set a function for gnutls to receive
data.  Normally, if you use berkeley style sockets, do not need to
use this function since the default (recv(2)) will probably be ok.
</para>
<para>
PULL_FUNC is of the form,
ssize_t (*gnutls_pull_func)(gnutls_transport_ptr_t, void*, size_t);</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&#160;:</term>
<listitem><simpara> gnutls session
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>pull_func</parameter>&#160;:</term>
<listitem><simpara> a callback function similar to <link linkend="read"><function>read()</function></link>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-transport-set-errno" role="function">
<title>gnutls_transport_set_errno ()</title>
<indexterm zone="gnutls-transport-set-errno"><primary sortas="gnutls_transport_set_errno">gnutls_transport_set_errno</primary></indexterm><programlisting><link linkend="void">void</link>                gnutls_transport_set_errno          (<link linkend="gnutls-session-t">gnutls_session_t</link> session,
                                                         <link linkend="int">int</link> err);</programlisting>
<para>
Store <parameter>err</parameter> in the session-specific errno variable.  Useful values
for <parameter>err</parameter> is EAGAIN and EINTR, other values are treated will be
treated as real errors in the push/pull function.
</para>
<para>
This function is useful in replacement push/pull functions set by
gnutls_transport_set_push_function and
gnutls_transport_set_pullpush_function under Windows, where the
replacement push/pull may not have access to the same <parameter>errno</parameter>
variable that is used by GnuTLS (e.g., the application is linked to
msvcr71.dll and gnutls is linked to msvcrt.dll).
</para>
<para>
If you don't have the <parameter>session</parameter> variable easily accessible from the
push/pull function, and don't worry about thread conflicts, you can
also use <link linkend="gnutls-transport-set-global-errno"><function>gnutls_transport_set_global_errno()</function></link>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&#160;:</term>
<listitem><simpara> is a <link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> structure.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>err</parameter>&#160;:</term>
<listitem><simpara> error value to store in session-specific errno variable.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-transport-set-global-errno" role="function">
<title>gnutls_transport_set_global_errno ()</title>
<indexterm zone="gnutls-transport-set-global-errno"><primary sortas="gnutls_transport_set_global_errno">gnutls_transport_set_global_errno</primary></indexterm><programlisting><link linkend="void">void</link>                gnutls_transport_set_global_errno   (<link linkend="int">int</link> err);</programlisting>
<para>
Store <parameter>err</parameter> in the global errno variable.  Useful values for <parameter>err</parameter> is
EAGAIN and EINTR, other values are treated will be treated as real
errors in the push/pull function.
</para>
<para>
This function is useful in replacement push/pull functions set by
gnutls_transport_set_push_function and
gnutls_transport_set_pullpush_function under Windows, where the
replacement push/pull may not have access to the same <parameter>errno</parameter>
variable that is used by GnuTLS (e.g., the application is linked to
msvcr71.dll and gnutls is linked to msvcrt.dll).
</para>
<para>
Whether this function is thread safe or not depends on whether the
global variable errno is thread safe, some system libraries make it
a thread-local variable.  When feasible, using the guaranteed
thread-safe <link linkend="gnutls-transport-set-errno"><function>gnutls_transport_set_errno()</function></link> may be better.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>err</parameter>&#160;:</term>
<listitem><simpara> error value to store in global errno variable.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-session-set-ptr" role="function">
<title>gnutls_session_set_ptr ()</title>
<indexterm zone="gnutls-session-set-ptr"><primary sortas="gnutls_session_set_ptr">gnutls_session_set_ptr</primary></indexterm><programlisting><link linkend="void">void</link>                gnutls_session_set_ptr              (<link linkend="gnutls-session-t">gnutls_session_t</link> session,
                                                         <link linkend="void">void</link> *ptr);</programlisting>
<para>
This function will set (associate) the user given pointer <parameter>ptr</parameter> to
the session structure.  This is pointer can be accessed with
<link linkend="gnutls-session-get-ptr"><function>gnutls_session_get_ptr()</function></link>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&#160;:</term>
<listitem><simpara> is a <link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> structure.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara> is the user pointer
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-session-get-ptr" role="function">
<title>gnutls_session_get_ptr ()</title>
<indexterm zone="gnutls-session-get-ptr"><primary sortas="gnutls_session_get_ptr">gnutls_session_get_ptr</primary></indexterm><programlisting><link linkend="void">void</link> *              gnutls_session_get_ptr              (<link linkend="gnutls-session-t">gnutls_session_t</link> session);</programlisting>
<para>
Get user pointer for session.  Useful in callbacks.  This is the
  pointer set with <link linkend="gnutls-session-set-ptr"><function>gnutls_session_set_ptr()</function></link>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&#160;:</term>
<listitem><simpara> is a <link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> structure.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> the user given pointer from the session structure, or
  <link linkend="NULL--CAPS"><literal>NULL</literal></link> if it was never set.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-openpgp-send-cert" role="function">
<title>gnutls_openpgp_send_cert ()</title>
<indexterm zone="gnutls-openpgp-send-cert"><primary sortas="gnutls_openpgp_send_cert">gnutls_openpgp_send_cert</primary></indexterm><programlisting><link linkend="void">void</link>                gnutls_openpgp_send_cert            (<link linkend="gnutls-session-t">gnutls_session_t</link> session,
                                                         <link linkend="gnutls-openpgp-crt-status-t">gnutls_openpgp_crt_status_t</link> status);</programlisting>
<para>
This function will order gnutls to send the key fingerprint
instead of the key in the initial handshake procedure. This should
be used with care and only when there is indication or knowledge
that the server can obtain the client's key.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&#160;:</term>
<listitem><simpara> is a pointer to a <link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> structure.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>status</parameter>&#160;:</term>
<listitem><simpara> is one of GNUTLS_OPENPGP_CERT, or GNUTLS_OPENPGP_CERT_FINGERPRINT
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-fingerprint" role="function">
<title>gnutls_fingerprint ()</title>
<indexterm zone="gnutls-fingerprint"><primary sortas="gnutls_fingerprint">gnutls_fingerprint</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_fingerprint                  (<link linkend="gnutls-digest-algorithm-t">gnutls_digest_algorithm_t</link> algo,
                                                         const <link linkend="gnutls-datum-t">gnutls_datum_t</link> *data,
                                                         <link linkend="void">void</link> *result,
                                                         <link linkend="size-t">size_t</link> *result_size);</programlisting>
<para>
This function will calculate a fingerprint (actually a hash), of
the given data.  The result is not printable data.  You should
convert it to hex, or to something else printable.
</para>
<para>
This is the usual way to calculate a fingerprint of an X.509 DER
encoded certificate.  Note however that the fingerprint of an
OpenPGP is not just a hash and cannot be calculated with this
function.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>algo</parameter>&#160;:</term>
<listitem><simpara> is a digest algorithm
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>data</parameter>&#160;:</term>
<listitem><simpara> is the data
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>result</parameter>&#160;:</term>
<listitem><simpara> is the place where the result will be copied (may be null).
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>result_size</parameter>&#160;:</term>
<listitem><simpara> should hold the size of the result. The actual size
of the returned result will also be copied there.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> On success, <link linkend="GNUTLS-E-SUCCESS--CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> (0) is returned, otherwise
  an error code is returned.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-srp-free-client-credentials" role="function">
<title>gnutls_srp_free_client_credentials ()</title>
<indexterm zone="gnutls-srp-free-client-credentials"><primary sortas="gnutls_srp_free_client_credentials">gnutls_srp_free_client_credentials</primary></indexterm><programlisting><link linkend="void">void</link>                gnutls_srp_free_client_credentials  (<link linkend="gnutls-srp-client-credentials-t">gnutls_srp_client_credentials_t</link> sc);</programlisting>
<para>
This structure is complex enough to manipulate directly thus
this helper function is provided in order to free (deallocate) it.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>sc</parameter>&#160;:</term>
<listitem><simpara> is a <link linkend="gnutls-srp-client-credentials-t"><type>gnutls_srp_client_credentials_t</type></link> structure.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-srp-allocate-client-credentials" role="function">
<title>gnutls_srp_allocate_client_credentials ()</title>
<indexterm zone="gnutls-srp-allocate-client-credentials"><primary sortas="gnutls_srp_allocate_client_credentials">gnutls_srp_allocate_client_credentials</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_srp_allocate_client_credentials
                                                        (<link linkend="gnutls-srp-client-credentials-t">gnutls_srp_client_credentials_t</link> *sc);</programlisting>
<para>
This structure is complex enough to manipulate directly thus
this helper function is provided in order to allocate it.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>sc</parameter>&#160;:</term>
<listitem><simpara> is a pointer to a <link linkend="gnutls-srp-server-credentials-t"><type>gnutls_srp_server_credentials_t</type></link> structure.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> On success, <link linkend="GNUTLS-E-SUCCESS--CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> (0) is returned, or an
  error code.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-srp-set-client-credentials" role="function">
<title>gnutls_srp_set_client_credentials ()</title>
<indexterm zone="gnutls-srp-set-client-credentials"><primary sortas="gnutls_srp_set_client_credentials">gnutls_srp_set_client_credentials</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_srp_set_client_credentials   (<link linkend="gnutls-srp-client-credentials-t">gnutls_srp_client_credentials_t</link> res,
                                                         const <link linkend="char">char</link> *username,
                                                         const <link linkend="char">char</link> *password);</programlisting>
<para>
This function sets the username and password, in a
<link linkend="gnutls-srp-client-credentials-t"><type>gnutls_srp_client_credentials_t</type></link> structure.  Those will be used in
SRP authentication.  <parameter>username</parameter> and <parameter>password</parameter> should be ASCII
strings or UTF-8 strings prepared using the "SASLprep" profile of
"stringprep".</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>res</parameter>&#160;:</term>
<listitem><simpara> is a <link linkend="gnutls-srp-client-credentials-t"><type>gnutls_srp_client_credentials_t</type></link> structure.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>username</parameter>&#160;:</term>
<listitem><simpara> is the user's userid
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>password</parameter>&#160;:</term>
<listitem><simpara> is the user's password
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> On success, <link linkend="GNUTLS-E-SUCCESS--CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> (0) is returned, or an
  error code.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-srp-free-server-credentials" role="function">
<title>gnutls_srp_free_server_credentials ()</title>
<indexterm zone="gnutls-srp-free-server-credentials"><primary sortas="gnutls_srp_free_server_credentials">gnutls_srp_free_server_credentials</primary></indexterm><programlisting><link linkend="void">void</link>                gnutls_srp_free_server_credentials  (<link linkend="gnutls-srp-server-credentials-t">gnutls_srp_server_credentials_t</link> sc);</programlisting>
<para>
This structure is complex enough to manipulate directly thus
this helper function is provided in order to free (deallocate) it.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>sc</parameter>&#160;:</term>
<listitem><simpara> is a <link linkend="gnutls-srp-server-credentials-t"><type>gnutls_srp_server_credentials_t</type></link> structure.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-srp-allocate-server-credentials" role="function">
<title>gnutls_srp_allocate_server_credentials ()</title>
<indexterm zone="gnutls-srp-allocate-server-credentials"><primary sortas="gnutls_srp_allocate_server_credentials">gnutls_srp_allocate_server_credentials</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_srp_allocate_server_credentials
                                                        (<link linkend="gnutls-srp-server-credentials-t">gnutls_srp_server_credentials_t</link> *sc);</programlisting>
<para>
This structure is complex enough to manipulate directly thus this
helper function is provided in order to allocate it.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>sc</parameter>&#160;:</term>
<listitem><simpara> is a pointer to a <link linkend="gnutls-srp-server-credentials-t"><type>gnutls_srp_server_credentials_t</type></link> structure.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> On success, <link linkend="GNUTLS-E-SUCCESS--CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> (0) is returned, or an
  error code.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-srp-set-server-credentials-file" role="function">
<title>gnutls_srp_set_server_credentials_file ()</title>
<indexterm zone="gnutls-srp-set-server-credentials-file"><primary sortas="gnutls_srp_set_server_credentials_file">gnutls_srp_set_server_credentials_file</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_srp_set_server_credentials_file
                                                        (<link linkend="gnutls-srp-server-credentials-t">gnutls_srp_server_credentials_t</link> res,
                                                         const <link linkend="char">char</link> *password_file,
                                                         const <link linkend="char">char</link> *password_conf_file);</programlisting>
<para>
This function sets the password files, in a
<link linkend="gnutls-srp-server-credentials-t"><type>gnutls_srp_server_credentials_t</type></link> structure.  Those password files
hold usernames and verifiers and will be used for SRP
authentication.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>res</parameter>&#160;:</term>
<listitem><simpara> is a <link linkend="gnutls-srp-server-credentials-t"><type>gnutls_srp_server_credentials_t</type></link> structure.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>password_file</parameter>&#160;:</term>
<listitem><simpara> is the SRP password file (tpasswd)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>password_conf_file</parameter>&#160;:</term>
<listitem><simpara> is the SRP password conf file (tpasswd.conf)
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> On success, <link linkend="GNUTLS-E-SUCCESS--CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> (0) is returned, or an
  error code.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-srp-server-get-username" role="function">
<title>gnutls_srp_server_get_username ()</title>
<indexterm zone="gnutls-srp-server-get-username"><primary sortas="gnutls_srp_server_get_username">gnutls_srp_server_get_username</primary></indexterm><programlisting>const <link linkend="char">char</link> *        gnutls_srp_server_get_username      (<link linkend="gnutls-session-t">gnutls_session_t</link> session);</programlisting>
<para>
This function will return the username of the peer.  This should
only be called in case of SRP authentication and in case of a
server.  Returns NULL in case of an error.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&#160;:</term>
<listitem><simpara> is a gnutls session
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> SRP username of the peer, or NULL in case of error.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-srp-set-prime-bits" role="function" condition="since:2.6.0">
<title>gnutls_srp_set_prime_bits ()</title>
<indexterm zone="gnutls-srp-set-prime-bits" role="2.6.0"><primary sortas="gnutls_srp_set_prime_bits">gnutls_srp_set_prime_bits</primary></indexterm><programlisting><link linkend="void">void</link>                gnutls_srp_set_prime_bits           (<link linkend="gnutls-session-t">gnutls_session_t</link> session,
                                                         unsigned <link linkend="int">int</link> bits);</programlisting>
<para>
This function sets the minimum accepted number of bits, for use in
an SRP key exchange.  If zero, the default 2048 bits will be used.
</para>
<para>
In the client side it sets the minimum accepted number of bits.  If
a server sends a prime with less bits than that
<link linkend="GNUTLS-E-RECEIVED-ILLEGAL-PARAMETER--CAPS"><literal>GNUTLS_E_RECEIVED_ILLEGAL_PARAMETER</literal></link> will be returned by the
handshake.
</para>
<para>
This function has no effect in server side.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&#160;:</term>
<listitem><simpara> is a <link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> structure.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>bits</parameter>&#160;:</term>
<listitem><simpara> is the number of bits
</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 2.6.0</para></refsect2>
<refsect2 id="gnutls-srp-verifier" role="function">
<title>gnutls_srp_verifier ()</title>
<indexterm zone="gnutls-srp-verifier"><primary sortas="gnutls_srp_verifier">gnutls_srp_verifier</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_srp_verifier                 (const <link linkend="char">char</link> *username,
                                                         const <link linkend="char">char</link> *password,
                                                         const <link linkend="gnutls-datum-t">gnutls_datum_t</link> *salt,
                                                         const <link linkend="gnutls-datum-t">gnutls_datum_t</link> *generator,
                                                         const <link linkend="gnutls-datum-t">gnutls_datum_t</link> *prime,
                                                         <link linkend="gnutls-datum-t">gnutls_datum_t</link> *res);</programlisting>
<para>
This function will create an SRP verifier, as specified in
RFC2945.  The <parameter>prime</parameter> and <parameter>generator</parameter> should be one of the static
parameters defined in gnutls/extra.h or may be generated using the
libgcrypt functions <link linkend="gcry-prime-generate"><function>gcry_prime_generate()</function></link> and
<link linkend="gcry-prime-group-generator"><function>gcry_prime_group_generator()</function></link>.
</para>
<para>
The verifier will be allocated with <parameter>malloc</parameter> and will be stored in
<parameter>res</parameter> using binary format.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>username</parameter>&#160;:</term>
<listitem><simpara> is the user's name
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>password</parameter>&#160;:</term>
<listitem><simpara> is the user's password
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>salt</parameter>&#160;:</term>
<listitem><simpara> should be some randomly generated bytes
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>generator</parameter>&#160;:</term>
<listitem><simpara> is the generator of the group
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>prime</parameter>&#160;:</term>
<listitem><simpara> is the group's prime
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>res</parameter>&#160;:</term>
<listitem><simpara> where the verifier will be stored.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> On success, <link linkend="GNUTLS-E-SUCCESS--CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> (0) is returned, or an
  error code.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-srp-2048-group-prime" role="variable">
<title>gnutls_srp_2048_group_prime</title>
<indexterm zone="gnutls-srp-2048-group-prime"><primary sortas="gnutls_srp_2048_group_prime">gnutls_srp_2048_group_prime</primary></indexterm><programlisting>  extern const gnutls_datum_t gnutls_srp_2048_group_prime;
</programlisting>
<para>
</para></refsect2>
<refsect2 id="gnutls-srp-2048-group-generator" role="variable">
<title>gnutls_srp_2048_group_generator</title>
<indexterm zone="gnutls-srp-2048-group-generator"><primary sortas="gnutls_srp_2048_group_generator">gnutls_srp_2048_group_generator</primary></indexterm><programlisting>  extern const gnutls_datum_t gnutls_srp_2048_group_generator;
</programlisting>
<para>
</para></refsect2>
<refsect2 id="gnutls-srp-1536-group-prime" role="variable">
<title>gnutls_srp_1536_group_prime</title>
<indexterm zone="gnutls-srp-1536-group-prime"><primary sortas="gnutls_srp_1536_group_prime">gnutls_srp_1536_group_prime</primary></indexterm><programlisting>  extern const gnutls_datum_t gnutls_srp_1536_group_prime;
</programlisting>
<para>
</para></refsect2>
<refsect2 id="gnutls-srp-1536-group-generator" role="variable">
<title>gnutls_srp_1536_group_generator</title>
<indexterm zone="gnutls-srp-1536-group-generator"><primary sortas="gnutls_srp_1536_group_generator">gnutls_srp_1536_group_generator</primary></indexterm><programlisting>  extern const gnutls_datum_t gnutls_srp_1536_group_generator;
</programlisting>
<para>
</para></refsect2>
<refsect2 id="gnutls-srp-1024-group-prime" role="variable">
<title>gnutls_srp_1024_group_prime</title>
<indexterm zone="gnutls-srp-1024-group-prime"><primary sortas="gnutls_srp_1024_group_prime">gnutls_srp_1024_group_prime</primary></indexterm><programlisting>  extern const gnutls_datum_t gnutls_srp_1024_group_prime;
</programlisting>
<para>
</para></refsect2>
<refsect2 id="gnutls-srp-1024-group-generator" role="variable">
<title>gnutls_srp_1024_group_generator</title>
<indexterm zone="gnutls-srp-1024-group-generator"><primary sortas="gnutls_srp_1024_group_generator">gnutls_srp_1024_group_generator</primary></indexterm><programlisting>  extern const gnutls_datum_t gnutls_srp_1024_group_generator;
</programlisting>
<para>
</para></refsect2>
<refsect2 id="gnutls-srp-set-server-credentials-function" role="function">
<title>gnutls_srp_set_server_credentials_function ()</title>
<indexterm zone="gnutls-srp-set-server-credentials-function"><primary sortas="gnutls_srp_set_server_credentials_function">gnutls_srp_set_server_credentials_function</primary></indexterm><programlisting><link linkend="void">void</link>                gnutls_srp_set_server_credentials_function
                                                        (<link linkend="gnutls-srp-server-credentials-t">gnutls_srp_server_credentials_t</link> cred,
                                                         <link linkend="gnutls-srp-server-credentials-function">gnutls_srp_server_credentials_function</link> *func);</programlisting>
<para>
This function can be used to set a callback to retrieve the user's SRP credentials.
The callback's function form is:
int (*callback)(gnutls_session_t, const char* username,
 gnutls_datum_t* salt, gnutls_datum_t *verifier, gnutls_datum_t* g,
 gnutls_datum_t* n);
</para>
<para>
<parameter>username</parameter> contains the actual username. 
The <parameter>salt</parameter>, <parameter>verifier</parameter>, <parameter>generator</parameter> and <parameter>prime</parameter> must be filled
in using the <link linkend="gnutls-malloc"><function>gnutls_malloc()</function></link>. For convenience <parameter>prime</parameter> and <parameter>generator</parameter> 
may also be one of the static parameters defined in extra.h.
</para>
<para>
In case the callback returned a negative number then gnutls will
assume that the username does not exist.
</para>
<para>
In order to prevent attackers from guessing valid usernames,
if a user does not exist, g and n values should be filled in
using a random user's parameters. In that case the callback must
return the special value (1).
</para>
<para>
The callback function will only be called once per handshake.
The callback function should return 0 on success, while
-1 indicates an error.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>cred</parameter>&#160;:</term>
<listitem><simpara> is a <link linkend="gnutls-srp-server-credentials-t"><type>gnutls_srp_server_credentials_t</type></link> structure.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>func</parameter>&#160;:</term>
<listitem><simpara> is the callback function
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-srp-set-client-credentials-function" role="function">
<title>gnutls_srp_set_client_credentials_function ()</title>
<indexterm zone="gnutls-srp-set-client-credentials-function"><primary sortas="gnutls_srp_set_client_credentials_function">gnutls_srp_set_client_credentials_function</primary></indexterm><programlisting><link linkend="void">void</link>                gnutls_srp_set_client_credentials_function
                                                        (<link linkend="gnutls-srp-client-credentials-t">gnutls_srp_client_credentials_t</link> cred,
                                                         <link linkend="gnutls-srp-client-credentials-function">gnutls_srp_client_credentials_function</link> *func);</programlisting>
<para>
This function can be used to set a callback to retrieve the username and
password for client SRP authentication.
</para>
<para>
The callback's function form is:
</para>
<para>
int (*callback)(gnutls_session_t, char** username, char**password);
</para>
<para>
The <parameter>username</parameter> and <parameter>password</parameter> must be allocated using
<link linkend="gnutls-malloc"><function>gnutls_malloc()</function></link>.  <parameter>username</parameter> and <parameter>password</parameter> should be ASCII strings
or UTF-8 strings prepared using the "SASLprep" profile of
"stringprep".
</para>
<para>
The callback function will be called once per handshake before the
initial hello message is sent.
</para>
<para>
The callback should not return a negative error code the second
time called, since the handshake procedure will be aborted.
</para>
<para>
The callback function should return 0 on success.
-1 indicates an error.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>cred</parameter>&#160;:</term>
<listitem><simpara> is a <link linkend="gnutls-srp-server-credentials-t"><type>gnutls_srp_server_credentials_t</type></link> structure.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>func</parameter>&#160;:</term>
<listitem><simpara> is the callback function
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-srp-base64-encode" role="function">
<title>gnutls_srp_base64_encode ()</title>
<indexterm zone="gnutls-srp-base64-encode"><primary sortas="gnutls_srp_base64_encode">gnutls_srp_base64_encode</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_srp_base64_encode            (const <link linkend="gnutls-datum-t">gnutls_datum_t</link> *data,
                                                         <link linkend="char">char</link> *result,
                                                         <link linkend="size-t">size_t</link> *result_size);</programlisting>
<para>
This function will convert the given data to printable data, using
the base64 encoding, as used in the libsrp.  This is the encoding
used in SRP password files.  If the provided buffer is not long
enough GNUTLS_E_SHORT_MEMORY_BUFFER is returned.
</para>
<para>
Warning!  This base64 encoding is not the "standard" encoding, so
do not use it for non-SRP purposes.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>data</parameter>&#160;:</term>
<listitem><simpara> contain the raw data
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>result</parameter>&#160;:</term>
<listitem><simpara> the place where base64 data will be copied
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>result_size</parameter>&#160;:</term>
<listitem><simpara> holds the size of the result
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> <link linkend="GNUTLS-E-SHORT-MEMORY-BUFFER--CAPS"><literal>GNUTLS_E_SHORT_MEMORY_BUFFER</literal></link> if the buffer given is not
long enough, or 0 on success.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-srp-base64-encode-alloc" role="function">
<title>gnutls_srp_base64_encode_alloc ()</title>
<indexterm zone="gnutls-srp-base64-encode-alloc"><primary sortas="gnutls_srp_base64_encode_alloc">gnutls_srp_base64_encode_alloc</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_srp_base64_encode_alloc      (const <link linkend="gnutls-datum-t">gnutls_datum_t</link> *data,
                                                         <link linkend="gnutls-datum-t">gnutls_datum_t</link> *result);</programlisting>
<para>
This function will convert the given data to printable data, using
the base64 encoding.  This is the encoding used in SRP password
files.  This function will allocate the required memory to hold
the encoded data.
</para>
<para>
You should use <link linkend="gnutls-free"><function>gnutls_free()</function></link> to free the returned data.
</para>
<para>
Warning!  This base64 encoding is not the "standard" encoding, so
do not use it for non-SRP purposes.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>data</parameter>&#160;:</term>
<listitem><simpara> contains the raw data
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>result</parameter>&#160;:</term>
<listitem><simpara> will hold the newly allocated encoded data
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> 0 on success, or an error code.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-srp-base64-decode" role="function">
<title>gnutls_srp_base64_decode ()</title>
<indexterm zone="gnutls-srp-base64-decode"><primary sortas="gnutls_srp_base64_decode">gnutls_srp_base64_decode</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_srp_base64_decode            (const <link linkend="gnutls-datum-t">gnutls_datum_t</link> *b64_data,
                                                         <link linkend="char">char</link> *result,
                                                         <link linkend="size-t">size_t</link> *result_size);</programlisting>
<para>
This function will decode the given encoded data, using the base64
encoding found in libsrp.
</para>
<para>
Note that b64_data should be null terminated.
</para>
<para>
Warning!  This base64 encoding is not the "standard" encoding, so
do not use it for non-SRP purposes.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>b64_data</parameter>&#160;:</term>
<listitem><simpara> contain the encoded data
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>result</parameter>&#160;:</term>
<listitem><simpara> the place where decoded data will be copied
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>result_size</parameter>&#160;:</term>
<listitem><simpara> holds the size of the result
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> <link linkend="GNUTLS-E-SHORT-MEMORY-BUFFER--CAPS"><literal>GNUTLS_E_SHORT_MEMORY_BUFFER</literal></link> if the buffer given is not
long enough, or 0 on success.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-srp-base64-decode-alloc" role="function">
<title>gnutls_srp_base64_decode_alloc ()</title>
<indexterm zone="gnutls-srp-base64-decode-alloc"><primary sortas="gnutls_srp_base64_decode_alloc">gnutls_srp_base64_decode_alloc</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_srp_base64_decode_alloc      (const <link linkend="gnutls-datum-t">gnutls_datum_t</link> *b64_data,
                                                         <link linkend="gnutls-datum-t">gnutls_datum_t</link> *result);</programlisting>
<para>
This function will decode the given encoded data. The decoded data
will be allocated, and stored into result.  It will decode using
the base64 algorithm as used in libsrp.
</para>
<para>
You should use <link linkend="gnutls-free"><function>gnutls_free()</function></link> to free the returned data.
</para>
<para>
Warning!  This base64 encoding is not the "standard" encoding, so
do not use it for non-SRP purposes.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>b64_data</parameter>&#160;:</term>
<listitem><simpara> contains the encoded data
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>result</parameter>&#160;:</term>
<listitem><simpara> the place where decoded data lie
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> 0 on success, or an error code.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-psk-key-flags" role="enum">
<title>enum gnutls_psk_key_flags</title>
<indexterm zone="gnutls-psk-key-flags"><primary sortas="gnutls_psk_key_flags">gnutls_psk_key_flags</primary></indexterm><programlisting>  typedef enum gnutls_psk_key_flags
    {
      GNUTLS_PSK_KEY_RAW = 0,
      GNUTLS_PSK_KEY_HEX
    } gnutls_psk_key_flags;
</programlisting>
<para>
</para></refsect2>
<refsect2 id="gnutls-psk-free-client-credentials" role="function">
<title>gnutls_psk_free_client_credentials ()</title>
<indexterm zone="gnutls-psk-free-client-credentials"><primary sortas="gnutls_psk_free_client_credentials">gnutls_psk_free_client_credentials</primary></indexterm><programlisting><link linkend="void">void</link>                gnutls_psk_free_client_credentials  (<link linkend="gnutls-psk-client-credentials-t">gnutls_psk_client_credentials_t</link> sc);</programlisting>
<para>
This structure is complex enough to manipulate directly thus this
helper function is provided in order to free (deallocate) it.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>sc</parameter>&#160;:</term>
<listitem><simpara> is a <link linkend="gnutls-psk-client-credentials-t"><type>gnutls_psk_client_credentials_t</type></link> structure.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-psk-allocate-client-credentials" role="function">
<title>gnutls_psk_allocate_client_credentials ()</title>
<indexterm zone="gnutls-psk-allocate-client-credentials"><primary sortas="gnutls_psk_allocate_client_credentials">gnutls_psk_allocate_client_credentials</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_psk_allocate_client_credentials
                                                        (<link linkend="gnutls-psk-client-credentials-t">gnutls_psk_client_credentials_t</link> *sc);</programlisting>
<para>
This structure is complex enough to manipulate directly thus this
helper function is provided in order to allocate it.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>sc</parameter>&#160;:</term>
<listitem><simpara> is a pointer to a <link linkend="gnutls-psk-server-credentials-t"><type>gnutls_psk_server_credentials_t</type></link> structure.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> <link linkend="GNUTLS-E-SUCCESS--CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> on success, or an error code.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-psk-set-client-credentials" role="function">
<title>gnutls_psk_set_client_credentials ()</title>
<indexterm zone="gnutls-psk-set-client-credentials"><primary sortas="gnutls_psk_set_client_credentials">gnutls_psk_set_client_credentials</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_psk_set_client_credentials   (<link linkend="gnutls-psk-client-credentials-t">gnutls_psk_client_credentials_t</link> res,
                                                         const <link linkend="char">char</link> *username,
                                                         const <link linkend="gnutls-datum-t">gnutls_datum_t</link> *key,
                                                         <link linkend="gnutls-psk-key-flags">gnutls_psk_key_flags</link> format);</programlisting>
<para>
This function sets the username and password, in a
gnutls_psk_client_credentials_t structure.  Those will be used in
PSK authentication. <parameter>username</parameter> should be an ASCII string or UTF-8
strings prepared using the "SASLprep" profile of "stringprep".
The key can be either in raw byte format or in Hex (not with the
'0x' prefix).</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>res</parameter>&#160;:</term>
<listitem><simpara> is a <link linkend="gnutls-psk-client-credentials-t"><type>gnutls_psk_client_credentials_t</type></link> structure.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>username</parameter>&#160;:</term>
<listitem><simpara> is the user's zero-terminated userid
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>key</parameter>&#160;:</term>
<listitem><simpara> is the user's key
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>format</parameter>&#160;:</term>
<listitem><simpara> indicate the format of the key, either
<link linkend="GNUTLS-PSK-KEY-RAW--CAPS"><literal>GNUTLS_PSK_KEY_RAW</literal></link> or <link linkend="GNUTLS-PSK-KEY-HEX--CAPS"><literal>GNUTLS_PSK_KEY_HEX</literal></link>.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> <link linkend="GNUTLS-E-SUCCESS--CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> on success, or an error code.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-psk-free-server-credentials" role="function">
<title>gnutls_psk_free_server_credentials ()</title>
<indexterm zone="gnutls-psk-free-server-credentials"><primary sortas="gnutls_psk_free_server_credentials">gnutls_psk_free_server_credentials</primary></indexterm><programlisting><link linkend="void">void</link>                gnutls_psk_free_server_credentials  (<link linkend="gnutls-psk-server-credentials-t">gnutls_psk_server_credentials_t</link> sc);</programlisting>
<para>
This structure is complex enough to manipulate directly thus this
helper function is provided in order to free (deallocate) it.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>sc</parameter>&#160;:</term>
<listitem><simpara> is a <link linkend="gnutls-psk-server-credentials-t"><type>gnutls_psk_server_credentials_t</type></link> structure.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-psk-allocate-server-credentials" role="function">
<title>gnutls_psk_allocate_server_credentials ()</title>
<indexterm zone="gnutls-psk-allocate-server-credentials"><primary sortas="gnutls_psk_allocate_server_credentials">gnutls_psk_allocate_server_credentials</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_psk_allocate_server_credentials
                                                        (<link linkend="gnutls-psk-server-credentials-t">gnutls_psk_server_credentials_t</link> *sc);</programlisting>
<para>
This structure is complex enough to manipulate directly thus this
helper function is provided in order to allocate it.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>sc</parameter>&#160;:</term>
<listitem><simpara> is a pointer to a <link linkend="gnutls-psk-server-credentials-t"><type>gnutls_psk_server_credentials_t</type></link> structure.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> <link linkend="GNUTLS-E-SUCCESS--CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> on success, or an error code.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-psk-set-server-credentials-file" role="function">
<title>gnutls_psk_set_server_credentials_file ()</title>
<indexterm zone="gnutls-psk-set-server-credentials-file"><primary sortas="gnutls_psk_set_server_credentials_file">gnutls_psk_set_server_credentials_file</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_psk_set_server_credentials_file
                                                        (<link linkend="gnutls-psk-server-credentials-t">gnutls_psk_server_credentials_t</link> res,
                                                         const <link linkend="char">char</link> *password_file);</programlisting>
<para>
This function sets the password file, in a
<link linkend="gnutls-psk-server-credentials-t"><literal>gnutls_psk_server_credentials_t</literal></link> structure.  This password file
holds usernames and keys and will be used for PSK authentication.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>res</parameter>&#160;:</term>
<listitem><simpara> is a <link linkend="gnutls-psk-server-credentials-t"><type>gnutls_psk_server_credentials_t</type></link> structure.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>password_file</parameter>&#160;:</term>
<listitem><simpara> is the PSK password file (passwd.psk)
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> <link linkend="GNUTLS-E-SUCCESS--CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> on success, or an error code.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-psk-set-server-credentials-hint" role="function" condition="since:2.4.0">
<title>gnutls_psk_set_server_credentials_hint ()</title>
<indexterm zone="gnutls-psk-set-server-credentials-hint" role="2.4.0"><primary sortas="gnutls_psk_set_server_credentials_hint">gnutls_psk_set_server_credentials_hint</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_psk_set_server_credentials_hint
                                                        (<link linkend="gnutls-psk-server-credentials-t">gnutls_psk_server_credentials_t</link> res,
                                                         const <link linkend="char">char</link> *hint);</programlisting>
<para>
This function sets the identity hint, in a
<link linkend="gnutls-psk-server-credentials-t"><literal>gnutls_psk_server_credentials_t</literal></link> structure.  This hint is sent to
the client to help it chose a good PSK credential (i.e., username
and password).</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>res</parameter>&#160;:</term>
<listitem><simpara> is a <link linkend="gnutls-psk-server-credentials-t"><type>gnutls_psk_server_credentials_t</type></link> structure.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>hint</parameter>&#160;:</term>
<listitem><simpara> is the PSK identity hint string
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> <link linkend="GNUTLS-E-SUCCESS--CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> on success, or an error code.

</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 2.4.0</para></refsect2>
<refsect2 id="gnutls-psk-server-get-username" role="function">
<title>gnutls_psk_server_get_username ()</title>
<indexterm zone="gnutls-psk-server-get-username"><primary sortas="gnutls_psk_server_get_username">gnutls_psk_server_get_username</primary></indexterm><programlisting>const <link linkend="char">char</link> *        gnutls_psk_server_get_username      (<link linkend="gnutls-session-t">gnutls_session_t</link> session);</programlisting>
<para>
This should only be called in case of PSK authentication and in
case of a server.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&#160;:</term>
<listitem><simpara> is a gnutls session
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> the username of the peer, or <link linkend="NULL--CAPS"><literal>NULL</literal></link> in case of an error.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-psk-client-get-hint" role="function" condition="since:2.4.0">
<title>gnutls_psk_client_get_hint ()</title>
<indexterm zone="gnutls-psk-client-get-hint" role="2.4.0"><primary sortas="gnutls_psk_client_get_hint">gnutls_psk_client_get_hint</primary></indexterm><programlisting>const <link linkend="char">char</link> *        gnutls_psk_client_get_hint          (<link linkend="gnutls-session-t">gnutls_session_t</link> session);</programlisting>
<para>
The PSK identity hint may give the client help in deciding which
username to use.  This should only be called in case of PSK
authentication and in case of a client.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&#160;:</term>
<listitem><simpara> is a gnutls session
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> the identity hint of the peer, or <link linkend="NULL--CAPS"><literal>NULL</literal></link> in case of an error.

</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 2.4.0</para></refsect2>
<refsect2 id="gnutls-psk-set-server-credentials-function" role="function">
<title>gnutls_psk_set_server_credentials_function ()</title>
<indexterm zone="gnutls-psk-set-server-credentials-function"><primary sortas="gnutls_psk_set_server_credentials_function">gnutls_psk_set_server_credentials_function</primary></indexterm><programlisting><link linkend="void">void</link>                gnutls_psk_set_server_credentials_function
                                                        (<link linkend="gnutls-psk-server-credentials-t">gnutls_psk_server_credentials_t</link> cred,
                                                         <link linkend="gnutls-psk-server-credentials-function">gnutls_psk_server_credentials_function</link> *func);</programlisting>
<para>
This function can be used to set a callback to retrieve the user's PSK credentials.
The callback's function form is:
int (*callback)(gnutls_session_t, const char* username,
 gnutls_datum_t* key);
</para>
<para>
<parameter>username</parameter> contains the actual username.
The <parameter>key</parameter> must be filled in using the <link linkend="gnutls-malloc"><function>gnutls_malloc()</function></link>.
</para>
<para>
In case the callback returned a negative number then gnutls will
assume that the username does not exist.
</para>
<para>
The callback function will only be called once per handshake.  The
callback function should return 0 on success, while -1 indicates
an error.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>cred</parameter>&#160;:</term>
<listitem><simpara> is a <link linkend="gnutls-psk-server-credentials-t"><type>gnutls_psk_server_credentials_t</type></link> structure.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>func</parameter>&#160;:</term>
<listitem><simpara> is the callback function
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-psk-set-client-credentials-function" role="function">
<title>gnutls_psk_set_client_credentials_function ()</title>
<indexterm zone="gnutls-psk-set-client-credentials-function"><primary sortas="gnutls_psk_set_client_credentials_function">gnutls_psk_set_client_credentials_function</primary></indexterm><programlisting><link linkend="void">void</link>                gnutls_psk_set_client_credentials_function
                                                        (<link linkend="gnutls-psk-client-credentials-t">gnutls_psk_client_credentials_t</link> cred,
                                                         <link linkend="gnutls-psk-client-credentials-function">gnutls_psk_client_credentials_function</link> *func);</programlisting>
<para>
This function can be used to set a callback to retrieve the username and
password for client PSK authentication.
The callback's function form is:
int (*callback)(gnutls_session_t, char** username,
 gnutls_datum_t* key);
</para>
<para>
The <parameter>username</parameter> and <parameter>key->data</parameter> must be allocated using <link linkend="gnutls-malloc"><function>gnutls_malloc()</function></link>.
<parameter>username</parameter> should be ASCII strings or UTF-8 strings prepared using
the "SASLprep" profile of "stringprep".
</para>
<para>
The callback function will be called once per handshake.
</para>
<para>
The callback function should return 0 on success.
-1 indicates an error.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>cred</parameter>&#160;:</term>
<listitem><simpara> is a <link linkend="gnutls-psk-server-credentials-t"><type>gnutls_psk_server_credentials_t</type></link> structure.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>func</parameter>&#160;:</term>
<listitem><simpara> is the callback function
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-hex-encode" role="function">
<title>gnutls_hex_encode ()</title>
<indexterm zone="gnutls-hex-encode"><primary sortas="gnutls_hex_encode">gnutls_hex_encode</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_hex_encode                   (const <link linkend="gnutls-datum-t">gnutls_datum_t</link> *data,
                                                         <link linkend="char">char</link> *result,
                                                         <link linkend="size-t">size_t</link> *result_size);</programlisting>
<para>
This function will convert the given data to printable data, using
the hex encoding, as used in the PSK password files.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>data</parameter>&#160;:</term>
<listitem><simpara> contain the raw data
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>result</parameter>&#160;:</term>
<listitem><simpara> the place where hex data will be copied
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>result_size</parameter>&#160;:</term>
<listitem><simpara> holds the size of the result
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> <link linkend="GNUTLS-E-SHORT-MEMORY-BUFFER--CAPS"><literal>GNUTLS_E_SHORT_MEMORY_BUFFER</literal></link> if the buffer given is not
long enough, or 0 on success.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-hex-decode" role="function">
<title>gnutls_hex_decode ()</title>
<indexterm zone="gnutls-hex-decode"><primary sortas="gnutls_hex_decode">gnutls_hex_decode</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_hex_decode                   (const <link linkend="gnutls-datum-t">gnutls_datum_t</link> *hex_data,
                                                         <link linkend="char">char</link> *result,
                                                         <link linkend="size-t">size_t</link> *result_size);</programlisting>
<para>
This function will decode the given encoded data, using the hex encoding
used by PSK password files.
</para>
<para>
Note that hex_data should be null terminated.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>hex_data</parameter>&#160;:</term>
<listitem><simpara> contain the encoded data
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>result</parameter>&#160;:</term>
<listitem><simpara> the place where decoded data will be copied
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>result_size</parameter>&#160;:</term>
<listitem><simpara> holds the size of the result
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> <link linkend="GNUTLS-E-SHORT-MEMORY-BUFFER--CAPS"><literal>GNUTLS_E_SHORT_MEMORY_BUFFER</literal></link> if the buffer given is not
  long enough, or 0 on success.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-psk-set-server-dh-params" role="function">
<title>gnutls_psk_set_server_dh_params ()</title>
<indexterm zone="gnutls-psk-set-server-dh-params"><primary sortas="gnutls_psk_set_server_dh_params">gnutls_psk_set_server_dh_params</primary></indexterm><programlisting><link linkend="void">void</link>                gnutls_psk_set_server_dh_params     (<link linkend="gnutls-psk-server-credentials-t">gnutls_psk_server_credentials_t</link> res,
                                                         <link linkend="gnutls-dh-params-t">gnutls_dh_params_t</link> dh_params);</programlisting>
<para>
This function will set the Diffie-Hellman parameters for an
anonymous server to use. These parameters will be used in
Diffie-Hellman exchange with PSK cipher suites.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>res</parameter>&#160;:</term>
<listitem><simpara> is a gnutls_psk_server_credentials_t structure
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>dh_params</parameter>&#160;:</term>
<listitem><simpara> is a structure that holds Diffie-Hellman parameters.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-psk-set-server-params-function" role="function">
<title>gnutls_psk_set_server_params_function ()</title>
<indexterm zone="gnutls-psk-set-server-params-function"><primary sortas="gnutls_psk_set_server_params_function">gnutls_psk_set_server_params_function</primary></indexterm><programlisting><link linkend="void">void</link>                gnutls_psk_set_server_params_function
                                                        (<link linkend="gnutls-psk-server-credentials-t">gnutls_psk_server_credentials_t</link> res,
                                                         <link linkend="gnutls-params-function">gnutls_params_function</link> *func);</programlisting>
<para>
This function will set a callback in order for the server to get
the Diffie-Hellman parameters for PSK authentication.  The callback
should return zero on success.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>res</parameter>&#160;:</term>
<listitem><simpara> is a <link linkend="gnutls-certificate-credentials-t"><type>gnutls_certificate_credentials_t</type></link> structure
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>func</parameter>&#160;:</term>
<listitem><simpara> is the function to be called
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-psk-netconf-derive-key" role="function" condition="since:2.4.0">
<title>gnutls_psk_netconf_derive_key ()</title>
<indexterm zone="gnutls-psk-netconf-derive-key" role="2.4.0"><primary sortas="gnutls_psk_netconf_derive_key">gnutls_psk_netconf_derive_key</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_psk_netconf_derive_key       (const <link linkend="char">char</link> *password,
                                                         const <link linkend="char">char</link> *psk_identity,
                                                         const <link linkend="char">char</link> *psk_identity_hint,
                                                         <link linkend="gnutls-datum-t">gnutls_datum_t</link> *output_key);</programlisting>
<para>
This function will derive a PSK key from a password, for use with
the Netconf protocol.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>password</parameter>&#160;:</term>
<listitem><simpara> zero terminated string containing password.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>psk_identity</parameter>&#160;:</term>
<listitem><simpara> zero terminated string with PSK identity.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>psk_identity_hint</parameter>&#160;:</term>
<listitem><simpara> zero terminated string with PSK identity hint.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>output_key</parameter>&#160;:</term>
<listitem><simpara> output variable, contains newly allocated *data pointer.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> <link linkend="GNUTLS-E-SUCCESS--CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> on success, or an error code.

</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 2.4.0</para></refsect2>
<refsect2 id="gnutls-x509-subject-alt-name-t" role="enum">
<title>enum gnutls_x509_subject_alt_name_t</title>
<indexterm zone="gnutls-x509-subject-alt-name-t"><primary sortas="gnutls_x509_subject_alt_name_t">gnutls_x509_subject_alt_name_t</primary></indexterm><programlisting>  typedef enum gnutls_x509_subject_alt_name_t
  {
    GNUTLS_SAN_DNSNAME = 1,
    GNUTLS_SAN_RFC822NAME,
    GNUTLS_SAN_URI,
    GNUTLS_SAN_IPADDRESS,
    GNUTLS_SAN_OTHERNAME,
    GNUTLS_SAN_DN,
    /* The following are "virtual" subject alternative name types, in
       that they are represented by an otherName value and an OID.
       Used by gnutls_x509_crt_get_subject_alt_othername_oid().  */
    GNUTLS_SAN_OTHERNAME_XMPP = 1000
  } gnutls_x509_subject_alt_name_t;
</programlisting>
<para>
</para></refsect2>
<refsect2 id="gnutls-openpgp-crt-int" role="struct">
<title>struct gnutls_openpgp_crt_int</title>
<indexterm zone="gnutls-openpgp-crt-int"><primary sortas="gnutls_openpgp_crt_int">gnutls_openpgp_crt_int</primary></indexterm><programlisting>struct gnutls_openpgp_crt_int;</programlisting>
<para>
</para></refsect2>
<refsect2 id="gnutls-openpgp-crt-t" role="typedef">
<title>gnutls_openpgp_crt_t</title>
<indexterm zone="gnutls-openpgp-crt-t"><primary sortas="gnutls_openpgp_crt_t">gnutls_openpgp_crt_t</primary></indexterm><programlisting>  typedef struct gnutls_openpgp_crt_int *gnutls_openpgp_crt_t;
</programlisting>
<para>
</para></refsect2>
<refsect2 id="gnutls-openpgp-privkey-int" role="struct">
<title>struct gnutls_openpgp_privkey_int</title>
<indexterm zone="gnutls-openpgp-privkey-int"><primary sortas="gnutls_openpgp_privkey_int">gnutls_openpgp_privkey_int</primary></indexterm><programlisting>struct gnutls_openpgp_privkey_int;</programlisting>
<para>
</para></refsect2>
<refsect2 id="gnutls-openpgp-privkey-t" role="typedef">
<title>gnutls_openpgp_privkey_t</title>
<indexterm zone="gnutls-openpgp-privkey-t"><primary sortas="gnutls_openpgp_privkey_t">gnutls_openpgp_privkey_t</primary></indexterm><programlisting>  typedef struct gnutls_openpgp_privkey_int *gnutls_openpgp_privkey_t;
</programlisting>
<para>
</para></refsect2>
<refsect2 id="gnutls-auth-get-type" role="function">
<title>gnutls_auth_get_type ()</title>
<indexterm zone="gnutls-auth-get-type"><primary sortas="gnutls_auth_get_type">gnutls_auth_get_type</primary></indexterm><programlisting><link linkend="gnutls-credentials-type-t">gnutls_credentials_type_t</link>  gnutls_auth_get_type         (<link linkend="gnutls-session-t">gnutls_session_t</link> session);</programlisting>
<para>
Returns type of credentials for the current authentication schema.
The returned information is to be used to distinguish the function used
to access authentication data.
</para>
<para>
Eg. for CERTIFICATE ciphersuites (key exchange algorithms:
<link linkend="GNUTLS-KX-RSA--CAPS"><literal>GNUTLS_KX_RSA</literal></link>, <link linkend="GNUTLS-KX-DHE-RSA--CAPS"><literal>GNUTLS_KX_DHE_RSA</literal></link>), the same function are to be
used to access the authentication data.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&#160;:</term>
<listitem><simpara> is a <link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> structure.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> The type of credentials for the current authentication
  schema, a <link linkend="gnutls-credentials-type-t"><type>gnutls_credentials_type_t</type></link> type.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-auth-server-get-type" role="function">
<title>gnutls_auth_server_get_type ()</title>
<indexterm zone="gnutls-auth-server-get-type"><primary sortas="gnutls_auth_server_get_type">gnutls_auth_server_get_type</primary></indexterm><programlisting><link linkend="gnutls-credentials-type-t">gnutls_credentials_type_t</link>  gnutls_auth_server_get_type  (<link linkend="gnutls-session-t">gnutls_session_t</link> session);</programlisting>
<para>
Returns the type of credentials that were used for server authentication.
The returned information is to be used to distinguish the function used
to access authentication data.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&#160;:</term>
<listitem><simpara> is a <link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> structure.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> The type of credentials for the server authentication
  schema, a <link linkend="gnutls-credentials-type-t"><type>gnutls_credentials_type_t</type></link> type.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-auth-client-get-type" role="function">
<title>gnutls_auth_client_get_type ()</title>
<indexterm zone="gnutls-auth-client-get-type"><primary sortas="gnutls_auth_client_get_type">gnutls_auth_client_get_type</primary></indexterm><programlisting><link linkend="gnutls-credentials-type-t">gnutls_credentials_type_t</link>  gnutls_auth_client_get_type  (<link linkend="gnutls-session-t">gnutls_session_t</link> session);</programlisting>
<para>
Returns the type of credentials that were used for client authentication.
The returned information is to be used to distinguish the function used
to access authentication data.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&#160;:</term>
<listitem><simpara> is a <link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> structure.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> The type of credentials for the client authentication
  schema, a <link linkend="gnutls-credentials-type-t"><type>gnutls_credentials_type_t</type></link> type.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-dh-set-prime-bits" role="function">
<title>gnutls_dh_set_prime_bits ()</title>
<indexterm zone="gnutls-dh-set-prime-bits"><primary sortas="gnutls_dh_set_prime_bits">gnutls_dh_set_prime_bits</primary></indexterm><programlisting><link linkend="void">void</link>                gnutls_dh_set_prime_bits            (<link linkend="gnutls-session-t">gnutls_session_t</link> session,
                                                         unsigned <link linkend="int">int</link> bits);</programlisting>
<para>
This function sets the number of bits, for use in an Diffie-Hellman
key exchange.  This is used both in DH ephemeral and DH anonymous
cipher suites.  This will set the minimum size of the prime that
will be used for the handshake.
</para>
<para>
In the client side it sets the minimum accepted number of bits.  If
a server sends a prime with less bits than that
<link linkend="GNUTLS-E-DH-PRIME-UNACCEPTABLE--CAPS"><literal>GNUTLS_E_DH_PRIME_UNACCEPTABLE</literal></link> will be returned by the handshake.
</para>
<para>
This function has no effect in server side.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&#160;:</term>
<listitem><simpara> is a <link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> structure.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>bits</parameter>&#160;:</term>
<listitem><simpara> is the number of bits
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-dh-get-secret-bits" role="function">
<title>gnutls_dh_get_secret_bits ()</title>
<indexterm zone="gnutls-dh-get-secret-bits"><primary sortas="gnutls_dh_get_secret_bits">gnutls_dh_get_secret_bits</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_dh_get_secret_bits           (<link linkend="gnutls-session-t">gnutls_session_t</link> session);</programlisting>
<para>
This function will return the bits used in the last Diffie-Hellman
authentication with the peer.  Should be used for both anonymous
and ephemeral Diffie-Hellman.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&#160;:</term>
<listitem><simpara> is a gnutls session
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> On success, <link linkend="GNUTLS-E-SUCCESS--CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> (0) is returned, otherwise
  an error code is returned.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-dh-get-peers-public-bits" role="function">
<title>gnutls_dh_get_peers_public_bits ()</title>
<indexterm zone="gnutls-dh-get-peers-public-bits"><primary sortas="gnutls_dh_get_peers_public_bits">gnutls_dh_get_peers_public_bits</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_dh_get_peers_public_bits     (<link linkend="gnutls-session-t">gnutls_session_t</link> session);</programlisting>
<para>
Get the Diffie-Hellman public key bit size.  Can be used for both
anonymous and ephemeral Diffie-Hellman.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&#160;:</term>
<listitem><simpara> is a gnutls session
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> the public key bit size used in the last Diffie-Hellman
authentication with the peer, or a negative value in case of error.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-dh-get-prime-bits" role="function">
<title>gnutls_dh_get_prime_bits ()</title>
<indexterm zone="gnutls-dh-get-prime-bits"><primary sortas="gnutls_dh_get_prime_bits">gnutls_dh_get_prime_bits</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_dh_get_prime_bits            (<link linkend="gnutls-session-t">gnutls_session_t</link> session);</programlisting>
<para>
This function will return the bits of the prime used in the last
Diffie-Hellman authentication with the peer.  Should be used for
both anonymous and ephemeral Diffie-Hellman.  Note that some
ciphers, like RSA and DSA without DHE, does not use a
Diffie-Hellman exchange, and then this function will return 0.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&#160;:</term>
<listitem><simpara> is a gnutls session
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> The Diffie-Hellman bit strength is returned, or 0 if no
  Diffie-Hellman exchange was done, or a negative error code on
  failure.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-dh-get-group" role="function">
<title>gnutls_dh_get_group ()</title>
<indexterm zone="gnutls-dh-get-group"><primary sortas="gnutls_dh_get_group">gnutls_dh_get_group</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_dh_get_group                 (<link linkend="gnutls-session-t">gnutls_session_t</link> session,
                                                         <link linkend="gnutls-datum-t">gnutls_datum_t</link> *raw_gen,
                                                         <link linkend="gnutls-datum-t">gnutls_datum_t</link> *raw_prime);</programlisting>
<para>
This function will return the group parameters used in the last
Diffie-Hellman authentication with the peer.  These are the prime
and the generator used.  This function should be used for both
anonymous and ephemeral Diffie-Hellman.  The output parameters must
be freed with <link linkend="gnutls-free"><function>gnutls_free()</function></link>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&#160;:</term>
<listitem><simpara> is a gnutls session
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>raw_gen</parameter>&#160;:</term>
<listitem><simpara> will hold the generator.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>raw_prime</parameter>&#160;:</term>
<listitem><simpara> will hold the prime.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> On success, <link linkend="GNUTLS-E-SUCCESS--CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> (0) is returned, otherwise
  an error code is returned.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-dh-get-pubkey" role="function">
<title>gnutls_dh_get_pubkey ()</title>
<indexterm zone="gnutls-dh-get-pubkey"><primary sortas="gnutls_dh_get_pubkey">gnutls_dh_get_pubkey</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_dh_get_pubkey                (<link linkend="gnutls-session-t">gnutls_session_t</link> session,
                                                         <link linkend="gnutls-datum-t">gnutls_datum_t</link> *raw_key);</programlisting>
<para>
This function will return the peer's public key used in the last
Diffie-Hellman authentication.  This function should be used for
both anonymous and ephemeral Diffie-Hellman.  The output parameters
must be freed with <link linkend="gnutls-free"><function>gnutls_free()</function></link>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&#160;:</term>
<listitem><simpara> is a gnutls session
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>raw_key</parameter>&#160;:</term>
<listitem><simpara> will hold the public key.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> On success, <link linkend="GNUTLS-E-SUCCESS--CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> (0) is returned, otherwise
  an error code is returned.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-rsa-export-get-pubkey" role="function">
<title>gnutls_rsa_export_get_pubkey ()</title>
<indexterm zone="gnutls-rsa-export-get-pubkey"><primary sortas="gnutls_rsa_export_get_pubkey">gnutls_rsa_export_get_pubkey</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_rsa_export_get_pubkey        (<link linkend="gnutls-session-t">gnutls_session_t</link> session,
                                                         <link linkend="gnutls-datum-t">gnutls_datum_t</link> *exponent,
                                                         <link linkend="gnutls-datum-t">gnutls_datum_t</link> *modulus);</programlisting>
<para>
This function will return the peer's public key exponent and
modulus used in the last RSA-EXPORT authentication.  The output
parameters must be freed with <link linkend="gnutls-free"><function>gnutls_free()</function></link>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&#160;:</term>
<listitem><simpara> is a gnutls session
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>exponent</parameter>&#160;:</term>
<listitem><simpara> will hold the exponent.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>modulus</parameter>&#160;:</term>
<listitem><simpara> will hold the modulus.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> On success, <link linkend="GNUTLS-E-SUCCESS--CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> (0) is returned, otherwise
  an error code is returned.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-rsa-export-get-modulus-bits" role="function">
<title>gnutls_rsa_export_get_modulus_bits ()</title>
<indexterm zone="gnutls-rsa-export-get-modulus-bits"><primary sortas="gnutls_rsa_export_get_modulus_bits">gnutls_rsa_export_get_modulus_bits</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_rsa_export_get_modulus_bits  (<link linkend="gnutls-session-t">gnutls_session_t</link> session);</programlisting>
<para>
Get the export RSA parameter's modulus size.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&#160;:</term>
<listitem><simpara> is a gnutls session
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> the bits used in the last RSA-EXPORT key exchange with the
  peer, or a negative value in case of error.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-sign-func" role="function">
<title>gnutls_sign_func ()</title>
<indexterm zone="gnutls-sign-func"><primary sortas="gnutls_sign_func">gnutls_sign_func</primary></indexterm><programlisting><link linkend="int">int</link>                 (*gnutls_sign_func)                 (<link linkend="gnutls-session-t">gnutls_session_t</link> session,
                                                         <link linkend="void">void</link> *userdata,
                                                         <link linkend="gnutls-certificate-type-t">gnutls_certificate_type_t</link> cert_type,
                                                         const <link linkend="gnutls-datum-t">gnutls_datum_t</link> *cert,
                                                         const <link linkend="gnutls-datum-t">gnutls_datum_t</link> *hash,
                                                         <link linkend="gnutls-datum-t">gnutls_datum_t</link> *signature);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>userdata</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>cert_type</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>cert</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>hash</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>signature</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-sign-callback-set" role="function">
<title>gnutls_sign_callback_set ()</title>
<indexterm zone="gnutls-sign-callback-set"><primary sortas="gnutls_sign_callback_set">gnutls_sign_callback_set</primary></indexterm><programlisting><link linkend="void">void</link>                gnutls_sign_callback_set            (<link linkend="gnutls-session-t">gnutls_session_t</link> session,
                                                         <link linkend="gnutls-sign-func">gnutls_sign_func</link> sign_func,
                                                         <link linkend="void">void</link> *userdata);</programlisting>
<para>
Set the callback function.  The function must have this prototype:
</para>
<para>
typedef int (*gnutls_sign_func) (gnutls_session_t session,
                                 void *userdata,
                                 gnutls_certificate_type_t cert_type,
                                 const gnutls_datum_t * cert,
                                 const gnutls_datum_t * hash,
                                 gnutls_datum_t * signature);
</para>
<para>
The <parameter>userdata</parameter> parameter is passed to the <parameter>sign_func</parameter> verbatim, and
can be used to store application-specific data needed in the
callback function.  See also <link linkend="gnutls-sign-callback-get"><function>gnutls_sign_callback_get()</function></link>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&#160;:</term>
<listitem><simpara> is a gnutls session
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>sign_func</parameter>&#160;:</term>
<listitem><simpara> function pointer to application's sign callback.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>userdata</parameter>&#160;:</term>
<listitem><simpara> void pointer that will be passed to sign callback.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-sign-callback-get" role="function">
<title>gnutls_sign_callback_get ()</title>
<indexterm zone="gnutls-sign-callback-get"><primary sortas="gnutls_sign_callback_get">gnutls_sign_callback_get</primary></indexterm><programlisting><link linkend="gnutls-sign-func">gnutls_sign_func</link>    gnutls_sign_callback_get            (<link linkend="gnutls-session-t">gnutls_session_t</link> session,
                                                         <link linkend="void">void</link> **userdata);</programlisting>
<para>
Retrieve the callback function, and its userdata pointer.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&#160;:</term>
<listitem><simpara> is a gnutls session
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>userdata</parameter>&#160;:</term>
<listitem><simpara> if non-<link linkend="NULL--CAPS"><literal>NULL</literal></link>, will be set to abstract callback pointer.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> The function pointer set by <link linkend="gnutls-sign-callback-set"><function>gnutls_sign_callback_set()</function></link>, or
  if not set, <link linkend="NULL--CAPS"><literal>NULL</literal></link>.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-certificate-client-set-retrieve-function" role="function">
<title>gnutls_certificate_client_set_retrieve_function ()</title>
<indexterm zone="gnutls-certificate-client-set-retrieve-function"><primary sortas="gnutls_certificate_client_set_retrieve_function">gnutls_certificate_client_set_retrieve_function</primary></indexterm><programlisting><link linkend="void">void</link>                gnutls_certificate_client_set_retrieve_function
                                                        (<link linkend="gnutls-certificate-credentials-t">gnutls_certificate_credentials_t</link> cred,
                                                         <link linkend="gnutls-certificate-client-retrieve-function">gnutls_certificate_client_retrieve_function</link> *func);</programlisting>
<para>
This function sets a callback to be called in order to retrieve the certificate
to be used in the handshake.
The callback's function prototype is:
int (*callback)(gnutls_session_t, const gnutls_datum_t* req_ca_dn, int nreqs, 
const gnutls_pk_algorithm_t* pk_algos, int pk_algos_length, gnutls_retr_st* st);
</para>
<para>
<parameter>req_ca_cert</parameter> is only used in X.509 certificates. 
Contains a list with the CA names that the server considers trusted. 
Normally we should send a certificate that is signed
by one of these CAs. These names are DER encoded. To get a more
meaningful value use the function <link linkend="gnutls-x509-rdn-get"><function>gnutls_x509_rdn_get()</function></link>.
</para>
<para>
<parameter>pk_algos</parameter> contains a list with server's acceptable signature algorithms.
The certificate returned should support the server's given algorithms.
</para>
<para>
<parameter>st</parameter> should contain the certificates and private keys.
</para>
<para>
If the callback function is provided then gnutls will call it, in the
handshake, after the certificate request message has been received.
</para>
<para>
The callback function should set the certificate list to be sent, and
return 0 on success. If no certificate was selected then the number of certificates
should be set to zero. The value (-1) indicates error and the handshake
will be terminated.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>cred</parameter>&#160;:</term>
<listitem><simpara> is a <link linkend="gnutls-certificate-credentials-t"><type>gnutls_certificate_credentials_t</type></link> structure.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>func</parameter>&#160;:</term>
<listitem><simpara> is the callback function
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-certificate-server-set-retrieve-function" role="function">
<title>gnutls_certificate_server_set_retrieve_function ()</title>
<indexterm zone="gnutls-certificate-server-set-retrieve-function"><primary sortas="gnutls_certificate_server_set_retrieve_function">gnutls_certificate_server_set_retrieve_function</primary></indexterm><programlisting><link linkend="void">void</link>                gnutls_certificate_server_set_retrieve_function
                                                        (<link linkend="gnutls-certificate-credentials-t">gnutls_certificate_credentials_t</link> cred,
                                                         <link linkend="gnutls-certificate-server-retrieve-function">gnutls_certificate_server_retrieve_function</link> *func);</programlisting>
<para>
This function sets a callback to be called in order to retrieve the certificate
to be used in the handshake.
The callback's function prototype is:
int (*callback)(gnutls_session_t, gnutls_retr_st* st);
</para>
<para>
<parameter>st</parameter> should contain the certificates and private keys.
</para>
<para>
If the callback function is provided then gnutls will call it, in the
handshake, after the certificate request message has been received.
</para>
<para>
The callback function should set the certificate list to be sent, and
return 0 on success.  The value (-1) indicates error and the handshake
will be terminated.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>cred</parameter>&#160;:</term>
<listitem><simpara> is a <link linkend="gnutls-certificate-credentials-t"><type>gnutls_certificate_credentials_t</type></link> structure.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>func</parameter>&#160;:</term>
<listitem><simpara> is the callback function
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-certificate-server-set-request" role="function">
<title>gnutls_certificate_server_set_request ()</title>
<indexterm zone="gnutls-certificate-server-set-request"><primary sortas="gnutls_certificate_server_set_request">gnutls_certificate_server_set_request</primary></indexterm><programlisting><link linkend="void">void</link>                gnutls_certificate_server_set_request
                                                        (<link linkend="gnutls-session-t">gnutls_session_t</link> session,
                                                         <link linkend="gnutls-certificate-request-t">gnutls_certificate_request_t</link> req);</programlisting>
<para>
This function specifies if we (in case of a server) are going
to send a certificate request message to the client. If <parameter>req</parameter>
is GNUTLS_CERT_REQUIRE then the server will return an error if
the peer does not provide a certificate. If you do not
call this function then the client will not be asked to
send a certificate.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&#160;:</term>
<listitem><simpara> is a <link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> structure.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>req</parameter>&#160;:</term>
<listitem><simpara> is one of GNUTLS_CERT_REQUEST, GNUTLS_CERT_REQUIRE
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-certificate-get-peers" role="function">
<title>gnutls_certificate_get_peers ()</title>
<indexterm zone="gnutls-certificate-get-peers"><primary sortas="gnutls_certificate_get_peers">gnutls_certificate_get_peers</primary></indexterm><programlisting>const <link linkend="gnutls-datum-t">gnutls_datum_t</link> * gnutls_certificate_get_peers     (<link linkend="gnutls-session-t">gnutls_session_t</link> session,
                                                         unsigned <link linkend="int">int</link> *list_size);</programlisting>
<para>
Get the peer's raw certificate (chain) as sent by the peer.  These
certificates are in raw format (DER encoded for X.509).  In case of
a X.509 then a certificate list may be present.  The first
certificate in the list is the peer's certificate, following the
issuer's certificate, then the issuer's issuer etc.
</para>
<para>
In case of OpenPGP keys a single key will be returned in raw
format.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&#160;:</term>
<listitem><simpara> is a gnutls session
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>list_size</parameter>&#160;:</term>
<listitem><simpara> is the length of the certificate list
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> return a pointer to a <link linkend="gnutls-datum-t"><type>gnutls_datum_t</type></link> containing our
  certificates, or <link linkend="NULL--CAPS"><literal>NULL</literal></link> in case of an error or if no certificate
  was used.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-certificate-get-ours" role="function">
<title>gnutls_certificate_get_ours ()</title>
<indexterm zone="gnutls-certificate-get-ours"><primary sortas="gnutls_certificate_get_ours">gnutls_certificate_get_ours</primary></indexterm><programlisting>const <link linkend="gnutls-datum-t">gnutls_datum_t</link> * gnutls_certificate_get_ours      (<link linkend="gnutls-session-t">gnutls_session_t</link> session);</programlisting>
<para>
Get the certificate as sent to the peer, in the last handshake.
These certificates are in raw format.  In X.509 this is a
certificate list. In OpenPGP this is a single certificate.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&#160;:</term>
<listitem><simpara> is a gnutls session
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> return a pointer to a <link linkend="gnutls-datum-t"><type>gnutls_datum_t</type></link> containing our
  certificates, or <link linkend="NULL--CAPS"><literal>NULL</literal></link> in case of an error or if no certificate
  was used.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-certificate-activation-time-peers" role="function" condition="deprecated:gnutls_certificate_verify_peers2() now verifies activation times.">
<title>gnutls_certificate_activation_time_peers ()</title>
<indexterm zone="gnutls-certificate-activation-time-peers" role="deprecated"><primary sortas="gnutls_certificate_activation_time_peers">gnutls_certificate_activation_time_peers</primary></indexterm><programlisting><link linkend="time-t">time_t</link>              gnutls_certificate_activation_time_peers
                                                        (<link linkend="gnutls-session-t">gnutls_session_t</link> session);</programlisting>
<warning><para><literal>gnutls_certificate_activation_time_peers</literal> is deprecated and should not be used in newly-written code. <link linkend="gnutls-certificate-verify-peers2"><function>gnutls_certificate_verify_peers2()</function></link> now verifies activation times.</para></warning>
<para>
This function will return the peer's certificate activation time.
This is the creation time for openpgp keys.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&#160;:</term>
<listitem><simpara> is a gnutls session
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> (time_t)-1 on error.

</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-certificate-expiration-time-peers" role="function" condition="deprecated:gnutls_certificate_verify_peers2() now verifies expiration times.">
<title>gnutls_certificate_expiration_time_peers ()</title>
<indexterm zone="gnutls-certificate-expiration-time-peers" role="deprecated"><primary sortas="gnutls_certificate_expiration_time_peers">gnutls_certificate_expiration_time_peers</primary></indexterm><programlisting><link linkend="time-t">time_t</link>              gnutls_certificate_expiration_time_peers
                                                        (<link linkend="gnutls-session-t">gnutls_session_t</link> session);</programlisting>
<warning><para><literal>gnutls_certificate_expiration_time_peers</literal> is deprecated and should not be used in newly-written code. <link linkend="gnutls-certificate-verify-peers2"><function>gnutls_certificate_verify_peers2()</function></link> now verifies expiration times.</para></warning>
<para>
This function will return the peer's certificate expiration time.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&#160;:</term>
<listitem><simpara> is a gnutls session
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> (time_t)-1 on error.

</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-certificate-client-get-request-status" role="function">
<title>gnutls_certificate_client_get_request_status ()</title>
<indexterm zone="gnutls-certificate-client-get-request-status"><primary sortas="gnutls_certificate_client_get_request_status">gnutls_certificate_client_get_request_status</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_certificate_client_get_request_status
                                                        (<link linkend="gnutls-session-t">gnutls_session_t</link> session);</programlisting>
<para>
Get whether client certificate is requested or not.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&#160;:</term>
<listitem><simpara> is a gnutls session
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> 0 if the peer (server) did not request client
authentication or 1 otherwise, or a negative value in case of
error.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-certificate-verify-peers2" role="function">
<title>gnutls_certificate_verify_peers2 ()</title>
<indexterm zone="gnutls-certificate-verify-peers2"><primary sortas="gnutls_certificate_verify_peers2">gnutls_certificate_verify_peers2</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_certificate_verify_peers2    (<link linkend="gnutls-session-t">gnutls_session_t</link> session,
                                                         unsigned <link linkend="int">int</link> *status);</programlisting>
<para>
This function will try to verify the peer's certificate and return
its status (trusted, invalid etc.).  The value of <parameter>status</parameter> should
be one or more of the gnutls_certificate_status_t enumerated
elements bitwise or'd. To avoid denial of service attacks some
default upper limits regarding the certificate key size and chain
size are set. To override them use
<link linkend="gnutls-certificate-set-verify-limits"><function>gnutls_certificate_set_verify_limits()</function></link>.
</para>
<para>
Note that you must also check the peer's name in order to check if
the verified certificate belongs to the actual peer.
</para>
<para>
This function uses <link linkend="gnutls-x509-crt-list-verify"><function>gnutls_x509_crt_list_verify()</function></link> with the CAs in
the credentials as trusted CAs.
</para>
<para>
Note that some commonly used X.509 Certificate Authorities are
still using Version 1 certificates.  If you want to accept them,
you need to call <link linkend="gnutls-certificate-set-verify-flags"><function>gnutls_certificate_set_verify_flags()</function></link> with, e.g.,
<link linkend="GNUTLS-VERIFY-ALLOW-X509-V1-CA-CRT--CAPS"><literal>GNUTLS_VERIFY_ALLOW_X509_V1_CA_CRT</literal></link> parameter.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&#160;:</term>
<listitem><simpara> is a gnutls session
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>status</parameter>&#160;:</term>
<listitem><simpara> is the output of the verification
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a negative error code on error and zero on success.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-certificate-verify-peers" role="function" condition="deprecated:Use gnutls_certificate_verify_peers2() instead.">
<title>gnutls_certificate_verify_peers ()</title>
<indexterm zone="gnutls-certificate-verify-peers" role="deprecated"><primary sortas="gnutls_certificate_verify_peers">gnutls_certificate_verify_peers</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_certificate_verify_peers     (<link linkend="gnutls-session-t">gnutls_session_t</link> session);</programlisting>
<warning><para><literal>gnutls_certificate_verify_peers</literal> is deprecated and should not be used in newly-written code. Use <link linkend="gnutls-certificate-verify-peers2"><function>gnutls_certificate_verify_peers2()</function></link> instead.</para></warning>
<para>
This function will try to verify the peer's certificate and return
its status (trusted, invalid etc.).  However you must also check
the peer's name in order to check if the verified certificate
belongs to the actual peer.
</para>
<para>
This function uses <link linkend="gnutls-x509-crt-list-verify"><function>gnutls_x509_crt_list_verify()</function></link>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&#160;:</term>
<listitem><simpara> is a gnutls session
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> one or more of the <link linkend="gnutls-certificate-status-t"><type>gnutls_certificate_status_t</type></link>
enumerated elements bitwise or'd, or a negative value on error.

</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-pem-base64-encode" role="function">
<title>gnutls_pem_base64_encode ()</title>
<indexterm zone="gnutls-pem-base64-encode"><primary sortas="gnutls_pem_base64_encode">gnutls_pem_base64_encode</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_pem_base64_encode            (const <link linkend="char">char</link> *msg,
                                                         const <link linkend="gnutls-datum-t">gnutls_datum_t</link> *data,
                                                         <link linkend="char">char</link> *result,
                                                         <link linkend="size-t">size_t</link> *result_size);</programlisting>
<para>
This function will convert the given data to printable data, using
the base64 encoding. This is the encoding used in PEM messages.
</para>
<para>
The output string will be null terminated, although the size will
not include the terminating null.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>msg</parameter>&#160;:</term>
<listitem><simpara> is a message to be put in the header
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>data</parameter>&#160;:</term>
<listitem><simpara> contain the raw data
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>result</parameter>&#160;:</term>
<listitem><simpara> the place where base64 data will be copied
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>result_size</parameter>&#160;:</term>
<listitem><simpara> holds the size of the result
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> On success <link linkend="GNUTLS-E-SUCCESS--CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> (0) is returned,
  <link linkend="GNUTLS-E-SHORT-MEMORY-BUFFER--CAPS"><literal>GNUTLS_E_SHORT_MEMORY_BUFFER</literal></link> is returned if the buffer given is
  not long enough, or 0 on success.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-pem-base64-decode" role="function">
<title>gnutls_pem_base64_decode ()</title>
<indexterm zone="gnutls-pem-base64-decode"><primary sortas="gnutls_pem_base64_decode">gnutls_pem_base64_decode</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_pem_base64_decode            (const <link linkend="char">char</link> *header,
                                                         const <link linkend="gnutls-datum-t">gnutls_datum_t</link> *b64_data,
                                                         unsigned <link linkend="char">char</link> *result,
                                                         <link linkend="size-t">size_t</link> *result_size);</programlisting>
<para>
This function will decode the given encoded data.  If the header
given is non null this function will search for "-----BEGIN header"
and decode only this part.  Otherwise it will decode the first PEM
packet found.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>header</parameter>&#160;:</term>
<listitem><simpara> A null terminated string with the PEM header (eg. CERTIFICATE)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>b64_data</parameter>&#160;:</term>
<listitem><simpara> contain the encoded data
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>result</parameter>&#160;:</term>
<listitem><simpara> the place where decoded data will be copied
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>result_size</parameter>&#160;:</term>
<listitem><simpara> holds the size of the result
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> On success <link linkend="GNUTLS-E-SUCCESS--CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> (0) is returned,
  <link linkend="GNUTLS-E-SHORT-MEMORY-BUFFER--CAPS"><literal>GNUTLS_E_SHORT_MEMORY_BUFFER</literal></link> is returned if the buffer given is
  not long enough, or 0 on success.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-pem-base64-encode-alloc" role="function">
<title>gnutls_pem_base64_encode_alloc ()</title>
<indexterm zone="gnutls-pem-base64-encode-alloc"><primary sortas="gnutls_pem_base64_encode_alloc">gnutls_pem_base64_encode_alloc</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_pem_base64_encode_alloc      (const <link linkend="char">char</link> *msg,
                                                         const <link linkend="gnutls-datum-t">gnutls_datum_t</link> *data,
                                                         <link linkend="gnutls-datum-t">gnutls_datum_t</link> *result);</programlisting>
<para>
This function will convert the given data to printable data, using
the base64 encoding.  This is the encoding used in PEM messages.
This function will allocate the required memory to hold the encoded
data.
</para>
<para>
You should use <link linkend="gnutls-free"><function>gnutls_free()</function></link> to free the returned data.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>msg</parameter>&#160;:</term>
<listitem><simpara> is a message to be put in the encoded header
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>data</parameter>&#160;:</term>
<listitem><simpara> contains the raw data
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>result</parameter>&#160;:</term>
<listitem><simpara> will hold the newly allocated encoded data
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> On success, <link linkend="GNUTLS-E-SUCCESS--CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> (0) is returned, otherwise
  an error code is returned.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-pem-base64-decode-alloc" role="function">
<title>gnutls_pem_base64_decode_alloc ()</title>
<indexterm zone="gnutls-pem-base64-decode-alloc"><primary sortas="gnutls_pem_base64_decode_alloc">gnutls_pem_base64_decode_alloc</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_pem_base64_decode_alloc      (const <link linkend="char">char</link> *header,
                                                         const <link linkend="gnutls-datum-t">gnutls_datum_t</link> *b64_data,
                                                         <link linkend="gnutls-datum-t">gnutls_datum_t</link> *result);</programlisting>
<para>
This function will decode the given encoded data. The decoded data
will be allocated, and stored into result.  If the header given is
non null this function will search for "-----BEGIN header" and
decode only this part. Otherwise it will decode the first PEM
packet found.
</para>
<para>
You should use <link linkend="gnutls-free"><function>gnutls_free()</function></link> to free the returned data.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>header</parameter>&#160;:</term>
<listitem><simpara> The PEM header (eg. CERTIFICATE)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>b64_data</parameter>&#160;:</term>
<listitem><simpara> contains the encoded data
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>result</parameter>&#160;:</term>
<listitem><simpara> the place where decoded data lie
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> On success, <link linkend="GNUTLS-E-SUCCESS--CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> (0) is returned, otherwise
  an error code is returned.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="GNUTLS-KEY-DIGITAL-SIGNATURE--CAPS" role="macro">
<title>GNUTLS_KEY_DIGITAL_SIGNATURE</title>
<indexterm zone="GNUTLS-KEY-DIGITAL-SIGNATURE--CAPS"><primary sortas="GNUTLS_KEY_DIGITAL_SIGNATURE">GNUTLS_KEY_DIGITAL_SIGNATURE</primary></indexterm><programlisting>#define GNUTLS_KEY_DIGITAL_SIGNATURE	128
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-KEY-NON-REPUDIATION--CAPS" role="macro">
<title>GNUTLS_KEY_NON_REPUDIATION</title>
<indexterm zone="GNUTLS-KEY-NON-REPUDIATION--CAPS"><primary sortas="GNUTLS_KEY_NON_REPUDIATION">GNUTLS_KEY_NON_REPUDIATION</primary></indexterm><programlisting>#define GNUTLS_KEY_NON_REPUDIATION	64
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-KEY-KEY-ENCIPHERMENT--CAPS" role="macro">
<title>GNUTLS_KEY_KEY_ENCIPHERMENT</title>
<indexterm zone="GNUTLS-KEY-KEY-ENCIPHERMENT--CAPS"><primary sortas="GNUTLS_KEY_KEY_ENCIPHERMENT">GNUTLS_KEY_KEY_ENCIPHERMENT</primary></indexterm><programlisting>#define GNUTLS_KEY_KEY_ENCIPHERMENT	32
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-KEY-DATA-ENCIPHERMENT--CAPS" role="macro">
<title>GNUTLS_KEY_DATA_ENCIPHERMENT</title>
<indexterm zone="GNUTLS-KEY-DATA-ENCIPHERMENT--CAPS"><primary sortas="GNUTLS_KEY_DATA_ENCIPHERMENT">GNUTLS_KEY_DATA_ENCIPHERMENT</primary></indexterm><programlisting>#define GNUTLS_KEY_DATA_ENCIPHERMENT	16
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-KEY-KEY-AGREEMENT--CAPS" role="macro">
<title>GNUTLS_KEY_KEY_AGREEMENT</title>
<indexterm zone="GNUTLS-KEY-KEY-AGREEMENT--CAPS"><primary sortas="GNUTLS_KEY_KEY_AGREEMENT">GNUTLS_KEY_KEY_AGREEMENT</primary></indexterm><programlisting>#define GNUTLS_KEY_KEY_AGREEMENT	8
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-KEY-KEY-CERT-SIGN--CAPS" role="macro">
<title>GNUTLS_KEY_KEY_CERT_SIGN</title>
<indexterm zone="GNUTLS-KEY-KEY-CERT-SIGN--CAPS"><primary sortas="GNUTLS_KEY_KEY_CERT_SIGN">GNUTLS_KEY_KEY_CERT_SIGN</primary></indexterm><programlisting>#define GNUTLS_KEY_KEY_CERT_SIGN	4
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-KEY-CRL-SIGN--CAPS" role="macro">
<title>GNUTLS_KEY_CRL_SIGN</title>
<indexterm zone="GNUTLS-KEY-CRL-SIGN--CAPS"><primary sortas="GNUTLS_KEY_CRL_SIGN">GNUTLS_KEY_CRL_SIGN</primary></indexterm><programlisting>#define GNUTLS_KEY_CRL_SIGN		2
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-KEY-ENCIPHER-ONLY--CAPS" role="macro">
<title>GNUTLS_KEY_ENCIPHER_ONLY</title>
<indexterm zone="GNUTLS-KEY-ENCIPHER-ONLY--CAPS"><primary sortas="GNUTLS_KEY_ENCIPHER_ONLY">GNUTLS_KEY_ENCIPHER_ONLY</primary></indexterm><programlisting>#define GNUTLS_KEY_ENCIPHER_ONLY	1
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-KEY-DECIPHER-ONLY--CAPS" role="macro">
<title>GNUTLS_KEY_DECIPHER_ONLY</title>
<indexterm zone="GNUTLS-KEY-DECIPHER-ONLY--CAPS"><primary sortas="GNUTLS_KEY_DECIPHER_ONLY">GNUTLS_KEY_DECIPHER_ONLY</primary></indexterm><programlisting>#define GNUTLS_KEY_DECIPHER_ONLY	32768
</programlisting>
<para>
</para></refsect2>
<refsect2 id="gnutls-certificate-set-params-function" role="function">
<title>gnutls_certificate_set_params_function ()</title>
<indexterm zone="gnutls-certificate-set-params-function"><primary sortas="gnutls_certificate_set_params_function">gnutls_certificate_set_params_function</primary></indexterm><programlisting><link linkend="void">void</link>                gnutls_certificate_set_params_function
                                                        (<link linkend="gnutls-certificate-credentials-t">gnutls_certificate_credentials_t</link> res,
                                                         <link linkend="gnutls-params-function">gnutls_params_function</link> *func);</programlisting>
<para>
This function will set a callback in order for the server to get
the Diffie-Hellman or RSA parameters for certificate
authentication.  The callback should return zero on success.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>res</parameter>&#160;:</term>
<listitem><simpara> is a gnutls_certificate_credentials_t structure
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>func</parameter>&#160;:</term>
<listitem><simpara> is the function to be called
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-anon-set-params-function" role="function">
<title>gnutls_anon_set_params_function ()</title>
<indexterm zone="gnutls-anon-set-params-function"><primary sortas="gnutls_anon_set_params_function">gnutls_anon_set_params_function</primary></indexterm><programlisting><link linkend="void">void</link>                gnutls_anon_set_params_function     (<link linkend="gnutls-anon-server-credentials-t">gnutls_anon_server_credentials_t</link> res,
                                                         <link linkend="gnutls-params-function">gnutls_params_function</link> *func);</programlisting>
<para>
This function will set a callback in order for the server to get
the Diffie-Hellman or RSA parameters for anonymous authentication.
The callback should return zero on success.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>res</parameter>&#160;:</term>
<listitem><simpara> is a gnutls_anon_server_credentials_t structure
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>func</parameter>&#160;:</term>
<listitem><simpara> is the function to be called
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-psk-set-params-function" role="function">
<title>gnutls_psk_set_params_function ()</title>
<indexterm zone="gnutls-psk-set-params-function"><primary sortas="gnutls_psk_set_params_function">gnutls_psk_set_params_function</primary></indexterm><programlisting><link linkend="void">void</link>                gnutls_psk_set_params_function      (<link linkend="gnutls-psk-server-credentials-t">gnutls_psk_server_credentials_t</link> res,
                                                         <link linkend="gnutls-params-function">gnutls_params_function</link> *func);</programlisting>
<para>
This function will set a callback in order for the server to get
the Diffie-Hellman or RSA parameters for psk authentication.  The
callback should return zero on success.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>res</parameter>&#160;:</term>
<listitem><simpara> is a gnutls_psk_server_credentials_t structure
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>func</parameter>&#160;:</term>
<listitem><simpara> is the function to be called
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-hex2bin" role="function" condition="since:2.4.0">
<title>gnutls_hex2bin ()</title>
<indexterm zone="gnutls-hex2bin" role="2.4.0"><primary sortas="gnutls_hex2bin">gnutls_hex2bin</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_hex2bin                      (const <link linkend="char">char</link> *hex_data,
                                                         <link linkend="size-t">size_t</link> hex_size,
                                                         <link linkend="char">char</link> *bin_data,
                                                         <link linkend="size-t">size_t</link> *bin_size);</programlisting>
<para>
Convert a buffer with hex data to binary data.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>hex_data</parameter>&#160;:</term>
<listitem><simpara> string with data in hex format
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>hex_size</parameter>&#160;:</term>
<listitem><simpara> size of hex data
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>bin_data</parameter>&#160;:</term>
<listitem><simpara> output array with binary data
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>bin_size</parameter>&#160;:</term>
<listitem><simpara> when calling *<parameter>bin_size</parameter> should hold size of <parameter>bin_data</parameter>,
           on return will hold actual size of <parameter>bin_data</parameter>.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> <link linkend="GNUTLS-E-SUCCESS--CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> on success, otherwise an error.

</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 2.4.0</para></refsect2>
<refsect2 id="GNUTLS-E-SUCCESS--CAPS" role="macro">
<title>GNUTLS_E_SUCCESS</title>
<indexterm zone="GNUTLS-E-SUCCESS--CAPS"><primary sortas="GNUTLS_E_SUCCESS">GNUTLS_E_SUCCESS</primary></indexterm><programlisting>#define GNUTLS_E_SUCCESS 0
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-E-UNKNOWN-COMPRESSION-ALGORITHM--CAPS" role="macro">
<title>GNUTLS_E_UNKNOWN_COMPRESSION_ALGORITHM</title>
<indexterm zone="GNUTLS-E-UNKNOWN-COMPRESSION-ALGORITHM--CAPS"><primary sortas="GNUTLS_E_UNKNOWN_COMPRESSION_ALGORITHM">GNUTLS_E_UNKNOWN_COMPRESSION_ALGORITHM</primary></indexterm><programlisting>#define	GNUTLS_E_UNKNOWN_COMPRESSION_ALGORITHM -3
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-E-UNKNOWN-CIPHER-TYPE--CAPS" role="macro">
<title>GNUTLS_E_UNKNOWN_CIPHER_TYPE</title>
<indexterm zone="GNUTLS-E-UNKNOWN-CIPHER-TYPE--CAPS"><primary sortas="GNUTLS_E_UNKNOWN_CIPHER_TYPE">GNUTLS_E_UNKNOWN_CIPHER_TYPE</primary></indexterm><programlisting>#define	GNUTLS_E_UNKNOWN_CIPHER_TYPE -6
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-E-LARGE-PACKET--CAPS" role="macro">
<title>GNUTLS_E_LARGE_PACKET</title>
<indexterm zone="GNUTLS-E-LARGE-PACKET--CAPS"><primary sortas="GNUTLS_E_LARGE_PACKET">GNUTLS_E_LARGE_PACKET</primary></indexterm><programlisting>#define	GNUTLS_E_LARGE_PACKET -7
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-E-UNSUPPORTED-VERSION-PACKET--CAPS" role="macro">
<title>GNUTLS_E_UNSUPPORTED_VERSION_PACKET</title>
<indexterm zone="GNUTLS-E-UNSUPPORTED-VERSION-PACKET--CAPS"><primary sortas="GNUTLS_E_UNSUPPORTED_VERSION_PACKET">GNUTLS_E_UNSUPPORTED_VERSION_PACKET</primary></indexterm><programlisting>#define GNUTLS_E_UNSUPPORTED_VERSION_PACKET -8	/* GNUTLS_A_PROTOCOL_VERSION */
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-E-UNEXPECTED-PACKET-LENGTH--CAPS" role="macro">
<title>GNUTLS_E_UNEXPECTED_PACKET_LENGTH</title>
<indexterm zone="GNUTLS-E-UNEXPECTED-PACKET-LENGTH--CAPS"><primary sortas="GNUTLS_E_UNEXPECTED_PACKET_LENGTH">GNUTLS_E_UNEXPECTED_PACKET_LENGTH</primary></indexterm><programlisting>#define GNUTLS_E_UNEXPECTED_PACKET_LENGTH -9	/* GNUTLS_A_RECORD_OVERFLOW */
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-E-INVALID-SESSION--CAPS" role="macro">
<title>GNUTLS_E_INVALID_SESSION</title>
<indexterm zone="GNUTLS-E-INVALID-SESSION--CAPS"><primary sortas="GNUTLS_E_INVALID_SESSION">GNUTLS_E_INVALID_SESSION</primary></indexterm><programlisting>#define GNUTLS_E_INVALID_SESSION -10
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-E-FATAL-ALERT-RECEIVED--CAPS" role="macro">
<title>GNUTLS_E_FATAL_ALERT_RECEIVED</title>
<indexterm zone="GNUTLS-E-FATAL-ALERT-RECEIVED--CAPS"><primary sortas="GNUTLS_E_FATAL_ALERT_RECEIVED">GNUTLS_E_FATAL_ALERT_RECEIVED</primary></indexterm><programlisting>#define GNUTLS_E_FATAL_ALERT_RECEIVED -12
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-E-UNEXPECTED-PACKET--CAPS" role="macro">
<title>GNUTLS_E_UNEXPECTED_PACKET</title>
<indexterm zone="GNUTLS-E-UNEXPECTED-PACKET--CAPS"><primary sortas="GNUTLS_E_UNEXPECTED_PACKET">GNUTLS_E_UNEXPECTED_PACKET</primary></indexterm><programlisting>#define GNUTLS_E_UNEXPECTED_PACKET -15	/* GNUTLS_A_UNEXPECTED_MESSAGE */
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-E-WARNING-ALERT-RECEIVED--CAPS" role="macro">
<title>GNUTLS_E_WARNING_ALERT_RECEIVED</title>
<indexterm zone="GNUTLS-E-WARNING-ALERT-RECEIVED--CAPS"><primary sortas="GNUTLS_E_WARNING_ALERT_RECEIVED">GNUTLS_E_WARNING_ALERT_RECEIVED</primary></indexterm><programlisting>#define GNUTLS_E_WARNING_ALERT_RECEIVED -16
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-E-ERROR-IN-FINISHED-PACKET--CAPS" role="macro">
<title>GNUTLS_E_ERROR_IN_FINISHED_PACKET</title>
<indexterm zone="GNUTLS-E-ERROR-IN-FINISHED-PACKET--CAPS"><primary sortas="GNUTLS_E_ERROR_IN_FINISHED_PACKET">GNUTLS_E_ERROR_IN_FINISHED_PACKET</primary></indexterm><programlisting>#define GNUTLS_E_ERROR_IN_FINISHED_PACKET -18
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-E-UNEXPECTED-HANDSHAKE-PACKET--CAPS" role="macro">
<title>GNUTLS_E_UNEXPECTED_HANDSHAKE_PACKET</title>
<indexterm zone="GNUTLS-E-UNEXPECTED-HANDSHAKE-PACKET--CAPS"><primary sortas="GNUTLS_E_UNEXPECTED_HANDSHAKE_PACKET">GNUTLS_E_UNEXPECTED_HANDSHAKE_PACKET</primary></indexterm><programlisting>#define GNUTLS_E_UNEXPECTED_HANDSHAKE_PACKET -19
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-E-UNKNOWN-CIPHER-SUITE--CAPS" role="macro">
<title>GNUTLS_E_UNKNOWN_CIPHER_SUITE</title>
<indexterm zone="GNUTLS-E-UNKNOWN-CIPHER-SUITE--CAPS"><primary sortas="GNUTLS_E_UNKNOWN_CIPHER_SUITE">GNUTLS_E_UNKNOWN_CIPHER_SUITE</primary></indexterm><programlisting>#define	GNUTLS_E_UNKNOWN_CIPHER_SUITE -21	/* GNUTLS_A_HANDSHAKE_FAILURE */
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-E-UNWANTED-ALGORITHM--CAPS" role="macro">
<title>GNUTLS_E_UNWANTED_ALGORITHM</title>
<indexterm zone="GNUTLS-E-UNWANTED-ALGORITHM--CAPS"><primary sortas="GNUTLS_E_UNWANTED_ALGORITHM">GNUTLS_E_UNWANTED_ALGORITHM</primary></indexterm><programlisting>#define	GNUTLS_E_UNWANTED_ALGORITHM -22
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-E-MPI-SCAN-FAILED--CAPS" role="macro">
<title>GNUTLS_E_MPI_SCAN_FAILED</title>
<indexterm zone="GNUTLS-E-MPI-SCAN-FAILED--CAPS"><primary sortas="GNUTLS_E_MPI_SCAN_FAILED">GNUTLS_E_MPI_SCAN_FAILED</primary></indexterm><programlisting>#define	GNUTLS_E_MPI_SCAN_FAILED -23
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-E-DECRYPTION-FAILED--CAPS" role="macro">
<title>GNUTLS_E_DECRYPTION_FAILED</title>
<indexterm zone="GNUTLS-E-DECRYPTION-FAILED--CAPS"><primary sortas="GNUTLS_E_DECRYPTION_FAILED">GNUTLS_E_DECRYPTION_FAILED</primary></indexterm><programlisting>#define GNUTLS_E_DECRYPTION_FAILED -24	/* GNUTLS_A_DECRYPTION_FAILED, GNUTLS_A_BAD_RECORD_MAC */
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-E-MEMORY-ERROR--CAPS" role="macro">
<title>GNUTLS_E_MEMORY_ERROR</title>
<indexterm zone="GNUTLS-E-MEMORY-ERROR--CAPS"><primary sortas="GNUTLS_E_MEMORY_ERROR">GNUTLS_E_MEMORY_ERROR</primary></indexterm><programlisting>#define GNUTLS_E_MEMORY_ERROR -25
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-E-DECOMPRESSION-FAILED--CAPS" role="macro">
<title>GNUTLS_E_DECOMPRESSION_FAILED</title>
<indexterm zone="GNUTLS-E-DECOMPRESSION-FAILED--CAPS"><primary sortas="GNUTLS_E_DECOMPRESSION_FAILED">GNUTLS_E_DECOMPRESSION_FAILED</primary></indexterm><programlisting>#define GNUTLS_E_DECOMPRESSION_FAILED -26	/* GNUTLS_A_DECOMPRESSION_FAILURE */
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-E-COMPRESSION-FAILED--CAPS" role="macro">
<title>GNUTLS_E_COMPRESSION_FAILED</title>
<indexterm zone="GNUTLS-E-COMPRESSION-FAILED--CAPS"><primary sortas="GNUTLS_E_COMPRESSION_FAILED">GNUTLS_E_COMPRESSION_FAILED</primary></indexterm><programlisting>#define GNUTLS_E_COMPRESSION_FAILED -27
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-E-AGAIN--CAPS" role="macro">
<title>GNUTLS_E_AGAIN</title>
<indexterm zone="GNUTLS-E-AGAIN--CAPS"><primary sortas="GNUTLS_E_AGAIN">GNUTLS_E_AGAIN</primary></indexterm><programlisting>#define GNUTLS_E_AGAIN -28
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-E-EXPIRED--CAPS" role="macro">
<title>GNUTLS_E_EXPIRED</title>
<indexterm zone="GNUTLS-E-EXPIRED--CAPS"><primary sortas="GNUTLS_E_EXPIRED">GNUTLS_E_EXPIRED</primary></indexterm><programlisting>#define GNUTLS_E_EXPIRED -29
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-E-DB-ERROR--CAPS" role="macro">
<title>GNUTLS_E_DB_ERROR</title>
<indexterm zone="GNUTLS-E-DB-ERROR--CAPS"><primary sortas="GNUTLS_E_DB_ERROR">GNUTLS_E_DB_ERROR</primary></indexterm><programlisting>#define GNUTLS_E_DB_ERROR -30
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-E-SRP-PWD-ERROR--CAPS" role="macro">
<title>GNUTLS_E_SRP_PWD_ERROR</title>
<indexterm zone="GNUTLS-E-SRP-PWD-ERROR--CAPS"><primary sortas="GNUTLS_E_SRP_PWD_ERROR">GNUTLS_E_SRP_PWD_ERROR</primary></indexterm><programlisting>#define GNUTLS_E_SRP_PWD_ERROR -31
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-E-INSUFFICIENT-CREDENTIALS--CAPS" role="macro">
<title>GNUTLS_E_INSUFFICIENT_CREDENTIALS</title>
<indexterm zone="GNUTLS-E-INSUFFICIENT-CREDENTIALS--CAPS"><primary sortas="GNUTLS_E_INSUFFICIENT_CREDENTIALS">GNUTLS_E_INSUFFICIENT_CREDENTIALS</primary></indexterm><programlisting>#define GNUTLS_E_INSUFFICIENT_CREDENTIALS -32
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-E-INSUFICIENT-CREDENTIALS--CAPS" role="macro">
<title>GNUTLS_E_INSUFICIENT_CREDENTIALS</title>
<indexterm zone="GNUTLS-E-INSUFICIENT-CREDENTIALS--CAPS"><primary sortas="GNUTLS_E_INSUFICIENT_CREDENTIALS">GNUTLS_E_INSUFICIENT_CREDENTIALS</primary></indexterm><programlisting>#define GNUTLS_E_INSUFICIENT_CREDENTIALS GNUTLS_E_INSUFFICIENT_CREDENTIALS	/* for backwards compatibility only */
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-E-INSUFFICIENT-CRED--CAPS" role="macro">
<title>GNUTLS_E_INSUFFICIENT_CRED</title>
<indexterm zone="GNUTLS-E-INSUFFICIENT-CRED--CAPS"><primary sortas="GNUTLS_E_INSUFFICIENT_CRED">GNUTLS_E_INSUFFICIENT_CRED</primary></indexterm><programlisting>#define GNUTLS_E_INSUFFICIENT_CRED GNUTLS_E_INSUFFICIENT_CREDENTIALS
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-E-INSUFICIENT-CRED--CAPS" role="macro">
<title>GNUTLS_E_INSUFICIENT_CRED</title>
<indexterm zone="GNUTLS-E-INSUFICIENT-CRED--CAPS"><primary sortas="GNUTLS_E_INSUFICIENT_CRED">GNUTLS_E_INSUFICIENT_CRED</primary></indexterm><programlisting>#define GNUTLS_E_INSUFICIENT_CRED GNUTLS_E_INSUFFICIENT_CREDENTIALS	/* for backwards compatibility only */
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-E-HASH-FAILED--CAPS" role="macro">
<title>GNUTLS_E_HASH_FAILED</title>
<indexterm zone="GNUTLS-E-HASH-FAILED--CAPS"><primary sortas="GNUTLS_E_HASH_FAILED">GNUTLS_E_HASH_FAILED</primary></indexterm><programlisting>#define GNUTLS_E_HASH_FAILED -33
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-E-BASE64-DECODING-ERROR--CAPS" role="macro">
<title>GNUTLS_E_BASE64_DECODING_ERROR</title>
<indexterm zone="GNUTLS-E-BASE64-DECODING-ERROR--CAPS"><primary sortas="GNUTLS_E_BASE64_DECODING_ERROR">GNUTLS_E_BASE64_DECODING_ERROR</primary></indexterm><programlisting>#define GNUTLS_E_BASE64_DECODING_ERROR -34
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-E-MPI-PRINT-FAILED--CAPS" role="macro">
<title>GNUTLS_E_MPI_PRINT_FAILED</title>
<indexterm zone="GNUTLS-E-MPI-PRINT-FAILED--CAPS"><primary sortas="GNUTLS_E_MPI_PRINT_FAILED">GNUTLS_E_MPI_PRINT_FAILED</primary></indexterm><programlisting>#define	GNUTLS_E_MPI_PRINT_FAILED -35
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-E-REHANDSHAKE--CAPS" role="macro">
<title>GNUTLS_E_REHANDSHAKE</title>
<indexterm zone="GNUTLS-E-REHANDSHAKE--CAPS"><primary sortas="GNUTLS_E_REHANDSHAKE">GNUTLS_E_REHANDSHAKE</primary></indexterm><programlisting>#define GNUTLS_E_REHANDSHAKE -37	/* GNUTLS_A_NO_RENEGOTIATION */
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-E-GOT-APPLICATION-DATA--CAPS" role="macro">
<title>GNUTLS_E_GOT_APPLICATION_DATA</title>
<indexterm zone="GNUTLS-E-GOT-APPLICATION-DATA--CAPS"><primary sortas="GNUTLS_E_GOT_APPLICATION_DATA">GNUTLS_E_GOT_APPLICATION_DATA</primary></indexterm><programlisting>#define GNUTLS_E_GOT_APPLICATION_DATA -38
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-E-RECORD-LIMIT-REACHED--CAPS" role="macro">
<title>GNUTLS_E_RECORD_LIMIT_REACHED</title>
<indexterm zone="GNUTLS-E-RECORD-LIMIT-REACHED--CAPS"><primary sortas="GNUTLS_E_RECORD_LIMIT_REACHED">GNUTLS_E_RECORD_LIMIT_REACHED</primary></indexterm><programlisting>#define GNUTLS_E_RECORD_LIMIT_REACHED -39
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-E-ENCRYPTION-FAILED--CAPS" role="macro">
<title>GNUTLS_E_ENCRYPTION_FAILED</title>
<indexterm zone="GNUTLS-E-ENCRYPTION-FAILED--CAPS"><primary sortas="GNUTLS_E_ENCRYPTION_FAILED">GNUTLS_E_ENCRYPTION_FAILED</primary></indexterm><programlisting>#define GNUTLS_E_ENCRYPTION_FAILED -40
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-E-PK-ENCRYPTION-FAILED--CAPS" role="macro">
<title>GNUTLS_E_PK_ENCRYPTION_FAILED</title>
<indexterm zone="GNUTLS-E-PK-ENCRYPTION-FAILED--CAPS"><primary sortas="GNUTLS_E_PK_ENCRYPTION_FAILED">GNUTLS_E_PK_ENCRYPTION_FAILED</primary></indexterm><programlisting>#define GNUTLS_E_PK_ENCRYPTION_FAILED -44
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-E-PK-DECRYPTION-FAILED--CAPS" role="macro">
<title>GNUTLS_E_PK_DECRYPTION_FAILED</title>
<indexterm zone="GNUTLS-E-PK-DECRYPTION-FAILED--CAPS"><primary sortas="GNUTLS_E_PK_DECRYPTION_FAILED">GNUTLS_E_PK_DECRYPTION_FAILED</primary></indexterm><programlisting>#define GNUTLS_E_PK_DECRYPTION_FAILED -45
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-E-PK-SIGN-FAILED--CAPS" role="macro">
<title>GNUTLS_E_PK_SIGN_FAILED</title>
<indexterm zone="GNUTLS-E-PK-SIGN-FAILED--CAPS"><primary sortas="GNUTLS_E_PK_SIGN_FAILED">GNUTLS_E_PK_SIGN_FAILED</primary></indexterm><programlisting>#define GNUTLS_E_PK_SIGN_FAILED -46
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-E-X509-UNSUPPORTED-CRITICAL-EXTENSION--CAPS" role="macro">
<title>GNUTLS_E_X509_UNSUPPORTED_CRITICAL_EXTENSION</title>
<indexterm zone="GNUTLS-E-X509-UNSUPPORTED-CRITICAL-EXTENSION--CAPS"><primary sortas="GNUTLS_E_X509_UNSUPPORTED_CRITICAL_EXTENSION">GNUTLS_E_X509_UNSUPPORTED_CRITICAL_EXTENSION</primary></indexterm><programlisting>#define GNUTLS_E_X509_UNSUPPORTED_CRITICAL_EXTENSION -47
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-E-KEY-USAGE-VIOLATION--CAPS" role="macro">
<title>GNUTLS_E_KEY_USAGE_VIOLATION</title>
<indexterm zone="GNUTLS-E-KEY-USAGE-VIOLATION--CAPS"><primary sortas="GNUTLS_E_KEY_USAGE_VIOLATION">GNUTLS_E_KEY_USAGE_VIOLATION</primary></indexterm><programlisting>#define GNUTLS_E_KEY_USAGE_VIOLATION -48
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-E-NO-CERTIFICATE-FOUND--CAPS" role="macro">
<title>GNUTLS_E_NO_CERTIFICATE_FOUND</title>
<indexterm zone="GNUTLS-E-NO-CERTIFICATE-FOUND--CAPS"><primary sortas="GNUTLS_E_NO_CERTIFICATE_FOUND">GNUTLS_E_NO_CERTIFICATE_FOUND</primary></indexterm><programlisting>#define GNUTLS_E_NO_CERTIFICATE_FOUND -49	/* GNUTLS_A_BAD_CERTIFICATE */
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-E-INVALID-REQUEST--CAPS" role="macro">
<title>GNUTLS_E_INVALID_REQUEST</title>
<indexterm zone="GNUTLS-E-INVALID-REQUEST--CAPS"><primary sortas="GNUTLS_E_INVALID_REQUEST">GNUTLS_E_INVALID_REQUEST</primary></indexterm><programlisting>#define GNUTLS_E_INVALID_REQUEST -50
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-E-SHORT-MEMORY-BUFFER--CAPS" role="macro">
<title>GNUTLS_E_SHORT_MEMORY_BUFFER</title>
<indexterm zone="GNUTLS-E-SHORT-MEMORY-BUFFER--CAPS"><primary sortas="GNUTLS_E_SHORT_MEMORY_BUFFER">GNUTLS_E_SHORT_MEMORY_BUFFER</primary></indexterm><programlisting>#define GNUTLS_E_SHORT_MEMORY_BUFFER -51
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-E-INTERRUPTED--CAPS" role="macro">
<title>GNUTLS_E_INTERRUPTED</title>
<indexterm zone="GNUTLS-E-INTERRUPTED--CAPS"><primary sortas="GNUTLS_E_INTERRUPTED">GNUTLS_E_INTERRUPTED</primary></indexterm><programlisting>#define GNUTLS_E_INTERRUPTED -52
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-E-PUSH-ERROR--CAPS" role="macro">
<title>GNUTLS_E_PUSH_ERROR</title>
<indexterm zone="GNUTLS-E-PUSH-ERROR--CAPS"><primary sortas="GNUTLS_E_PUSH_ERROR">GNUTLS_E_PUSH_ERROR</primary></indexterm><programlisting>#define GNUTLS_E_PUSH_ERROR -53
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-E-PULL-ERROR--CAPS" role="macro">
<title>GNUTLS_E_PULL_ERROR</title>
<indexterm zone="GNUTLS-E-PULL-ERROR--CAPS"><primary sortas="GNUTLS_E_PULL_ERROR">GNUTLS_E_PULL_ERROR</primary></indexterm><programlisting>#define GNUTLS_E_PULL_ERROR -54
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-E-RECEIVED-ILLEGAL-PARAMETER--CAPS" role="macro">
<title>GNUTLS_E_RECEIVED_ILLEGAL_PARAMETER</title>
<indexterm zone="GNUTLS-E-RECEIVED-ILLEGAL-PARAMETER--CAPS"><primary sortas="GNUTLS_E_RECEIVED_ILLEGAL_PARAMETER">GNUTLS_E_RECEIVED_ILLEGAL_PARAMETER</primary></indexterm><programlisting>#define GNUTLS_E_RECEIVED_ILLEGAL_PARAMETER -55	/* GNUTLS_A_ILLEGAL_PARAMETER */
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-E-REQUESTED-DATA-NOT-AVAILABLE--CAPS" role="macro">
<title>GNUTLS_E_REQUESTED_DATA_NOT_AVAILABLE</title>
<indexterm zone="GNUTLS-E-REQUESTED-DATA-NOT-AVAILABLE--CAPS"><primary sortas="GNUTLS_E_REQUESTED_DATA_NOT_AVAILABLE">GNUTLS_E_REQUESTED_DATA_NOT_AVAILABLE</primary></indexterm><programlisting>#define GNUTLS_E_REQUESTED_DATA_NOT_AVAILABLE -56
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-E-PKCS1-WRONG-PAD--CAPS" role="macro">
<title>GNUTLS_E_PKCS1_WRONG_PAD</title>
<indexterm zone="GNUTLS-E-PKCS1-WRONG-PAD--CAPS"><primary sortas="GNUTLS_E_PKCS1_WRONG_PAD">GNUTLS_E_PKCS1_WRONG_PAD</primary></indexterm><programlisting>#define GNUTLS_E_PKCS1_WRONG_PAD -57
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-E-RECEIVED-ILLEGAL-EXTENSION--CAPS" role="macro">
<title>GNUTLS_E_RECEIVED_ILLEGAL_EXTENSION</title>
<indexterm zone="GNUTLS-E-RECEIVED-ILLEGAL-EXTENSION--CAPS"><primary sortas="GNUTLS_E_RECEIVED_ILLEGAL_EXTENSION">GNUTLS_E_RECEIVED_ILLEGAL_EXTENSION</primary></indexterm><programlisting>#define GNUTLS_E_RECEIVED_ILLEGAL_EXTENSION -58
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-E-INTERNAL-ERROR--CAPS" role="macro">
<title>GNUTLS_E_INTERNAL_ERROR</title>
<indexterm zone="GNUTLS-E-INTERNAL-ERROR--CAPS"><primary sortas="GNUTLS_E_INTERNAL_ERROR">GNUTLS_E_INTERNAL_ERROR</primary></indexterm><programlisting>#define GNUTLS_E_INTERNAL_ERROR -59
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-E-DH-PRIME-UNACCEPTABLE--CAPS" role="macro">
<title>GNUTLS_E_DH_PRIME_UNACCEPTABLE</title>
<indexterm zone="GNUTLS-E-DH-PRIME-UNACCEPTABLE--CAPS"><primary sortas="GNUTLS_E_DH_PRIME_UNACCEPTABLE">GNUTLS_E_DH_PRIME_UNACCEPTABLE</primary></indexterm><programlisting>#define GNUTLS_E_DH_PRIME_UNACCEPTABLE -63
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-E-FILE-ERROR--CAPS" role="macro">
<title>GNUTLS_E_FILE_ERROR</title>
<indexterm zone="GNUTLS-E-FILE-ERROR--CAPS"><primary sortas="GNUTLS_E_FILE_ERROR">GNUTLS_E_FILE_ERROR</primary></indexterm><programlisting>#define GNUTLS_E_FILE_ERROR -64
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-E-TOO-MANY-EMPTY-PACKETS--CAPS" role="macro">
<title>GNUTLS_E_TOO_MANY_EMPTY_PACKETS</title>
<indexterm zone="GNUTLS-E-TOO-MANY-EMPTY-PACKETS--CAPS"><primary sortas="GNUTLS_E_TOO_MANY_EMPTY_PACKETS">GNUTLS_E_TOO_MANY_EMPTY_PACKETS</primary></indexterm><programlisting>#define GNUTLS_E_TOO_MANY_EMPTY_PACKETS -78
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-E-UNKNOWN-PK-ALGORITHM--CAPS" role="macro">
<title>GNUTLS_E_UNKNOWN_PK_ALGORITHM</title>
<indexterm zone="GNUTLS-E-UNKNOWN-PK-ALGORITHM--CAPS"><primary sortas="GNUTLS_E_UNKNOWN_PK_ALGORITHM">GNUTLS_E_UNKNOWN_PK_ALGORITHM</primary></indexterm><programlisting>#define GNUTLS_E_UNKNOWN_PK_ALGORITHM -80
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-E-INIT-LIBEXTRA--CAPS" role="macro">
<title>GNUTLS_E_INIT_LIBEXTRA</title>
<indexterm zone="GNUTLS-E-INIT-LIBEXTRA--CAPS"><primary sortas="GNUTLS_E_INIT_LIBEXTRA">GNUTLS_E_INIT_LIBEXTRA</primary></indexterm><programlisting>#define GNUTLS_E_INIT_LIBEXTRA -82
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-E-LIBRARY-VERSION-MISMATCH--CAPS" role="macro">
<title>GNUTLS_E_LIBRARY_VERSION_MISMATCH</title>
<indexterm zone="GNUTLS-E-LIBRARY-VERSION-MISMATCH--CAPS"><primary sortas="GNUTLS_E_LIBRARY_VERSION_MISMATCH">GNUTLS_E_LIBRARY_VERSION_MISMATCH</primary></indexterm><programlisting>#define GNUTLS_E_LIBRARY_VERSION_MISMATCH -83
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-E-NO-TEMPORARY-RSA-PARAMS--CAPS" role="macro">
<title>GNUTLS_E_NO_TEMPORARY_RSA_PARAMS</title>
<indexterm zone="GNUTLS-E-NO-TEMPORARY-RSA-PARAMS--CAPS"><primary sortas="GNUTLS_E_NO_TEMPORARY_RSA_PARAMS">GNUTLS_E_NO_TEMPORARY_RSA_PARAMS</primary></indexterm><programlisting>#define GNUTLS_E_NO_TEMPORARY_RSA_PARAMS -84
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-E-LZO-INIT-FAILED--CAPS" role="macro">
<title>GNUTLS_E_LZO_INIT_FAILED</title>
<indexterm zone="GNUTLS-E-LZO-INIT-FAILED--CAPS"><primary sortas="GNUTLS_E_LZO_INIT_FAILED">GNUTLS_E_LZO_INIT_FAILED</primary></indexterm><programlisting>#define GNUTLS_E_LZO_INIT_FAILED -85
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-E-NO-COMPRESSION-ALGORITHMS--CAPS" role="macro">
<title>GNUTLS_E_NO_COMPRESSION_ALGORITHMS</title>
<indexterm zone="GNUTLS-E-NO-COMPRESSION-ALGORITHMS--CAPS"><primary sortas="GNUTLS_E_NO_COMPRESSION_ALGORITHMS">GNUTLS_E_NO_COMPRESSION_ALGORITHMS</primary></indexterm><programlisting>#define GNUTLS_E_NO_COMPRESSION_ALGORITHMS -86
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-E-NO-CIPHER-SUITES--CAPS" role="macro">
<title>GNUTLS_E_NO_CIPHER_SUITES</title>
<indexterm zone="GNUTLS-E-NO-CIPHER-SUITES--CAPS"><primary sortas="GNUTLS_E_NO_CIPHER_SUITES">GNUTLS_E_NO_CIPHER_SUITES</primary></indexterm><programlisting>#define GNUTLS_E_NO_CIPHER_SUITES -87
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-E-OPENPGP-GETKEY-FAILED--CAPS" role="macro">
<title>GNUTLS_E_OPENPGP_GETKEY_FAILED</title>
<indexterm zone="GNUTLS-E-OPENPGP-GETKEY-FAILED--CAPS"><primary sortas="GNUTLS_E_OPENPGP_GETKEY_FAILED">GNUTLS_E_OPENPGP_GETKEY_FAILED</primary></indexterm><programlisting>#define GNUTLS_E_OPENPGP_GETKEY_FAILED -88
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-E-PK-SIG-VERIFY-FAILED--CAPS" role="macro">
<title>GNUTLS_E_PK_SIG_VERIFY_FAILED</title>
<indexterm zone="GNUTLS-E-PK-SIG-VERIFY-FAILED--CAPS"><primary sortas="GNUTLS_E_PK_SIG_VERIFY_FAILED">GNUTLS_E_PK_SIG_VERIFY_FAILED</primary></indexterm><programlisting>#define GNUTLS_E_PK_SIG_VERIFY_FAILED -89
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-E-ILLEGAL-SRP-USERNAME--CAPS" role="macro">
<title>GNUTLS_E_ILLEGAL_SRP_USERNAME</title>
<indexterm zone="GNUTLS-E-ILLEGAL-SRP-USERNAME--CAPS"><primary sortas="GNUTLS_E_ILLEGAL_SRP_USERNAME">GNUTLS_E_ILLEGAL_SRP_USERNAME</primary></indexterm><programlisting>#define GNUTLS_E_ILLEGAL_SRP_USERNAME -90
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-E-SRP-PWD-PARSING-ERROR--CAPS" role="macro">
<title>GNUTLS_E_SRP_PWD_PARSING_ERROR</title>
<indexterm zone="GNUTLS-E-SRP-PWD-PARSING-ERROR--CAPS"><primary sortas="GNUTLS_E_SRP_PWD_PARSING_ERROR">GNUTLS_E_SRP_PWD_PARSING_ERROR</primary></indexterm><programlisting>#define GNUTLS_E_SRP_PWD_PARSING_ERROR -91
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-E-NO-TEMPORARY-DH-PARAMS--CAPS" role="macro">
<title>GNUTLS_E_NO_TEMPORARY_DH_PARAMS</title>
<indexterm zone="GNUTLS-E-NO-TEMPORARY-DH-PARAMS--CAPS"><primary sortas="GNUTLS_E_NO_TEMPORARY_DH_PARAMS">GNUTLS_E_NO_TEMPORARY_DH_PARAMS</primary></indexterm><programlisting>#define GNUTLS_E_NO_TEMPORARY_DH_PARAMS -93
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-E-ASN1-ELEMENT-NOT-FOUND--CAPS" role="macro">
<title>GNUTLS_E_ASN1_ELEMENT_NOT_FOUND</title>
<indexterm zone="GNUTLS-E-ASN1-ELEMENT-NOT-FOUND--CAPS"><primary sortas="GNUTLS_E_ASN1_ELEMENT_NOT_FOUND">GNUTLS_E_ASN1_ELEMENT_NOT_FOUND</primary></indexterm><programlisting>#define GNUTLS_E_ASN1_ELEMENT_NOT_FOUND -67
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-E-ASN1-IDENTIFIER-NOT-FOUND--CAPS" role="macro">
<title>GNUTLS_E_ASN1_IDENTIFIER_NOT_FOUND</title>
<indexterm zone="GNUTLS-E-ASN1-IDENTIFIER-NOT-FOUND--CAPS"><primary sortas="GNUTLS_E_ASN1_IDENTIFIER_NOT_FOUND">GNUTLS_E_ASN1_IDENTIFIER_NOT_FOUND</primary></indexterm><programlisting>#define GNUTLS_E_ASN1_IDENTIFIER_NOT_FOUND -68
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-E-ASN1-DER-ERROR--CAPS" role="macro">
<title>GNUTLS_E_ASN1_DER_ERROR</title>
<indexterm zone="GNUTLS-E-ASN1-DER-ERROR--CAPS"><primary sortas="GNUTLS_E_ASN1_DER_ERROR">GNUTLS_E_ASN1_DER_ERROR</primary></indexterm><programlisting>#define GNUTLS_E_ASN1_DER_ERROR -69
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-E-ASN1-VALUE-NOT-FOUND--CAPS" role="macro">
<title>GNUTLS_E_ASN1_VALUE_NOT_FOUND</title>
<indexterm zone="GNUTLS-E-ASN1-VALUE-NOT-FOUND--CAPS"><primary sortas="GNUTLS_E_ASN1_VALUE_NOT_FOUND">GNUTLS_E_ASN1_VALUE_NOT_FOUND</primary></indexterm><programlisting>#define GNUTLS_E_ASN1_VALUE_NOT_FOUND -70
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-E-ASN1-GENERIC-ERROR--CAPS" role="macro">
<title>GNUTLS_E_ASN1_GENERIC_ERROR</title>
<indexterm zone="GNUTLS-E-ASN1-GENERIC-ERROR--CAPS"><primary sortas="GNUTLS_E_ASN1_GENERIC_ERROR">GNUTLS_E_ASN1_GENERIC_ERROR</primary></indexterm><programlisting>#define GNUTLS_E_ASN1_GENERIC_ERROR -71
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-E-ASN1-VALUE-NOT-VALID--CAPS" role="macro">
<title>GNUTLS_E_ASN1_VALUE_NOT_VALID</title>
<indexterm zone="GNUTLS-E-ASN1-VALUE-NOT-VALID--CAPS"><primary sortas="GNUTLS_E_ASN1_VALUE_NOT_VALID">GNUTLS_E_ASN1_VALUE_NOT_VALID</primary></indexterm><programlisting>#define GNUTLS_E_ASN1_VALUE_NOT_VALID -72
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-E-ASN1-TAG-ERROR--CAPS" role="macro">
<title>GNUTLS_E_ASN1_TAG_ERROR</title>
<indexterm zone="GNUTLS-E-ASN1-TAG-ERROR--CAPS"><primary sortas="GNUTLS_E_ASN1_TAG_ERROR">GNUTLS_E_ASN1_TAG_ERROR</primary></indexterm><programlisting>#define GNUTLS_E_ASN1_TAG_ERROR -73
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-E-ASN1-TAG-IMPLICIT--CAPS" role="macro">
<title>GNUTLS_E_ASN1_TAG_IMPLICIT</title>
<indexterm zone="GNUTLS-E-ASN1-TAG-IMPLICIT--CAPS"><primary sortas="GNUTLS_E_ASN1_TAG_IMPLICIT">GNUTLS_E_ASN1_TAG_IMPLICIT</primary></indexterm><programlisting>#define GNUTLS_E_ASN1_TAG_IMPLICIT -74
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-E-ASN1-TYPE-ANY-ERROR--CAPS" role="macro">
<title>GNUTLS_E_ASN1_TYPE_ANY_ERROR</title>
<indexterm zone="GNUTLS-E-ASN1-TYPE-ANY-ERROR--CAPS"><primary sortas="GNUTLS_E_ASN1_TYPE_ANY_ERROR">GNUTLS_E_ASN1_TYPE_ANY_ERROR</primary></indexterm><programlisting>#define GNUTLS_E_ASN1_TYPE_ANY_ERROR -75
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-E-ASN1-SYNTAX-ERROR--CAPS" role="macro">
<title>GNUTLS_E_ASN1_SYNTAX_ERROR</title>
<indexterm zone="GNUTLS-E-ASN1-SYNTAX-ERROR--CAPS"><primary sortas="GNUTLS_E_ASN1_SYNTAX_ERROR">GNUTLS_E_ASN1_SYNTAX_ERROR</primary></indexterm><programlisting>#define GNUTLS_E_ASN1_SYNTAX_ERROR -76
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-E-ASN1-DER-OVERFLOW--CAPS" role="macro">
<title>GNUTLS_E_ASN1_DER_OVERFLOW</title>
<indexterm zone="GNUTLS-E-ASN1-DER-OVERFLOW--CAPS"><primary sortas="GNUTLS_E_ASN1_DER_OVERFLOW">GNUTLS_E_ASN1_DER_OVERFLOW</primary></indexterm><programlisting>#define GNUTLS_E_ASN1_DER_OVERFLOW -77
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-E-OPENPGP-UID-REVOKED--CAPS" role="macro">
<title>GNUTLS_E_OPENPGP_UID_REVOKED</title>
<indexterm zone="GNUTLS-E-OPENPGP-UID-REVOKED--CAPS"><primary sortas="GNUTLS_E_OPENPGP_UID_REVOKED">GNUTLS_E_OPENPGP_UID_REVOKED</primary></indexterm><programlisting>#define GNUTLS_E_OPENPGP_UID_REVOKED -79
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-E-CERTIFICATE-ERROR--CAPS" role="macro">
<title>GNUTLS_E_CERTIFICATE_ERROR</title>
<indexterm zone="GNUTLS-E-CERTIFICATE-ERROR--CAPS"><primary sortas="GNUTLS_E_CERTIFICATE_ERROR">GNUTLS_E_CERTIFICATE_ERROR</primary></indexterm><programlisting>#define GNUTLS_E_CERTIFICATE_ERROR -43
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-E-X509-CERTIFICATE-ERROR--CAPS" role="macro">
<title>GNUTLS_E_X509_CERTIFICATE_ERROR</title>
<indexterm zone="GNUTLS-E-X509-CERTIFICATE-ERROR--CAPS"><primary sortas="GNUTLS_E_X509_CERTIFICATE_ERROR">GNUTLS_E_X509_CERTIFICATE_ERROR</primary></indexterm><programlisting>#define GNUTLS_E_X509_CERTIFICATE_ERROR GNUTLS_E_CERTIFICATE_ERROR
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-E-CERTIFICATE-KEY-MISMATCH--CAPS" role="macro">
<title>GNUTLS_E_CERTIFICATE_KEY_MISMATCH</title>
<indexterm zone="GNUTLS-E-CERTIFICATE-KEY-MISMATCH--CAPS"><primary sortas="GNUTLS_E_CERTIFICATE_KEY_MISMATCH">GNUTLS_E_CERTIFICATE_KEY_MISMATCH</primary></indexterm><programlisting>#define GNUTLS_E_CERTIFICATE_KEY_MISMATCH -60
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-E-UNSUPPORTED-CERTIFICATE-TYPE--CAPS" role="macro">
<title>GNUTLS_E_UNSUPPORTED_CERTIFICATE_TYPE</title>
<indexterm zone="GNUTLS-E-UNSUPPORTED-CERTIFICATE-TYPE--CAPS"><primary sortas="GNUTLS_E_UNSUPPORTED_CERTIFICATE_TYPE">GNUTLS_E_UNSUPPORTED_CERTIFICATE_TYPE</primary></indexterm><programlisting>#define GNUTLS_E_UNSUPPORTED_CERTIFICATE_TYPE -61	/* GNUTLS_A_UNSUPPORTED_CERTIFICATE */
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-E-X509-UNKNOWN-SAN--CAPS" role="macro">
<title>GNUTLS_E_X509_UNKNOWN_SAN</title>
<indexterm zone="GNUTLS-E-X509-UNKNOWN-SAN--CAPS"><primary sortas="GNUTLS_E_X509_UNKNOWN_SAN">GNUTLS_E_X509_UNKNOWN_SAN</primary></indexterm><programlisting>#define GNUTLS_E_X509_UNKNOWN_SAN -62
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-E-OPENPGP-FINGERPRINT-UNSUPPORTED--CAPS" role="macro">
<title>GNUTLS_E_OPENPGP_FINGERPRINT_UNSUPPORTED</title>
<indexterm zone="GNUTLS-E-OPENPGP-FINGERPRINT-UNSUPPORTED--CAPS"><primary sortas="GNUTLS_E_OPENPGP_FINGERPRINT_UNSUPPORTED">GNUTLS_E_OPENPGP_FINGERPRINT_UNSUPPORTED</primary></indexterm><programlisting>#define GNUTLS_E_OPENPGP_FINGERPRINT_UNSUPPORTED -94
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-E-X509-UNSUPPORTED-ATTRIBUTE--CAPS" role="macro">
<title>GNUTLS_E_X509_UNSUPPORTED_ATTRIBUTE</title>
<indexterm zone="GNUTLS-E-X509-UNSUPPORTED-ATTRIBUTE--CAPS"><primary sortas="GNUTLS_E_X509_UNSUPPORTED_ATTRIBUTE">GNUTLS_E_X509_UNSUPPORTED_ATTRIBUTE</primary></indexterm><programlisting>#define GNUTLS_E_X509_UNSUPPORTED_ATTRIBUTE -95
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-E-UNKNOWN-HASH-ALGORITHM--CAPS" role="macro">
<title>GNUTLS_E_UNKNOWN_HASH_ALGORITHM</title>
<indexterm zone="GNUTLS-E-UNKNOWN-HASH-ALGORITHM--CAPS"><primary sortas="GNUTLS_E_UNKNOWN_HASH_ALGORITHM">GNUTLS_E_UNKNOWN_HASH_ALGORITHM</primary></indexterm><programlisting>#define GNUTLS_E_UNKNOWN_HASH_ALGORITHM -96
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-E-UNKNOWN-PKCS-CONTENT-TYPE--CAPS" role="macro">
<title>GNUTLS_E_UNKNOWN_PKCS_CONTENT_TYPE</title>
<indexterm zone="GNUTLS-E-UNKNOWN-PKCS-CONTENT-TYPE--CAPS"><primary sortas="GNUTLS_E_UNKNOWN_PKCS_CONTENT_TYPE">GNUTLS_E_UNKNOWN_PKCS_CONTENT_TYPE</primary></indexterm><programlisting>#define GNUTLS_E_UNKNOWN_PKCS_CONTENT_TYPE -97
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-E-UNKNOWN-PKCS-BAG-TYPE--CAPS" role="macro">
<title>GNUTLS_E_UNKNOWN_PKCS_BAG_TYPE</title>
<indexterm zone="GNUTLS-E-UNKNOWN-PKCS-BAG-TYPE--CAPS"><primary sortas="GNUTLS_E_UNKNOWN_PKCS_BAG_TYPE">GNUTLS_E_UNKNOWN_PKCS_BAG_TYPE</primary></indexterm><programlisting>#define GNUTLS_E_UNKNOWN_PKCS_BAG_TYPE -98
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-E-INVALID-PASSWORD--CAPS" role="macro">
<title>GNUTLS_E_INVALID_PASSWORD</title>
<indexterm zone="GNUTLS-E-INVALID-PASSWORD--CAPS"><primary sortas="GNUTLS_E_INVALID_PASSWORD">GNUTLS_E_INVALID_PASSWORD</primary></indexterm><programlisting>#define GNUTLS_E_INVALID_PASSWORD -99
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-E-MAC-VERIFY-FAILED--CAPS" role="macro">
<title>GNUTLS_E_MAC_VERIFY_FAILED</title>
<indexterm zone="GNUTLS-E-MAC-VERIFY-FAILED--CAPS"><primary sortas="GNUTLS_E_MAC_VERIFY_FAILED">GNUTLS_E_MAC_VERIFY_FAILED</primary></indexterm><programlisting>#define GNUTLS_E_MAC_VERIFY_FAILED -100	/* for PKCS #12 MAC */
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-E-CONSTRAINT-ERROR--CAPS" role="macro">
<title>GNUTLS_E_CONSTRAINT_ERROR</title>
<indexterm zone="GNUTLS-E-CONSTRAINT-ERROR--CAPS"><primary sortas="GNUTLS_E_CONSTRAINT_ERROR">GNUTLS_E_CONSTRAINT_ERROR</primary></indexterm><programlisting>#define GNUTLS_E_CONSTRAINT_ERROR -101
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-E-WARNING-IA-IPHF-RECEIVED--CAPS" role="macro">
<title>GNUTLS_E_WARNING_IA_IPHF_RECEIVED</title>
<indexterm zone="GNUTLS-E-WARNING-IA-IPHF-RECEIVED--CAPS"><primary sortas="GNUTLS_E_WARNING_IA_IPHF_RECEIVED">GNUTLS_E_WARNING_IA_IPHF_RECEIVED</primary></indexterm><programlisting>#define GNUTLS_E_WARNING_IA_IPHF_RECEIVED -102
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-E-WARNING-IA-FPHF-RECEIVED--CAPS" role="macro">
<title>GNUTLS_E_WARNING_IA_FPHF_RECEIVED</title>
<indexterm zone="GNUTLS-E-WARNING-IA-FPHF-RECEIVED--CAPS"><primary sortas="GNUTLS_E_WARNING_IA_FPHF_RECEIVED">GNUTLS_E_WARNING_IA_FPHF_RECEIVED</primary></indexterm><programlisting>#define GNUTLS_E_WARNING_IA_FPHF_RECEIVED -103
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-E-IA-VERIFY-FAILED--CAPS" role="macro">
<title>GNUTLS_E_IA_VERIFY_FAILED</title>
<indexterm zone="GNUTLS-E-IA-VERIFY-FAILED--CAPS"><primary sortas="GNUTLS_E_IA_VERIFY_FAILED">GNUTLS_E_IA_VERIFY_FAILED</primary></indexterm><programlisting>#define GNUTLS_E_IA_VERIFY_FAILED -104
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-E-UNKNOWN-ALGORITHM--CAPS" role="macro">
<title>GNUTLS_E_UNKNOWN_ALGORITHM</title>
<indexterm zone="GNUTLS-E-UNKNOWN-ALGORITHM--CAPS"><primary sortas="GNUTLS_E_UNKNOWN_ALGORITHM">GNUTLS_E_UNKNOWN_ALGORITHM</primary></indexterm><programlisting>#define GNUTLS_E_UNKNOWN_ALGORITHM -105
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-E-BASE64-ENCODING-ERROR--CAPS" role="macro">
<title>GNUTLS_E_BASE64_ENCODING_ERROR</title>
<indexterm zone="GNUTLS-E-BASE64-ENCODING-ERROR--CAPS"><primary sortas="GNUTLS_E_BASE64_ENCODING_ERROR">GNUTLS_E_BASE64_ENCODING_ERROR</primary></indexterm><programlisting>#define GNUTLS_E_BASE64_ENCODING_ERROR -201
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-E-INCOMPATIBLE-GCRYPT-LIBRARY--CAPS" role="macro">
<title>GNUTLS_E_INCOMPATIBLE_GCRYPT_LIBRARY</title>
<indexterm zone="GNUTLS-E-INCOMPATIBLE-GCRYPT-LIBRARY--CAPS"><primary sortas="GNUTLS_E_INCOMPATIBLE_GCRYPT_LIBRARY">GNUTLS_E_INCOMPATIBLE_GCRYPT_LIBRARY</primary></indexterm><programlisting>#define GNUTLS_E_INCOMPATIBLE_GCRYPT_LIBRARY -202	/* obsolete */
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-E-INCOMPATIBLE-CRYPTO-LIBRARY--CAPS" role="macro">
<title>GNUTLS_E_INCOMPATIBLE_CRYPTO_LIBRARY</title>
<indexterm zone="GNUTLS-E-INCOMPATIBLE-CRYPTO-LIBRARY--CAPS"><primary sortas="GNUTLS_E_INCOMPATIBLE_CRYPTO_LIBRARY">GNUTLS_E_INCOMPATIBLE_CRYPTO_LIBRARY</primary></indexterm><programlisting>#define GNUTLS_E_INCOMPATIBLE_CRYPTO_LIBRARY -202
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-E-INCOMPATIBLE-LIBTASN1-LIBRARY--CAPS" role="macro">
<title>GNUTLS_E_INCOMPATIBLE_LIBTASN1_LIBRARY</title>
<indexterm zone="GNUTLS-E-INCOMPATIBLE-LIBTASN1-LIBRARY--CAPS"><primary sortas="GNUTLS_E_INCOMPATIBLE_LIBTASN1_LIBRARY">GNUTLS_E_INCOMPATIBLE_LIBTASN1_LIBRARY</primary></indexterm><programlisting>#define GNUTLS_E_INCOMPATIBLE_LIBTASN1_LIBRARY -203
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-E-OPENPGP-KEYRING-ERROR--CAPS" role="macro">
<title>GNUTLS_E_OPENPGP_KEYRING_ERROR</title>
<indexterm zone="GNUTLS-E-OPENPGP-KEYRING-ERROR--CAPS"><primary sortas="GNUTLS_E_OPENPGP_KEYRING_ERROR">GNUTLS_E_OPENPGP_KEYRING_ERROR</primary></indexterm><programlisting>#define GNUTLS_E_OPENPGP_KEYRING_ERROR -204
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-E-X509-UNSUPPORTED-OID--CAPS" role="macro">
<title>GNUTLS_E_X509_UNSUPPORTED_OID</title>
<indexterm zone="GNUTLS-E-X509-UNSUPPORTED-OID--CAPS"><primary sortas="GNUTLS_E_X509_UNSUPPORTED_OID">GNUTLS_E_X509_UNSUPPORTED_OID</primary></indexterm><programlisting>#define GNUTLS_E_X509_UNSUPPORTED_OID -205
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-E-RANDOM-FAILED--CAPS" role="macro">
<title>GNUTLS_E_RANDOM_FAILED</title>
<indexterm zone="GNUTLS-E-RANDOM-FAILED--CAPS"><primary sortas="GNUTLS_E_RANDOM_FAILED">GNUTLS_E_RANDOM_FAILED</primary></indexterm><programlisting>#define GNUTLS_E_RANDOM_FAILED -206
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-E-BASE64-UNEXPECTED-HEADER-ERROR--CAPS" role="macro">
<title>GNUTLS_E_BASE64_UNEXPECTED_HEADER_ERROR</title>
<indexterm zone="GNUTLS-E-BASE64-UNEXPECTED-HEADER-ERROR--CAPS"><primary sortas="GNUTLS_E_BASE64_UNEXPECTED_HEADER_ERROR">GNUTLS_E_BASE64_UNEXPECTED_HEADER_ERROR</primary></indexterm><programlisting>#define GNUTLS_E_BASE64_UNEXPECTED_HEADER_ERROR -207
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-E-OPENPGP-SUBKEY-ERROR--CAPS" role="macro">
<title>GNUTLS_E_OPENPGP_SUBKEY_ERROR</title>
<indexterm zone="GNUTLS-E-OPENPGP-SUBKEY-ERROR--CAPS"><primary sortas="GNUTLS_E_OPENPGP_SUBKEY_ERROR">GNUTLS_E_OPENPGP_SUBKEY_ERROR</primary></indexterm><programlisting>#define GNUTLS_E_OPENPGP_SUBKEY_ERROR -208
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-E-CRYPTO-ALREADY-REGISTERED--CAPS" role="macro">
<title>GNUTLS_E_CRYPTO_ALREADY_REGISTERED</title>
<indexterm zone="GNUTLS-E-CRYPTO-ALREADY-REGISTERED--CAPS"><primary sortas="GNUTLS_E_CRYPTO_ALREADY_REGISTERED">GNUTLS_E_CRYPTO_ALREADY_REGISTERED</primary></indexterm><programlisting>#define GNUTLS_E_CRYPTO_ALREADY_REGISTERED -209
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-E-HANDSHAKE-TOO-LARGE--CAPS" role="macro">
<title>GNUTLS_E_HANDSHAKE_TOO_LARGE</title>
<indexterm zone="GNUTLS-E-HANDSHAKE-TOO-LARGE--CAPS"><primary sortas="GNUTLS_E_HANDSHAKE_TOO_LARGE">GNUTLS_E_HANDSHAKE_TOO_LARGE</primary></indexterm><programlisting>#define GNUTLS_E_HANDSHAKE_TOO_LARGE -210
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-E-UNIMPLEMENTED-FEATURE--CAPS" role="macro">
<title>GNUTLS_E_UNIMPLEMENTED_FEATURE</title>
<indexterm zone="GNUTLS-E-UNIMPLEMENTED-FEATURE--CAPS"><primary sortas="GNUTLS_E_UNIMPLEMENTED_FEATURE">GNUTLS_E_UNIMPLEMENTED_FEATURE</primary></indexterm><programlisting>#define GNUTLS_E_UNIMPLEMENTED_FEATURE -1250
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-E-APPLICATION-ERROR-MAX--CAPS" role="macro">
<title>GNUTLS_E_APPLICATION_ERROR_MAX</title>
<indexterm zone="GNUTLS-E-APPLICATION-ERROR-MAX--CAPS"><primary sortas="GNUTLS_E_APPLICATION_ERROR_MAX">GNUTLS_E_APPLICATION_ERROR_MAX</primary></indexterm><programlisting>#define GNUTLS_E_APPLICATION_ERROR_MAX -65000
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-E-APPLICATION-ERROR-MIN--CAPS" role="macro">
<title>GNUTLS_E_APPLICATION_ERROR_MIN</title>
<indexterm zone="GNUTLS-E-APPLICATION-ERROR-MIN--CAPS"><primary sortas="GNUTLS_E_APPLICATION_ERROR_MIN">GNUTLS_E_APPLICATION_ERROR_MIN</primary></indexterm><programlisting>#define GNUTLS_E_APPLICATION_ERROR_MIN -65500
</programlisting>
<para>
</para></refsect2>

</refsect1>




</refentry>
