<?xml version="1.0"?>
<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN" 
               "http://www.oasis-open.org/docbook/xml/4.1.2/docbookx.dtd">
<refentry id="gnutls-pkcs12">
<refmeta>
<refentrytitle role="top_of_page" id="gnutls-pkcs12.top_of_page">pkcs12</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>GNUTLS Library</refmiscinfo>
</refmeta>

<refnamediv>
<refname>pkcs12</refname>
<refpurpose></refpurpose>
</refnamediv>

<refsynopsisdiv id="gnutls-pkcs12.synopsis" role="synopsis">
<title role="synopsis.title">Synopsis</title>

<synopsis>
struct              <link linkend="gnutls-pkcs12-int">gnutls_pkcs12_int</link>;
typedef             <link linkend="gnutls-pkcs12-t">gnutls_pkcs12_t</link>;
struct              <link linkend="gnutls-pkcs12-bag-int">gnutls_pkcs12_bag_int</link>;
typedef             <link linkend="gnutls-pkcs12-bag-t">gnutls_pkcs12_bag_t</link>;
<link linkend="int">int</link>                 <link linkend="gnutls-pkcs12-init">gnutls_pkcs12_init</link>                  (<link linkend="gnutls-pkcs12-t">gnutls_pkcs12_t</link> *pkcs12);
<link linkend="void">void</link>                <link linkend="gnutls-pkcs12-deinit">gnutls_pkcs12_deinit</link>                (<link linkend="gnutls-pkcs12-t">gnutls_pkcs12_t</link> pkcs12);
<link linkend="int">int</link>                 <link linkend="gnutls-pkcs12-import">gnutls_pkcs12_import</link>                (<link linkend="gnutls-pkcs12-t">gnutls_pkcs12_t</link> pkcs12,
                                                         const <link linkend="gnutls-datum-t">gnutls_datum_t</link> *data,
                                                         <link linkend="gnutls-x509-crt-fmt-t">gnutls_x509_crt_fmt_t</link> format,
                                                         unsigned <link linkend="int">int</link> flags);
<link linkend="int">int</link>                 <link linkend="gnutls-pkcs12-export">gnutls_pkcs12_export</link>                (<link linkend="gnutls-pkcs12-t">gnutls_pkcs12_t</link> pkcs12,
                                                         <link linkend="gnutls-x509-crt-fmt-t">gnutls_x509_crt_fmt_t</link> format,
                                                         <link linkend="void">void</link> *output_data,
                                                         <link linkend="size-t">size_t</link> *output_data_size);
<link linkend="int">int</link>                 <link linkend="gnutls-pkcs12-get-bag">gnutls_pkcs12_get_bag</link>               (<link linkend="gnutls-pkcs12-t">gnutls_pkcs12_t</link> pkcs12,
                                                         <link linkend="int">int</link> indx,
                                                         <link linkend="gnutls-pkcs12-bag-t">gnutls_pkcs12_bag_t</link> bag);
<link linkend="int">int</link>                 <link linkend="gnutls-pkcs12-set-bag">gnutls_pkcs12_set_bag</link>               (<link linkend="gnutls-pkcs12-t">gnutls_pkcs12_t</link> pkcs12,
                                                         <link linkend="gnutls-pkcs12-bag-t">gnutls_pkcs12_bag_t</link> bag);
<link linkend="int">int</link>                 <link linkend="gnutls-pkcs12-generate-mac">gnutls_pkcs12_generate_mac</link>          (<link linkend="gnutls-pkcs12-t">gnutls_pkcs12_t</link> pkcs12,
                                                         const <link linkend="char">char</link> *pass);
<link linkend="int">int</link>                 <link linkend="gnutls-pkcs12-verify-mac">gnutls_pkcs12_verify_mac</link>            (<link linkend="gnutls-pkcs12-t">gnutls_pkcs12_t</link> pkcs12,
                                                         const <link linkend="char">char</link> *pass);
<link linkend="int">int</link>                 <link linkend="gnutls-pkcs12-bag-decrypt">gnutls_pkcs12_bag_decrypt</link>           (<link linkend="gnutls-pkcs12-bag-t">gnutls_pkcs12_bag_t</link> bag,
                                                         const <link linkend="char">char</link> *pass);
<link linkend="int">int</link>                 <link linkend="gnutls-pkcs12-bag-encrypt">gnutls_pkcs12_bag_encrypt</link>           (<link linkend="gnutls-pkcs12-bag-t">gnutls_pkcs12_bag_t</link> bag,
                                                         const <link linkend="char">char</link> *pass,
                                                         unsigned <link linkend="int">int</link> flags);
enum                <link linkend="gnutls-pkcs12-bag-type-t">gnutls_pkcs12_bag_type_t</link>;
<link linkend="gnutls-pkcs12-bag-type-t">gnutls_pkcs12_bag_type_t</link>  <link linkend="gnutls-pkcs12-bag-get-type">gnutls_pkcs12_bag_get_type</link>    (<link linkend="gnutls-pkcs12-bag-t">gnutls_pkcs12_bag_t</link> bag,
                                                         <link linkend="int">int</link> indx);
<link linkend="int">int</link>                 <link linkend="gnutls-pkcs12-bag-get-data">gnutls_pkcs12_bag_get_data</link>          (<link linkend="gnutls-pkcs12-bag-t">gnutls_pkcs12_bag_t</link> bag,
                                                         <link linkend="int">int</link> indx,
                                                         <link linkend="gnutls-datum-t">gnutls_datum_t</link> *data);
<link linkend="int">int</link>                 <link linkend="gnutls-pkcs12-bag-set-data">gnutls_pkcs12_bag_set_data</link>          (<link linkend="gnutls-pkcs12-bag-t">gnutls_pkcs12_bag_t</link> bag,
                                                         <link linkend="gnutls-pkcs12-bag-type-t">gnutls_pkcs12_bag_type_t</link> type,
                                                         const <link linkend="gnutls-datum-t">gnutls_datum_t</link> *data);
<link linkend="int">int</link>                 <link linkend="gnutls-pkcs12-bag-set-crl">gnutls_pkcs12_bag_set_crl</link>           (<link linkend="gnutls-pkcs12-bag-t">gnutls_pkcs12_bag_t</link> bag,
                                                         <link linkend="gnutls-x509-crl-t">gnutls_x509_crl_t</link> crl);
<link linkend="int">int</link>                 <link linkend="gnutls-pkcs12-bag-set-crt">gnutls_pkcs12_bag_set_crt</link>           (<link linkend="gnutls-pkcs12-bag-t">gnutls_pkcs12_bag_t</link> bag,
                                                         <link linkend="gnutls-x509-crt-t">gnutls_x509_crt_t</link> crt);
<link linkend="int">int</link>                 <link linkend="gnutls-pkcs12-bag-init">gnutls_pkcs12_bag_init</link>              (<link linkend="gnutls-pkcs12-bag-t">gnutls_pkcs12_bag_t</link> *bag);
<link linkend="void">void</link>                <link linkend="gnutls-pkcs12-bag-deinit">gnutls_pkcs12_bag_deinit</link>            (<link linkend="gnutls-pkcs12-bag-t">gnutls_pkcs12_bag_t</link> bag);
<link linkend="int">int</link>                 <link linkend="gnutls-pkcs12-bag-get-count">gnutls_pkcs12_bag_get_count</link>         (<link linkend="gnutls-pkcs12-bag-t">gnutls_pkcs12_bag_t</link> bag);
<link linkend="int">int</link>                 <link linkend="gnutls-pkcs12-bag-get-key-id">gnutls_pkcs12_bag_get_key_id</link>        (<link linkend="gnutls-pkcs12-bag-t">gnutls_pkcs12_bag_t</link> bag,
                                                         <link linkend="int">int</link> indx,
                                                         <link linkend="gnutls-datum-t">gnutls_datum_t</link> *id);
<link linkend="int">int</link>                 <link linkend="gnutls-pkcs12-bag-set-key-id">gnutls_pkcs12_bag_set_key_id</link>        (<link linkend="gnutls-pkcs12-bag-t">gnutls_pkcs12_bag_t</link> bag,
                                                         <link linkend="int">int</link> indx,
                                                         const <link linkend="gnutls-datum-t">gnutls_datum_t</link> *id);
<link linkend="int">int</link>                 <link linkend="gnutls-pkcs12-bag-get-friendly-name">gnutls_pkcs12_bag_get_friendly_name</link> (<link linkend="gnutls-pkcs12-bag-t">gnutls_pkcs12_bag_t</link> bag,
                                                         <link linkend="int">int</link> indx,
                                                         <link linkend="char">char</link> **name);
<link linkend="int">int</link>                 <link linkend="gnutls-pkcs12-bag-set-friendly-name">gnutls_pkcs12_bag_set_friendly_name</link> (<link linkend="gnutls-pkcs12-bag-t">gnutls_pkcs12_bag_t</link> bag,
                                                         <link linkend="int">int</link> indx,
                                                         const <link linkend="char">char</link> *name);
</synopsis>
</refsynopsisdiv>









<refsect1 id="gnutls-pkcs12.description" role="desc">
<title role="desc.title">Description</title>
<para>
</para>
</refsect1>

<refsect1 id="gnutls-pkcs12.details" role="details">
<title role="details.title">Details</title>
<refsect2 id="gnutls-pkcs12-int" role="struct">
<title>struct gnutls_pkcs12_int</title>
<indexterm zone="gnutls-pkcs12-int"><primary sortas="gnutls_pkcs12_int">gnutls_pkcs12_int</primary></indexterm><programlisting>struct gnutls_pkcs12_int;</programlisting>
<para>
</para></refsect2>
<refsect2 id="gnutls-pkcs12-t" role="typedef">
<title>gnutls_pkcs12_t</title>
<indexterm zone="gnutls-pkcs12-t"><primary sortas="gnutls_pkcs12_t">gnutls_pkcs12_t</primary></indexterm><programlisting>  typedef struct gnutls_pkcs12_int *gnutls_pkcs12_t;
</programlisting>
<para>
</para></refsect2>
<refsect2 id="gnutls-pkcs12-bag-int" role="struct">
<title>struct gnutls_pkcs12_bag_int</title>
<indexterm zone="gnutls-pkcs12-bag-int"><primary sortas="gnutls_pkcs12_bag_int">gnutls_pkcs12_bag_int</primary></indexterm><programlisting>struct gnutls_pkcs12_bag_int;</programlisting>
<para>
</para></refsect2>
<refsect2 id="gnutls-pkcs12-bag-t" role="typedef">
<title>gnutls_pkcs12_bag_t</title>
<indexterm zone="gnutls-pkcs12-bag-t"><primary sortas="gnutls_pkcs12_bag_t">gnutls_pkcs12_bag_t</primary></indexterm><programlisting>  typedef struct gnutls_pkcs12_bag_int *gnutls_pkcs12_bag_t;
</programlisting>
<para>
</para></refsect2>
<refsect2 id="gnutls-pkcs12-init" role="function">
<title>gnutls_pkcs12_init ()</title>
<indexterm zone="gnutls-pkcs12-init"><primary sortas="gnutls_pkcs12_init">gnutls_pkcs12_init</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_pkcs12_init                  (<link linkend="gnutls-pkcs12-t">gnutls_pkcs12_t</link> *pkcs12);</programlisting>
<para>
This function will initialize a PKCS12 structure. PKCS12 structures
usually contain lists of X.509 Certificates and X.509 Certificate
revocation lists.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>pkcs12</parameter>&#160;:</term>
<listitem><simpara> The structure to be initialized
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> On success, <link linkend="GNUTLS-E-SUCCESS--CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> is returned, otherwise a
  negative error value.

</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-pkcs12-deinit" role="function">
<title>gnutls_pkcs12_deinit ()</title>
<indexterm zone="gnutls-pkcs12-deinit"><primary sortas="gnutls_pkcs12_deinit">gnutls_pkcs12_deinit</primary></indexterm><programlisting><link linkend="void">void</link>                gnutls_pkcs12_deinit                (<link linkend="gnutls-pkcs12-t">gnutls_pkcs12_t</link> pkcs12);</programlisting>
<para>
This function will deinitialize a PKCS12 structure.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>pkcs12</parameter>&#160;:</term>
<listitem><simpara> The structure to be initialized
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-pkcs12-import" role="function">
<title>gnutls_pkcs12_import ()</title>
<indexterm zone="gnutls-pkcs12-import"><primary sortas="gnutls_pkcs12_import">gnutls_pkcs12_import</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_pkcs12_import                (<link linkend="gnutls-pkcs12-t">gnutls_pkcs12_t</link> pkcs12,
                                                         const <link linkend="gnutls-datum-t">gnutls_datum_t</link> *data,
                                                         <link linkend="gnutls-x509-crt-fmt-t">gnutls_x509_crt_fmt_t</link> format,
                                                         unsigned <link linkend="int">int</link> flags);</programlisting>
<para>
This function will convert the given DER or PEM encoded PKCS12
to the native gnutls_pkcs12_t format. The output will be stored in 'pkcs12'.
</para>
<para>
If the PKCS12 is PEM encoded it should have a header of "PKCS12".</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>pkcs12</parameter>&#160;:</term>
<listitem><simpara> The structure to store the parsed PKCS12.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>data</parameter>&#160;:</term>
<listitem><simpara> The DER or PEM encoded PKCS12.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>format</parameter>&#160;:</term>
<listitem><simpara> One of DER or PEM
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>flags</parameter>&#160;:</term>
<listitem><simpara> an ORed sequence of gnutls_privkey_pkcs8_flags
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> On success, <link linkend="GNUTLS-E-SUCCESS--CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> is returned, otherwise a
  negative error value.

</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-pkcs12-export" role="function">
<title>gnutls_pkcs12_export ()</title>
<indexterm zone="gnutls-pkcs12-export"><primary sortas="gnutls_pkcs12_export">gnutls_pkcs12_export</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_pkcs12_export                (<link linkend="gnutls-pkcs12-t">gnutls_pkcs12_t</link> pkcs12,
                                                         <link linkend="gnutls-x509-crt-fmt-t">gnutls_x509_crt_fmt_t</link> format,
                                                         <link linkend="void">void</link> *output_data,
                                                         <link linkend="size-t">size_t</link> *output_data_size);</programlisting>
<para>
This function will export the pkcs12 structure to DER or PEM format.
</para>
<para>
If the buffer provided is not long enough to hold the output, then
*output_data_size will be updated and GNUTLS_E_SHORT_MEMORY_BUFFER
will be returned.
</para>
<para>
If the structure is PEM encoded, it will have a header
of "BEGIN PKCS12".</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>pkcs12</parameter>&#160;:</term>
<listitem><simpara> Holds the pkcs12 structure
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>format</parameter>&#160;:</term>
<listitem><simpara> the format of output params. One of PEM or DER.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>output_data</parameter>&#160;:</term>
<listitem><simpara> will contain a structure PEM or DER encoded
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>output_data_size</parameter>&#160;:</term>
<listitem><simpara> holds the size of output_data (and will be
  replaced by the actual size of parameters)
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> In case of failure a negative value will be
  returned, and 0 on success.

</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-pkcs12-get-bag" role="function">
<title>gnutls_pkcs12_get_bag ()</title>
<indexterm zone="gnutls-pkcs12-get-bag"><primary sortas="gnutls_pkcs12_get_bag">gnutls_pkcs12_get_bag</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_pkcs12_get_bag               (<link linkend="gnutls-pkcs12-t">gnutls_pkcs12_t</link> pkcs12,
                                                         <link linkend="int">int</link> indx,
                                                         <link linkend="gnutls-pkcs12-bag-t">gnutls_pkcs12_bag_t</link> bag);</programlisting>
<para>
This function will return a Bag from the PKCS12 structure.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>pkcs12</parameter>&#160;:</term>
<listitem><simpara> should contain a gnutls_pkcs12_t structure
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>indx</parameter>&#160;:</term>
<listitem><simpara> contains the index of the bag to extract
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>bag</parameter>&#160;:</term>
<listitem><simpara> An initialized bag, where the contents of the bag will be copied
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> On success, <link linkend="GNUTLS-E-SUCCESS--CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> is returned, otherwise a
  negative error value.

After the last Bag has been read GNUTLS_E_REQUESTED_DATA_NOT_AVAILABLE
will be returned.

</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-pkcs12-set-bag" role="function">
<title>gnutls_pkcs12_set_bag ()</title>
<indexterm zone="gnutls-pkcs12-set-bag"><primary sortas="gnutls_pkcs12_set_bag">gnutls_pkcs12_set_bag</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_pkcs12_set_bag               (<link linkend="gnutls-pkcs12-t">gnutls_pkcs12_t</link> pkcs12,
                                                         <link linkend="gnutls-pkcs12-bag-t">gnutls_pkcs12_bag_t</link> bag);</programlisting>
<para>
This function will insert a Bag into the PKCS12 structure.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>pkcs12</parameter>&#160;:</term>
<listitem><simpara> should contain a gnutls_pkcs12_t structure
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>bag</parameter>&#160;:</term>
<listitem><simpara> An initialized bag
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> On success, <link linkend="GNUTLS-E-SUCCESS--CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> is returned, otherwise a
  negative error value.

</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-pkcs12-generate-mac" role="function">
<title>gnutls_pkcs12_generate_mac ()</title>
<indexterm zone="gnutls-pkcs12-generate-mac"><primary sortas="gnutls_pkcs12_generate_mac">gnutls_pkcs12_generate_mac</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_pkcs12_generate_mac          (<link linkend="gnutls-pkcs12-t">gnutls_pkcs12_t</link> pkcs12,
                                                         const <link linkend="char">char</link> *pass);</programlisting>
<para>
This function will generate a MAC for the PKCS12 structure.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>pkcs12</parameter>&#160;:</term>
<listitem><simpara> should contain a gnutls_pkcs12_t structure
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>pass</parameter>&#160;:</term>
<listitem><simpara> The password for the MAC
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> On success, <link linkend="GNUTLS-E-SUCCESS--CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> is returned, otherwise a
  negative error value.

</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-pkcs12-verify-mac" role="function">
<title>gnutls_pkcs12_verify_mac ()</title>
<indexterm zone="gnutls-pkcs12-verify-mac"><primary sortas="gnutls_pkcs12_verify_mac">gnutls_pkcs12_verify_mac</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_pkcs12_verify_mac            (<link linkend="gnutls-pkcs12-t">gnutls_pkcs12_t</link> pkcs12,
                                                         const <link linkend="char">char</link> *pass);</programlisting>
<para>
This function will verify the MAC for the PKCS12 structure.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>pkcs12</parameter>&#160;:</term>
<listitem><simpara> should contain a gnutls_pkcs12_t structure
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>pass</parameter>&#160;:</term>
<listitem><simpara> The password for the MAC
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> On success, <link linkend="GNUTLS-E-SUCCESS--CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> is returned, otherwise a
  negative error value.

</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-pkcs12-bag-decrypt" role="function">
<title>gnutls_pkcs12_bag_decrypt ()</title>
<indexterm zone="gnutls-pkcs12-bag-decrypt"><primary sortas="gnutls_pkcs12_bag_decrypt">gnutls_pkcs12_bag_decrypt</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_pkcs12_bag_decrypt           (<link linkend="gnutls-pkcs12-bag-t">gnutls_pkcs12_bag_t</link> bag,
                                                         const <link linkend="char">char</link> *pass);</programlisting>
<para>
This function will decrypt the given encrypted bag and return 0 on
success.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>bag</parameter>&#160;:</term>
<listitem><simpara> The bag
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>pass</parameter>&#160;:</term>
<listitem><simpara> The password used for encryption, must be ASCII.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> On success, <link linkend="GNUTLS-E-SUCCESS--CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> (zero) is returned,
  otherwise an error code is returned.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-pkcs12-bag-encrypt" role="function">
<title>gnutls_pkcs12_bag_encrypt ()</title>
<indexterm zone="gnutls-pkcs12-bag-encrypt"><primary sortas="gnutls_pkcs12_bag_encrypt">gnutls_pkcs12_bag_encrypt</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_pkcs12_bag_encrypt           (<link linkend="gnutls-pkcs12-bag-t">gnutls_pkcs12_bag_t</link> bag,
                                                         const <link linkend="char">char</link> *pass,
                                                         unsigned <link linkend="int">int</link> flags);</programlisting>
<para>
This function will encrypt the given bag.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>bag</parameter>&#160;:</term>
<listitem><simpara> The bag
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>pass</parameter>&#160;:</term>
<listitem><simpara> The password used for encryption, must be ASCII
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>flags</parameter>&#160;:</term>
<listitem><simpara> should be one of <link linkend="gnutls-pkcs-encrypt-flags-t"><type>gnutls_pkcs_encrypt_flags_t</type></link> elements bitwise or'd
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> On success, <link linkend="GNUTLS-E-SUCCESS--CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> (zero) is returned,
  otherwise an error code is returned.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-pkcs12-bag-type-t" role="enum">
<title>enum gnutls_pkcs12_bag_type_t</title>
<indexterm zone="gnutls-pkcs12-bag-type-t"><primary sortas="gnutls_pkcs12_bag_type_t">gnutls_pkcs12_bag_type_t</primary></indexterm><programlisting>  typedef enum gnutls_pkcs12_bag_type_t
  {
    GNUTLS_BAG_EMPTY = 0,

    GNUTLS_BAG_PKCS8_ENCRYPTED_KEY = 1,
    GNUTLS_BAG_PKCS8_KEY,
    GNUTLS_BAG_CERTIFICATE,
    GNUTLS_BAG_CRL,
    GNUTLS_BAG_ENCRYPTED = 10,
    GNUTLS_BAG_UNKNOWN = 20
  } gnutls_pkcs12_bag_type_t;
</programlisting>
<para>
</para></refsect2>
<refsect2 id="gnutls-pkcs12-bag-get-type" role="function">
<title>gnutls_pkcs12_bag_get_type ()</title>
<indexterm zone="gnutls-pkcs12-bag-get-type"><primary sortas="gnutls_pkcs12_bag_get_type">gnutls_pkcs12_bag_get_type</primary></indexterm><programlisting><link linkend="gnutls-pkcs12-bag-type-t">gnutls_pkcs12_bag_type_t</link>  gnutls_pkcs12_bag_get_type    (<link linkend="gnutls-pkcs12-bag-t">gnutls_pkcs12_bag_t</link> bag,
                                                         <link linkend="int">int</link> indx);</programlisting>
<para>
This function will return the bag's type.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>bag</parameter>&#160;:</term>
<listitem><simpara> The bag
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>indx</parameter>&#160;:</term>
<listitem><simpara> The element of the bag to get the type
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> One of the <link linkend="gnutls-pkcs12-bag-type-t"><type>gnutls_pkcs12_bag_type_t</type></link> enumerations.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-pkcs12-bag-get-data" role="function">
<title>gnutls_pkcs12_bag_get_data ()</title>
<indexterm zone="gnutls-pkcs12-bag-get-data"><primary sortas="gnutls_pkcs12_bag_get_data">gnutls_pkcs12_bag_get_data</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_pkcs12_bag_get_data          (<link linkend="gnutls-pkcs12-bag-t">gnutls_pkcs12_bag_t</link> bag,
                                                         <link linkend="int">int</link> indx,
                                                         <link linkend="gnutls-datum-t">gnutls_datum_t</link> *data);</programlisting>
<para>
This function will return the bag's data. The data is a constant
that is stored into the bag. Should not be accessed after the bag
is deleted.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>bag</parameter>&#160;:</term>
<listitem><simpara> The bag
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>indx</parameter>&#160;:</term>
<listitem><simpara> The element of the bag to get the data from
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>data</parameter>&#160;:</term>
<listitem><simpara> where the bag's data will be. Should be treated as constant.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> On success, <link linkend="GNUTLS-E-SUCCESS--CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> is returned, otherwise a
  negative error value.and a negative error code on error.

</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-pkcs12-bag-set-data" role="function">
<title>gnutls_pkcs12_bag_set_data ()</title>
<indexterm zone="gnutls-pkcs12-bag-set-data"><primary sortas="gnutls_pkcs12_bag_set_data">gnutls_pkcs12_bag_set_data</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_pkcs12_bag_set_data          (<link linkend="gnutls-pkcs12-bag-t">gnutls_pkcs12_bag_t</link> bag,
                                                         <link linkend="gnutls-pkcs12-bag-type-t">gnutls_pkcs12_bag_type_t</link> type,
                                                         const <link linkend="gnutls-datum-t">gnutls_datum_t</link> *data);</programlisting>
<para>
This function will insert the given data of the given type into
the bag.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>bag</parameter>&#160;:</term>
<listitem><simpara> The bag
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>type</parameter>&#160;:</term>
<listitem><simpara> The data's type
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>data</parameter>&#160;:</term>
<listitem><simpara> the data to be copied.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> the index of the added bag on success, or a negative
value on error.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-pkcs12-bag-set-crl" role="function">
<title>gnutls_pkcs12_bag_set_crl ()</title>
<indexterm zone="gnutls-pkcs12-bag-set-crl"><primary sortas="gnutls_pkcs12_bag_set_crl">gnutls_pkcs12_bag_set_crl</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_pkcs12_bag_set_crl           (<link linkend="gnutls-pkcs12-bag-t">gnutls_pkcs12_bag_t</link> bag,
                                                         <link linkend="gnutls-x509-crl-t">gnutls_x509_crl_t</link> crl);</programlisting>
<para>
This function will insert the given CRL into the
bag. This is just a wrapper over <link linkend="gnutls-pkcs12-bag-set-data"><function>gnutls_pkcs12_bag_set_data()</function></link>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>bag</parameter>&#160;:</term>
<listitem><simpara> The bag
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>crl</parameter>&#160;:</term>
<listitem><simpara> the CRL to be copied.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> the index of the added bag on success, or a negative value
on failure.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-pkcs12-bag-set-crt" role="function">
<title>gnutls_pkcs12_bag_set_crt ()</title>
<indexterm zone="gnutls-pkcs12-bag-set-crt"><primary sortas="gnutls_pkcs12_bag_set_crt">gnutls_pkcs12_bag_set_crt</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_pkcs12_bag_set_crt           (<link linkend="gnutls-pkcs12-bag-t">gnutls_pkcs12_bag_t</link> bag,
                                                         <link linkend="gnutls-x509-crt-t">gnutls_x509_crt_t</link> crt);</programlisting>
<para>
This function will insert the given certificate into the
bag. This is just a wrapper over <link linkend="gnutls-pkcs12-bag-set-data"><function>gnutls_pkcs12_bag_set_data()</function></link>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>bag</parameter>&#160;:</term>
<listitem><simpara> The bag
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>crt</parameter>&#160;:</term>
<listitem><simpara> the certificate to be copied.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> the index of the added bag on success, or a negative
value on failure.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-pkcs12-bag-init" role="function">
<title>gnutls_pkcs12_bag_init ()</title>
<indexterm zone="gnutls-pkcs12-bag-init"><primary sortas="gnutls_pkcs12_bag_init">gnutls_pkcs12_bag_init</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_pkcs12_bag_init              (<link linkend="gnutls-pkcs12-bag-t">gnutls_pkcs12_bag_t</link> *bag);</programlisting>
<para>
This function will initialize a PKCS12 bag structure. PKCS12 Bags
usually contain private keys, lists of X.509 Certificates and X.509 Certificate
revocation lists.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>bag</parameter>&#160;:</term>
<listitem><simpara> The structure to be initialized
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> On success, <link linkend="GNUTLS-E-SUCCESS--CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> is returned, otherwise a
  negative error value.

</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-pkcs12-bag-deinit" role="function">
<title>gnutls_pkcs12_bag_deinit ()</title>
<indexterm zone="gnutls-pkcs12-bag-deinit"><primary sortas="gnutls_pkcs12_bag_deinit">gnutls_pkcs12_bag_deinit</primary></indexterm><programlisting><link linkend="void">void</link>                gnutls_pkcs12_bag_deinit            (<link linkend="gnutls-pkcs12-bag-t">gnutls_pkcs12_bag_t</link> bag);</programlisting>
<para>
This function will deinitialize a PKCS12 Bag structure.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>bag</parameter>&#160;:</term>
<listitem><simpara> The structure to be initialized
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-pkcs12-bag-get-count" role="function">
<title>gnutls_pkcs12_bag_get_count ()</title>
<indexterm zone="gnutls-pkcs12-bag-get-count"><primary sortas="gnutls_pkcs12_bag_get_count">gnutls_pkcs12_bag_get_count</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_pkcs12_bag_get_count         (<link linkend="gnutls-pkcs12-bag-t">gnutls_pkcs12_bag_t</link> bag);</programlisting>
<para>
This function will return the number of the elements withing the bag.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>bag</parameter>&#160;:</term>
<listitem><simpara> The bag
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> Number of elements in bag, or an negative error code on
  error.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-pkcs12-bag-get-key-id" role="function">
<title>gnutls_pkcs12_bag_get_key_id ()</title>
<indexterm zone="gnutls-pkcs12-bag-get-key-id"><primary sortas="gnutls_pkcs12_bag_get_key_id">gnutls_pkcs12_bag_get_key_id</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_pkcs12_bag_get_key_id        (<link linkend="gnutls-pkcs12-bag-t">gnutls_pkcs12_bag_t</link> bag,
                                                         <link linkend="int">int</link> indx,
                                                         <link linkend="gnutls-datum-t">gnutls_datum_t</link> *id);</programlisting>
<para>
This function will return the key ID, of the specified bag element.
The key ID is usually used to distinguish the local private key and the certificate pair.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>bag</parameter>&#160;:</term>
<listitem><simpara> The bag
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>indx</parameter>&#160;:</term>
<listitem><simpara> The bag's element to add the id
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>id</parameter>&#160;:</term>
<listitem><simpara> where the ID will be copied (to be treated as const)
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> On success, <link linkend="GNUTLS-E-SUCCESS--CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> is returned, otherwise a
  negative error value. or a negative value on error.

</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-pkcs12-bag-set-key-id" role="function">
<title>gnutls_pkcs12_bag_set_key_id ()</title>
<indexterm zone="gnutls-pkcs12-bag-set-key-id"><primary sortas="gnutls_pkcs12_bag_set_key_id">gnutls_pkcs12_bag_set_key_id</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_pkcs12_bag_set_key_id        (<link linkend="gnutls-pkcs12-bag-t">gnutls_pkcs12_bag_t</link> bag,
                                                         <link linkend="int">int</link> indx,
                                                         const <link linkend="gnutls-datum-t">gnutls_datum_t</link> *id);</programlisting>
<para>
This function will add the given key ID, to the specified, by the index, bag
element. The key ID will be encoded as a 'Local key identifier' bag attribute,
which is usually used to distinguish the local private key and the certificate pair.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>bag</parameter>&#160;:</term>
<listitem><simpara> The bag
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>indx</parameter>&#160;:</term>
<listitem><simpara> The bag's element to add the id
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>id</parameter>&#160;:</term>
<listitem><simpara> the ID
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> On success, <link linkend="GNUTLS-E-SUCCESS--CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> is returned, otherwise a
  negative error value. or a negative value on error.

</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-pkcs12-bag-get-friendly-name" role="function">
<title>gnutls_pkcs12_bag_get_friendly_name ()</title>
<indexterm zone="gnutls-pkcs12-bag-get-friendly-name"><primary sortas="gnutls_pkcs12_bag_get_friendly_name">gnutls_pkcs12_bag_get_friendly_name</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_pkcs12_bag_get_friendly_name (<link linkend="gnutls-pkcs12-bag-t">gnutls_pkcs12_bag_t</link> bag,
                                                         <link linkend="int">int</link> indx,
                                                         <link linkend="char">char</link> **name);</programlisting>
<para>
This function will return the friendly name, of the specified bag element.
The key ID is usually used to distinguish the local private key and the certificate pair.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>bag</parameter>&#160;:</term>
<listitem><simpara> The bag
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>indx</parameter>&#160;:</term>
<listitem><simpara> The bag's element to add the id
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>name</parameter>&#160;:</term>
<listitem><simpara> will hold a pointer to the name (to be treated as const)
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> On success, <link linkend="GNUTLS-E-SUCCESS--CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> is returned, otherwise a
  negative error value. or a negative value on error.

</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-pkcs12-bag-set-friendly-name" role="function">
<title>gnutls_pkcs12_bag_set_friendly_name ()</title>
<indexterm zone="gnutls-pkcs12-bag-set-friendly-name"><primary sortas="gnutls_pkcs12_bag_set_friendly_name">gnutls_pkcs12_bag_set_friendly_name</primary></indexterm><programlisting><link linkend="int">int</link>                 gnutls_pkcs12_bag_set_friendly_name (<link linkend="gnutls-pkcs12-bag-t">gnutls_pkcs12_bag_t</link> bag,
                                                         <link linkend="int">int</link> indx,
                                                         const <link linkend="char">char</link> *name);</programlisting>
<para>
This function will add the given key friendly name, to the specified, by the index, bag
element. The name will be encoded as a 'Friendly name' bag attribute,
which is usually used to set a user name to the local private key and the certificate pair.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>bag</parameter>&#160;:</term>
<listitem><simpara> The bag
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>indx</parameter>&#160;:</term>
<listitem><simpara> The bag's element to add the id
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>name</parameter>&#160;:</term>
<listitem><simpara> the name
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> On success, <link linkend="GNUTLS-E-SUCCESS--CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> is returned, otherwise a
  negative error value. or a negative value on error.

</simpara></listitem></varlistentry>
</variablelist></refsect2>

</refsect1>




</refentry>
