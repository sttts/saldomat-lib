<?xml?>

<tm2>

  <typedef id="list1_base" type="pointer" lang="c" >

    <codedefs>

      <codedef id="construct">
        <code>
          $(dst)=$(preset);
        </code>
      </codedef>

      <codedef id="destruct">
        <code>
          $(member_prefix)_free($(src));
        </code>
      </codedef>

      <codedef id="assign">
        <code>
          $(dst)=$(src);
        </code>
      </codedef>

      <codedef id="dup">
        <code>
          $(dst)=$(member_prefix)_dup($(src));
        </code>
      </codedef>

      <codedef id="compare">
        <code>
        </code>
      </codedef>

      <codedef id="toXml">
        <!-- !attribute -->
        <memberFlagsMask>  attribute</memberFlagsMask>
        <memberFlagsValue>          </memberFlagsValue>
        <code>
        </code>
      </codedef>

      <codedef id="toXml">
        <!-- attribute -->
        <memberFlagsMask>  attribute</memberFlagsMask>
        <memberFlagsValue> attribute</memberFlagsValue>
        <code>
        </code>
      </codedef>

      <codedef id="fromXml">
        <!-- !attribute -->
        <memberFlagsMask>  attribute</memberFlagsMask>
        <memberFlagsValue>          </memberFlagsValue>
        <code>
        </code>
      </codedef>

      <codedef id="fromXml">
        <!-- enum | attribute -->
        <memberFlagsMask>  attribute</memberFlagsMask>
        <memberFlagsValue> attribute</memberFlagsValue>
        <code>
        </code>
      </codedef>



      <codedef id="toObject">
        <code>
        </code>
      </codedef>



      <codedef id="fromObject">
        <code>
        </code>
      </codedef>



      <codedef id="toDb">
        <code>
          {
            GWEN_DB_NODE *dbDest;
            $(member_basetype_type) *elem;
            
            $(retval)=0;
            
            dbDest=GWEN_DB_GetGroup($(db), GWEN_DB_FLAGS_OVERWRITE_GROUPS, "$(name)");
            assert(dbDest);
            
            elem=$(member_prefix)_First($(src));
            while(elem) {
              GWEN_DB_NODE *dbElem;
              
              dbElem=GWEN_DB_GetGroup(dbDest, GWEN_PATH_FLAGS_CREATE_GROUP, "element");
              assert(dbElem);
              $(retval)=$(member_basetype_prefix)_toDb(elem, dbElem);
              if ($(retval)&lt;0) {
                DBG_INFO(GWEN_LOGDOMAIN, "here (%d)", $(retval));
                break;
              }
              elem=$(member_prefix)_Next(elem);
            }
          }
        </code>
      </codedef>



      <codedef id="fromDb">
        <code>
          {
            GWEN_DB_NODE *dbSource;
            
            dbSource=GWEN_DB_GetGroup($(db), GWEN_PATH_FLAGS_NAMEMUSTEXIST, "$(name)");
            if (dbSource) {
              $(member_type) *t;
              GWEN_DB_NODE *dbT;
              
              t=$(member_prefix)_new();
              dbT=GWEN_DB_FindFirstGroup(dbSource, "element");
              while(dbT) {
                $(member_basetype_type) *elem;
                
                elem=$(member_basetype_prefix)_fromDb(dbT);
                if (elem)
                  $(member_prefix)_Add(elem, t);
                dbT=GWEN_DB_FindNextGroup(dbT, "element");
              }
              $(dst)=t;
            }
            else
              $(dst)=$(preset);
          }
        </code>
      </codedef>



      <codedef id="toHashString">
        <code>
        </code>
      </codedef>




    </codedefs>



    <defaults>
      <!-- defaults flags etc for member declarations of this type -->
      <default>NULL</default>
      <preset>NULL</preset>
      <setflags>const dup</setflags>
      <getflags>const</getflags>
      <dupflags>const</dupflags>
    </defaults>
  
  </typedef>

</tm2>
